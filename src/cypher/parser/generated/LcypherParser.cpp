
// Generated from /home2/xcj/tugraph-2024-04-11/tugraph-db-master/src/cypher/grammar/../../..//src/cypher/grammar/Lcypher.g4 by ANTLR 4.12.0


#include "LcypherVisitor.h"

#include "LcypherParser.h"


using namespace antlrcpp;
using namespace parser;

using namespace antlr4;

namespace {

struct LcypherParserStaticData final {
  LcypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  LcypherParserStaticData(const LcypherParserStaticData&) = delete;
  LcypherParserStaticData(LcypherParserStaticData&&) = delete;
  LcypherParserStaticData& operator=(const LcypherParserStaticData&) = delete;
  LcypherParserStaticData& operator=(LcypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag lcypherParserOnceFlag;
LcypherParserStaticData *lcypherParserStaticData = nullptr;

void lcypherParserInitialize() {
  assert(lcypherParserStaticData == nullptr);
  auto staticData = std::make_unique<LcypherParserStaticData>(
    std::vector<std::string>{
      "oC_Cypher", "oC_Statement", "oC_Query", "oC_View", "oC_RegularQuery", 
      "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
      "oC_UpdatingClause", "oC_ReadingClause", "oC_Match", "oC_Unwind", 
      "oC_Merge", "oC_MergeAction", "oC_Create", "oC_Set", "oC_SetItem", 
      "oC_Delete", "oC_Remove", "oC_RemoveItem", "oC_InQueryCall", "oC_StandaloneCall", 
      "oC_YieldItems", "oC_YieldItem", "oC_With", "oC_Return", "oC_ReturnBody", 
      "oC_ReturnItems", "oC_ReturnItem", "oC_Order", "oC_Skip", "oC_Limit", 
      "oC_SortItem", "oC_Hint", "oC_Where", "oC_Pattern", "oC_PatternPart", 
      "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern", 
      "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", 
      "oC_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
      "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", "oC_Expression", 
      "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
      "oC_ComparisonExpression", "oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression", 
      "oC_PowerOfExpression", "oC_UnaryAddOrSubtractExpression", "oC_StringListNullOperatorExpression", 
      "oC_ListOperatorExpression", "oC_StringOperatorExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral", 
      "oC_ListLiteral", "oC_PartialComparisonExpression", "oC_ParenthesizedExpression", 
      "oC_RelationshipsPattern", "oC_FilterExpression", "oC_IdInColl", "oC_FunctionInvocation", 
      "oC_FunctionName", "oC_ExplicitProcedureInvocation", "oC_ImplicitProcedureInvocation", 
      "oC_ProcedureResultField", "oC_ProcedureName", "oC_Namespace", "oC_ListComprehension", 
      "oC_PatternComprehension", "oC_PropertyLookup", "oC_CaseExpression", 
      "oC_CaseAlternatives", "oC_Variable", "oC_NumberLiteral", "oC_MapLiteral", 
      "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", "oC_IntegerLiteral", 
      "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", "oC_ReservedWord", 
      "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "','", "'='", "'+='", "'*'", "'('", "')'", "'['", "']'", 
      "':'", "'|'", "'..'", "'+'", "'-'", "'/'", "'%'", "'^'", "'<>'", "'<'", 
      "'>'", "'<='", "'>='", "'.'", "'{'", "'}'", "'$'", "'\\u27E8'", "'\\u3008'", 
      "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", "'\\uFF1E'", 
      "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
      "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "EXPLAIN", "PROFILE", 
      "OPTIMIZE", "MAINTENANCE", "VIEW", "UNION", "ALL", "OPTIONAL_", "MATCH", 
      "UNWIND", "AS", "MERGE", "ON", "CREATE", "SET", "DETACH", "DELETE_", 
      "REMOVE", "CALL", "YIELD", "WITH", "DISTINCT", "RETURN", "ORDER", 
      "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
      "USING", "JOIN", "START", "WHERE", "NO_DUPLICATE_EDGE", "OR", "XOR", 
      "AND", "NOT", "IN", "STARTS", "ENDS", "CONTAINS", "REGEXP", "IS", 
      "NULL_", "COUNT", "ANY", "NONE", "SINGLE", "TRUE_", "FALSE_", "EXISTS", 
      "CASE", "ELSE", "END", "WHEN", "THEN", "StringLiteral", "EscapedChar", 
      "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", "HexDigit", 
      "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", 
      "ExponentDecimalReal", "RegularDecimalReal", "FILTER", "EXTRACT", 
      "UnescapedSymbolicName", "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", 
      "MANDATORY", "SCALAR", "OF", "ADD", "DROP", "IdentifierStart", "IdentifierPart", 
      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,137,1628,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,1,0,3,0,204,8,0,1,0,1,0,3,0,208,8,0,1,0,3,
  	0,211,8,0,1,0,3,0,214,8,0,1,0,1,0,1,1,1,1,1,1,3,1,221,8,1,1,1,1,1,1,1,
  	3,1,226,8,1,1,1,1,1,1,1,3,1,231,8,1,1,1,1,1,1,1,3,1,236,8,1,1,1,1,1,3,
  	1,240,8,1,1,2,1,2,3,2,244,8,2,1,3,1,3,3,3,248,8,3,1,3,1,3,3,3,252,8,3,
  	1,3,1,3,3,3,256,8,3,1,3,1,3,3,3,260,8,3,1,3,1,3,1,4,1,4,3,4,266,8,4,1,
  	4,5,4,269,8,4,10,4,12,4,272,9,4,1,5,1,5,1,5,1,5,3,5,278,8,5,1,5,1,5,1,
  	5,3,5,283,8,5,1,5,3,5,286,8,5,1,6,1,6,3,6,290,8,6,1,7,1,7,3,7,294,8,7,
  	5,7,296,8,7,10,7,12,7,299,9,7,1,7,1,7,1,7,3,7,304,8,7,5,7,306,8,7,10,
  	7,12,7,309,9,7,1,7,1,7,3,7,313,8,7,1,7,5,7,316,8,7,10,7,12,7,319,9,7,
  	1,7,3,7,322,8,7,1,7,3,7,325,8,7,3,7,327,8,7,1,8,1,8,3,8,331,8,8,5,8,333,
  	8,8,10,8,12,8,336,9,8,1,8,1,8,3,8,340,8,8,5,8,342,8,8,10,8,12,8,345,9,
  	8,1,8,1,8,3,8,349,8,8,4,8,351,8,8,11,8,12,8,352,1,8,1,8,1,9,1,9,1,9,1,
  	9,1,9,3,9,362,8,9,1,10,1,10,1,10,3,10,367,8,10,1,11,1,11,3,11,371,8,11,
  	1,11,1,11,3,11,375,8,11,1,11,1,11,3,11,379,8,11,1,11,5,11,382,8,11,10,
  	11,12,11,385,9,11,1,11,3,11,388,8,11,1,11,3,11,391,8,11,1,12,1,12,3,12,
  	395,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,3,13,405,8,13,1,13,1,
  	13,1,13,5,13,410,8,13,10,13,12,13,413,9,13,1,14,1,14,1,14,1,14,1,14,1,
  	14,1,14,1,14,1,14,1,14,3,14,425,8,14,1,15,1,15,3,15,429,8,15,1,15,1,15,
  	1,16,1,16,3,16,435,8,16,1,16,1,16,1,16,5,16,440,8,16,10,16,12,16,443,
  	9,16,1,17,1,17,3,17,447,8,17,1,17,1,17,3,17,451,8,17,1,17,1,17,1,17,1,
  	17,3,17,457,8,17,1,17,1,17,3,17,461,8,17,1,17,1,17,1,17,1,17,3,17,467,
  	8,17,1,17,1,17,3,17,471,8,17,1,17,1,17,1,17,1,17,3,17,477,8,17,1,17,1,
  	17,3,17,481,8,17,1,18,1,18,3,18,485,8,18,1,18,1,18,3,18,489,8,18,1,18,
  	1,18,3,18,493,8,18,1,18,1,18,3,18,497,8,18,1,18,5,18,500,8,18,10,18,12,
  	18,503,9,18,1,19,1,19,1,19,1,19,3,19,509,8,19,1,19,1,19,3,19,513,8,19,
  	1,19,5,19,516,8,19,10,19,12,19,519,9,19,1,20,1,20,1,20,1,20,3,20,525,
  	8,20,1,21,1,21,1,21,1,21,3,21,531,8,21,1,21,1,21,1,21,3,21,536,8,21,1,
  	22,1,22,1,22,1,22,3,22,542,8,22,1,22,1,22,1,22,1,22,3,22,548,8,22,1,23,
  	1,23,1,23,3,23,553,8,23,1,23,1,23,3,23,557,8,23,1,23,5,23,560,8,23,10,
  	23,12,23,563,9,23,3,23,565,8,23,1,23,3,23,568,8,23,1,23,3,23,571,8,23,
  	1,24,1,24,1,24,1,24,1,24,3,24,578,8,24,1,24,1,24,1,25,1,25,3,25,584,8,
  	25,1,25,3,25,587,8,25,1,25,1,25,1,25,3,25,592,8,25,1,25,3,25,595,8,25,
  	1,26,1,26,3,26,599,8,26,1,26,3,26,602,8,26,1,26,1,26,1,26,1,27,1,27,1,
  	27,3,27,610,8,27,1,27,1,27,3,27,614,8,27,1,27,1,27,3,27,618,8,27,1,28,
  	1,28,3,28,622,8,28,1,28,1,28,3,28,626,8,28,1,28,5,28,629,8,28,10,28,12,
  	28,632,9,28,1,28,1,28,3,28,636,8,28,1,28,1,28,3,28,640,8,28,1,28,5,28,
  	643,8,28,10,28,12,28,646,9,28,3,28,648,8,28,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,29,3,29,657,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,666,8,
  	30,1,30,5,30,669,8,30,10,30,12,30,672,9,30,1,31,1,31,1,31,1,31,1,32,1,
  	32,1,32,1,32,1,33,1,33,3,33,684,8,33,1,33,3,33,687,8,33,1,34,1,34,1,34,
  	1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,703,8,34,
  	1,35,1,35,1,35,1,35,1,36,1,36,3,36,711,8,36,1,36,1,36,3,36,715,8,36,1,
  	36,5,36,718,8,36,10,36,12,36,721,9,36,1,37,1,37,3,37,725,8,37,1,37,1,
  	37,3,37,729,8,37,1,37,1,37,1,37,3,37,734,8,37,1,38,1,38,1,39,1,39,3,39,
  	740,8,39,1,39,5,39,743,8,39,10,39,12,39,746,9,39,1,39,1,39,1,39,1,39,
  	3,39,752,8,39,1,40,1,40,3,40,756,8,40,1,40,1,40,3,40,760,8,40,3,40,762,
  	8,40,1,40,1,40,3,40,766,8,40,3,40,768,8,40,1,40,1,40,3,40,772,8,40,3,
  	40,774,8,40,1,40,1,40,1,41,1,41,3,41,780,8,41,1,41,1,41,1,42,1,42,3,42,
  	786,8,42,1,42,1,42,3,42,790,8,42,1,42,3,42,793,8,42,1,42,3,42,796,8,42,
  	1,42,1,42,3,42,800,8,42,1,42,1,42,1,42,1,42,3,42,806,8,42,1,42,1,42,3,
  	42,810,8,42,1,42,3,42,813,8,42,1,42,3,42,816,8,42,1,42,1,42,1,42,1,42,
  	3,42,822,8,42,1,42,3,42,825,8,42,1,42,3,42,828,8,42,1,42,1,42,3,42,832,
  	8,42,1,42,1,42,1,42,1,42,3,42,838,8,42,1,42,3,42,841,8,42,1,42,3,42,844,
  	8,42,1,42,1,42,3,42,848,8,42,1,43,1,43,3,43,852,8,43,1,43,1,43,3,43,856,
  	8,43,3,43,858,8,43,1,43,1,43,3,43,862,8,43,3,43,864,8,43,1,43,3,43,867,
  	8,43,1,43,1,43,3,43,871,8,43,3,43,873,8,43,1,43,3,43,876,8,43,1,43,1,
  	43,3,43,880,8,43,3,43,882,8,43,1,43,1,43,1,44,1,44,3,44,888,8,44,1,45,
  	1,45,3,45,892,8,45,1,45,1,45,3,45,896,8,45,1,45,1,45,3,45,900,8,45,1,
  	45,3,45,903,8,45,1,45,5,45,906,8,45,10,45,12,45,909,9,45,1,46,1,46,3,
  	46,913,8,46,1,46,5,46,916,8,46,10,46,12,46,919,9,46,1,47,1,47,3,47,923,
  	8,47,1,47,1,47,1,48,1,48,3,48,929,8,48,1,48,1,48,3,48,933,8,48,3,48,935,
  	8,48,1,48,1,48,3,48,939,8,48,1,48,1,48,3,48,943,8,48,3,48,945,8,48,3,
  	48,947,8,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,5,
  	52,960,8,52,10,52,12,52,963,9,52,1,53,1,53,1,53,1,53,1,53,5,53,970,8,
  	53,10,53,12,53,973,9,53,1,54,1,54,1,54,1,54,1,54,5,54,980,8,54,10,54,
  	12,54,983,9,54,1,55,1,55,3,55,987,8,55,5,55,989,8,55,10,55,12,55,992,
  	9,55,1,55,1,55,1,56,1,56,3,56,998,8,56,1,56,5,56,1001,8,56,10,56,12,56,
  	1004,9,56,1,57,1,57,3,57,1008,8,57,1,57,1,57,3,57,1012,8,57,1,57,1,57,
  	3,57,1016,8,57,1,57,1,57,3,57,1020,8,57,1,57,5,57,1023,8,57,10,57,12,
  	57,1026,9,57,1,58,1,58,3,58,1030,8,58,1,58,1,58,3,58,1034,8,58,1,58,1,
  	58,3,58,1038,8,58,1,58,1,58,3,58,1042,8,58,1,58,1,58,3,58,1046,8,58,1,
  	58,1,58,3,58,1050,8,58,1,58,5,58,1053,8,58,10,58,12,58,1056,9,58,1,59,
  	1,59,3,59,1060,8,59,1,59,1,59,3,59,1064,8,59,1,59,5,59,1067,8,59,10,59,
  	12,59,1070,9,59,1,60,1,60,3,60,1074,8,60,5,60,1076,8,60,10,60,12,60,1079,
  	9,60,1,60,1,60,1,61,1,61,1,61,1,61,5,61,1087,8,61,10,61,12,61,1090,9,
  	61,1,62,1,62,1,62,3,62,1095,8,62,1,62,1,62,3,62,1099,8,62,1,62,1,62,1,
  	62,1,62,1,62,3,62,1106,8,62,1,62,1,62,3,62,1110,8,62,1,62,1,62,3,62,1114,
  	8,62,1,62,3,62,1117,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
  	1,63,1,63,1,63,3,63,1131,8,63,1,63,3,63,1134,8,63,1,63,1,63,1,64,1,64,
  	1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1148,8,64,1,65,1,65,3,65,
  	1152,8,65,1,65,5,65,1155,8,65,10,65,12,65,1158,9,65,1,65,3,65,1161,8,
  	65,1,65,3,65,1164,8,65,1,66,1,66,1,66,1,66,1,66,3,66,1171,8,66,1,66,1,
  	66,3,66,1175,8,66,1,66,1,66,3,66,1179,8,66,1,66,1,66,1,66,1,66,1,66,3,
  	66,1186,8,66,1,66,1,66,3,66,1190,8,66,1,66,1,66,3,66,1194,8,66,1,66,1,
  	66,1,66,1,66,3,66,1200,8,66,1,66,1,66,3,66,1204,8,66,1,66,1,66,3,66,1208,
  	8,66,1,66,1,66,1,66,1,66,3,66,1214,8,66,1,66,1,66,3,66,1218,8,66,1,66,
  	1,66,3,66,1222,8,66,1,66,1,66,1,66,1,66,3,66,1228,8,66,1,66,1,66,3,66,
  	1232,8,66,1,66,1,66,3,66,1236,8,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,
  	1244,8,66,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1252,8,67,1,68,1,68,1,69,
  	1,69,3,69,1258,8,69,1,69,1,69,3,69,1262,8,69,1,69,1,69,3,69,1266,8,69,
  	1,69,1,69,3,69,1270,8,69,5,69,1272,8,69,10,69,12,69,1275,9,69,3,69,1277,
  	8,69,1,69,1,69,1,70,1,70,3,70,1283,8,70,1,70,1,70,1,70,3,70,1288,8,70,
  	1,70,1,70,1,70,3,70,1293,8,70,1,70,1,70,1,70,3,70,1298,8,70,1,70,1,70,
  	1,70,3,70,1303,8,70,1,70,1,70,1,70,3,70,1308,8,70,1,70,3,70,1311,8,70,
  	1,71,1,71,3,71,1315,8,71,1,71,1,71,3,71,1319,8,71,1,71,1,71,1,72,1,72,
  	3,72,1325,8,72,1,72,4,72,1328,8,72,11,72,12,72,1329,1,73,1,73,3,73,1334,
  	8,73,1,73,3,73,1337,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,3,75,
  	1347,8,75,1,75,1,75,3,75,1351,8,75,1,75,1,75,3,75,1355,8,75,3,75,1357,
  	8,75,1,75,1,75,3,75,1361,8,75,1,75,1,75,3,75,1365,8,75,1,75,1,75,3,75,
  	1369,8,75,5,75,1371,8,75,10,75,12,75,1374,9,75,3,75,1376,8,75,1,75,1,
  	75,1,76,1,76,1,76,1,76,3,76,1384,8,76,1,77,1,77,3,77,1388,8,77,1,77,1,
  	77,3,77,1392,8,77,1,77,1,77,3,77,1396,8,77,1,77,1,77,3,77,1400,8,77,1,
  	77,1,77,3,77,1404,8,77,5,77,1406,8,77,10,77,12,77,1409,9,77,3,77,1411,
  	8,77,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,81,5,81,
  	1425,8,81,10,81,12,81,1428,9,81,1,82,1,82,3,82,1432,8,82,1,82,1,82,3,
  	82,1436,8,82,1,82,1,82,3,82,1440,8,82,1,82,3,82,1443,8,82,1,82,3,82,1446,
  	8,82,1,82,1,82,1,83,1,83,3,83,1452,8,83,1,83,1,83,3,83,1456,8,83,1,83,
  	1,83,3,83,1460,8,83,3,83,1462,8,83,1,83,1,83,3,83,1466,8,83,1,83,1,83,
  	3,83,1470,8,83,1,83,1,83,3,83,1474,8,83,3,83,1476,8,83,1,83,1,83,3,83,
  	1480,8,83,1,83,1,83,3,83,1484,8,83,1,83,1,83,1,84,1,84,3,84,1490,8,84,
  	1,84,1,84,1,85,1,85,3,85,1496,8,85,1,85,4,85,1499,8,85,11,85,12,85,1500,
  	1,85,1,85,3,85,1505,8,85,1,85,1,85,3,85,1509,8,85,1,85,4,85,1512,8,85,
  	11,85,12,85,1513,3,85,1516,8,85,1,85,3,85,1519,8,85,1,85,1,85,3,85,1523,
  	8,85,1,85,3,85,1526,8,85,1,85,3,85,1529,8,85,1,85,1,85,1,86,1,86,3,86,
  	1535,8,86,1,86,1,86,3,86,1539,8,86,1,86,1,86,3,86,1543,8,86,1,86,1,86,
  	1,87,1,87,1,88,1,88,3,88,1551,8,88,1,89,1,89,3,89,1555,8,89,1,89,1,89,
  	3,89,1559,8,89,1,89,1,89,3,89,1563,8,89,1,89,1,89,3,89,1567,8,89,1,89,
  	1,89,3,89,1571,8,89,1,89,1,89,3,89,1575,8,89,1,89,1,89,3,89,1579,8,89,
  	1,89,1,89,3,89,1583,8,89,5,89,1585,8,89,10,89,12,89,1588,9,89,3,89,1590,
  	8,89,1,89,1,89,1,90,1,90,1,90,3,90,1597,8,90,1,91,1,91,3,91,1601,8,91,
  	1,91,4,91,1604,8,91,11,91,12,91,1605,1,92,1,92,1,93,1,93,1,94,1,94,1,
  	95,1,95,3,95,1616,8,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,
  	1,100,1,100,0,0,101,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
  	36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
  	82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
  	122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
  	158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
  	194,196,198,200,0,10,1,0,73,76,1,0,13,14,1,0,97,98,1,0,107,109,1,0,117,
  	118,4,0,93,96,110,110,119,121,134,134,7,0,51,63,66,76,80,80,82,89,91,
  	92,97,104,122,131,2,0,19,19,27,30,2,0,20,20,31,34,2,0,14,14,35,45,1863,
  	0,203,1,0,0,0,2,239,1,0,0,0,4,243,1,0,0,0,6,245,1,0,0,0,8,263,1,0,0,0,
  	10,285,1,0,0,0,12,289,1,0,0,0,14,326,1,0,0,0,16,350,1,0,0,0,18,361,1,
  	0,0,0,20,366,1,0,0,0,22,370,1,0,0,0,24,392,1,0,0,0,26,402,1,0,0,0,28,
  	424,1,0,0,0,30,426,1,0,0,0,32,432,1,0,0,0,34,480,1,0,0,0,36,484,1,0,0,
  	0,38,504,1,0,0,0,40,524,1,0,0,0,42,526,1,0,0,0,44,537,1,0,0,0,46,564,
  	1,0,0,0,48,577,1,0,0,0,50,581,1,0,0,0,52,596,1,0,0,0,54,606,1,0,0,0,56,
  	647,1,0,0,0,58,656,1,0,0,0,60,658,1,0,0,0,62,673,1,0,0,0,64,677,1,0,0,
  	0,66,681,1,0,0,0,68,702,1,0,0,0,70,704,1,0,0,0,72,708,1,0,0,0,74,733,
  	1,0,0,0,76,735,1,0,0,0,78,751,1,0,0,0,80,753,1,0,0,0,82,777,1,0,0,0,84,
  	847,1,0,0,0,86,849,1,0,0,0,88,887,1,0,0,0,90,889,1,0,0,0,92,910,1,0,0,
  	0,94,920,1,0,0,0,96,926,1,0,0,0,98,948,1,0,0,0,100,950,1,0,0,0,102,952,
  	1,0,0,0,104,954,1,0,0,0,106,964,1,0,0,0,108,974,1,0,0,0,110,990,1,0,0,
  	0,112,995,1,0,0,0,114,1005,1,0,0,0,116,1027,1,0,0,0,118,1057,1,0,0,0,
  	120,1077,1,0,0,0,122,1082,1,0,0,0,124,1116,1,0,0,0,126,1130,1,0,0,0,128,
  	1147,1,0,0,0,130,1149,1,0,0,0,132,1243,1,0,0,0,134,1251,1,0,0,0,136,1253,
  	1,0,0,0,138,1255,1,0,0,0,140,1310,1,0,0,0,142,1312,1,0,0,0,144,1322,1,
  	0,0,0,146,1331,1,0,0,0,148,1338,1,0,0,0,150,1344,1,0,0,0,152,1383,1,0,
  	0,0,154,1385,1,0,0,0,156,1414,1,0,0,0,158,1416,1,0,0,0,160,1418,1,0,0,
  	0,162,1426,1,0,0,0,164,1429,1,0,0,0,166,1449,1,0,0,0,168,1487,1,0,0,0,
  	170,1515,1,0,0,0,172,1532,1,0,0,0,174,1546,1,0,0,0,176,1550,1,0,0,0,178,
  	1552,1,0,0,0,180,1593,1,0,0,0,182,1598,1,0,0,0,184,1607,1,0,0,0,186,1609,
  	1,0,0,0,188,1611,1,0,0,0,190,1615,1,0,0,0,192,1617,1,0,0,0,194,1619,1,
  	0,0,0,196,1621,1,0,0,0,198,1623,1,0,0,0,200,1625,1,0,0,0,202,204,5,135,
  	0,0,203,202,1,0,0,0,203,204,1,0,0,0,204,205,1,0,0,0,205,210,3,2,1,0,206,
  	208,5,135,0,0,207,206,1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,209,211,
  	5,1,0,0,210,207,1,0,0,0,210,211,1,0,0,0,211,213,1,0,0,0,212,214,5,135,
  	0,0,213,212,1,0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,216,5,0,0,1,216,
  	1,1,0,0,0,217,240,3,4,2,0,218,220,5,46,0,0,219,221,5,135,0,0,220,219,
  	1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,240,3,4,2,0,223,225,5,47,
  	0,0,224,226,5,135,0,0,225,224,1,0,0,0,225,226,1,0,0,0,226,227,1,0,0,0,
  	227,240,3,4,2,0,228,230,5,48,0,0,229,231,5,135,0,0,230,229,1,0,0,0,230,
  	231,1,0,0,0,231,232,1,0,0,0,232,240,3,4,2,0,233,235,5,49,0,0,234,236,
  	5,135,0,0,235,234,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,240,3,4,
  	2,0,238,240,3,6,3,0,239,217,1,0,0,0,239,218,1,0,0,0,239,223,1,0,0,0,239,
  	228,1,0,0,0,239,233,1,0,0,0,239,238,1,0,0,0,240,3,1,0,0,0,241,244,3,8,
  	4,0,242,244,3,44,22,0,243,241,1,0,0,0,243,242,1,0,0,0,244,5,1,0,0,0,245,
  	247,5,59,0,0,246,248,5,135,0,0,247,246,1,0,0,0,247,248,1,0,0,0,248,249,
  	1,0,0,0,249,251,5,50,0,0,250,252,5,135,0,0,251,250,1,0,0,0,251,252,1,
  	0,0,0,252,253,1,0,0,0,253,255,3,98,49,0,254,256,5,135,0,0,255,254,1,0,
  	0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,259,5,56,0,0,258,260,5,135,0,
  	0,259,258,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,262,3,8,4,0,262,
  	7,1,0,0,0,263,270,3,12,6,0,264,266,5,135,0,0,265,264,1,0,0,0,265,266,
  	1,0,0,0,266,267,1,0,0,0,267,269,3,10,5,0,268,265,1,0,0,0,269,272,1,0,
  	0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,9,1,0,0,0,272,270,1,0,0,0,273,
  	274,5,51,0,0,274,275,5,135,0,0,275,277,5,52,0,0,276,278,5,135,0,0,277,
  	276,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,286,3,12,6,0,280,282,
  	5,51,0,0,281,283,5,135,0,0,282,281,1,0,0,0,282,283,1,0,0,0,283,284,1,
  	0,0,0,284,286,3,12,6,0,285,273,1,0,0,0,285,280,1,0,0,0,286,11,1,0,0,0,
  	287,290,3,14,7,0,288,290,3,16,8,0,289,287,1,0,0,0,289,288,1,0,0,0,290,
  	13,1,0,0,0,291,293,3,20,10,0,292,294,5,135,0,0,293,292,1,0,0,0,293,294,
  	1,0,0,0,294,296,1,0,0,0,295,291,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,
  	0,297,298,1,0,0,0,298,300,1,0,0,0,299,297,1,0,0,0,300,327,3,52,26,0,301,
  	303,3,20,10,0,302,304,5,135,0,0,303,302,1,0,0,0,303,304,1,0,0,0,304,306,
  	1,0,0,0,305,301,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,
  	0,308,310,1,0,0,0,309,307,1,0,0,0,310,317,3,18,9,0,311,313,5,135,0,0,
  	312,311,1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,316,3,18,9,0,315,
  	312,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,324,1,
  	0,0,0,319,317,1,0,0,0,320,322,5,135,0,0,321,320,1,0,0,0,321,322,1,0,0,
  	0,322,323,1,0,0,0,323,325,3,52,26,0,324,321,1,0,0,0,324,325,1,0,0,0,325,
  	327,1,0,0,0,326,297,1,0,0,0,326,307,1,0,0,0,327,15,1,0,0,0,328,330,3,
  	20,10,0,329,331,5,135,0,0,330,329,1,0,0,0,330,331,1,0,0,0,331,333,1,0,
  	0,0,332,328,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,
  	343,1,0,0,0,336,334,1,0,0,0,337,339,3,18,9,0,338,340,5,135,0,0,339,338,
  	1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,337,1,0,0,0,342,345,1,0,0,
  	0,343,341,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,343,1,0,0,0,346,
  	348,3,50,25,0,347,349,5,135,0,0,348,347,1,0,0,0,348,349,1,0,0,0,349,351,
  	1,0,0,0,350,334,1,0,0,0,351,352,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,
  	0,353,354,1,0,0,0,354,355,3,14,7,0,355,17,1,0,0,0,356,362,3,30,15,0,357,
  	362,3,26,13,0,358,362,3,36,18,0,359,362,3,32,16,0,360,362,3,38,19,0,361,
  	356,1,0,0,0,361,357,1,0,0,0,361,358,1,0,0,0,361,359,1,0,0,0,361,360,1,
  	0,0,0,362,19,1,0,0,0,363,367,3,22,11,0,364,367,3,24,12,0,365,367,3,42,
  	21,0,366,363,1,0,0,0,366,364,1,0,0,0,366,365,1,0,0,0,367,21,1,0,0,0,368,
  	369,5,53,0,0,369,371,5,135,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,372,
  	1,0,0,0,372,374,5,54,0,0,373,375,5,135,0,0,374,373,1,0,0,0,374,375,1,
  	0,0,0,375,376,1,0,0,0,376,383,3,72,36,0,377,379,5,135,0,0,378,377,1,0,
  	0,0,378,379,1,0,0,0,379,380,1,0,0,0,380,382,3,68,34,0,381,378,1,0,0,0,
  	382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,390,1,0,0,0,385,383,
  	1,0,0,0,386,388,5,135,0,0,387,386,1,0,0,0,387,388,1,0,0,0,388,389,1,0,
  	0,0,389,391,3,70,35,0,390,387,1,0,0,0,390,391,1,0,0,0,391,23,1,0,0,0,
  	392,394,5,55,0,0,393,395,5,135,0,0,394,393,1,0,0,0,394,395,1,0,0,0,395,
  	396,1,0,0,0,396,397,3,102,51,0,397,398,5,135,0,0,398,399,5,56,0,0,399,
  	400,5,135,0,0,400,401,3,174,87,0,401,25,1,0,0,0,402,404,5,57,0,0,403,
  	405,5,135,0,0,404,403,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,411,
  	3,74,37,0,407,408,5,135,0,0,408,410,3,28,14,0,409,407,1,0,0,0,410,413,
  	1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,27,1,0,0,0,413,411,1,0,0,
  	0,414,415,5,58,0,0,415,416,5,135,0,0,416,417,5,54,0,0,417,418,5,135,0,
  	0,418,425,3,32,16,0,419,420,5,58,0,0,420,421,5,135,0,0,421,422,5,59,0,
  	0,422,423,5,135,0,0,423,425,3,32,16,0,424,414,1,0,0,0,424,419,1,0,0,0,
  	425,29,1,0,0,0,426,428,5,59,0,0,427,429,5,135,0,0,428,427,1,0,0,0,428,
  	429,1,0,0,0,429,430,1,0,0,0,430,431,3,72,36,0,431,31,1,0,0,0,432,434,
  	5,60,0,0,433,435,5,135,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,436,1,
  	0,0,0,436,441,3,34,17,0,437,438,5,2,0,0,438,440,3,34,17,0,439,437,1,0,
  	0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,33,1,0,0,0,443,
  	441,1,0,0,0,444,446,3,182,91,0,445,447,5,135,0,0,446,445,1,0,0,0,446,
  	447,1,0,0,0,447,448,1,0,0,0,448,450,5,3,0,0,449,451,5,135,0,0,450,449,
  	1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,452,453,3,102,51,0,453,481,1,
  	0,0,0,454,456,3,174,87,0,455,457,5,135,0,0,456,455,1,0,0,0,456,457,1,
  	0,0,0,457,458,1,0,0,0,458,460,5,3,0,0,459,461,5,135,0,0,460,459,1,0,0,
  	0,460,461,1,0,0,0,461,462,1,0,0,0,462,463,3,102,51,0,463,481,1,0,0,0,
  	464,466,3,174,87,0,465,467,5,135,0,0,466,465,1,0,0,0,466,467,1,0,0,0,
  	467,468,1,0,0,0,468,470,5,4,0,0,469,471,5,135,0,0,470,469,1,0,0,0,470,
  	471,1,0,0,0,471,472,1,0,0,0,472,473,3,102,51,0,473,481,1,0,0,0,474,476,
  	3,174,87,0,475,477,5,135,0,0,476,475,1,0,0,0,476,477,1,0,0,0,477,478,
  	1,0,0,0,478,479,3,92,46,0,479,481,1,0,0,0,480,444,1,0,0,0,480,454,1,0,
  	0,0,480,464,1,0,0,0,480,474,1,0,0,0,481,35,1,0,0,0,482,483,5,61,0,0,483,
  	485,5,135,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,488,
  	5,62,0,0,487,489,5,135,0,0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,
  	0,0,0,490,501,3,102,51,0,491,493,5,135,0,0,492,491,1,0,0,0,492,493,1,
  	0,0,0,493,494,1,0,0,0,494,496,5,2,0,0,495,497,5,135,0,0,496,495,1,0,0,
  	0,496,497,1,0,0,0,497,498,1,0,0,0,498,500,3,102,51,0,499,492,1,0,0,0,
  	500,503,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,37,1,0,0,0,503,501,
  	1,0,0,0,504,505,5,63,0,0,505,506,5,135,0,0,506,517,3,40,20,0,507,509,
  	5,135,0,0,508,507,1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,512,5,2,
  	0,0,511,513,5,135,0,0,512,511,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,
  	514,516,3,40,20,0,515,508,1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,517,
  	518,1,0,0,0,518,39,1,0,0,0,519,517,1,0,0,0,520,521,3,174,87,0,521,522,
  	3,92,46,0,522,525,1,0,0,0,523,525,3,182,91,0,524,520,1,0,0,0,524,523,
  	1,0,0,0,525,41,1,0,0,0,526,527,5,64,0,0,527,528,5,135,0,0,528,535,3,154,
  	77,0,529,531,5,135,0,0,530,529,1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,
  	0,532,533,5,65,0,0,533,534,5,135,0,0,534,536,3,46,23,0,535,530,1,0,0,
  	0,535,536,1,0,0,0,536,43,1,0,0,0,537,538,5,64,0,0,538,541,5,135,0,0,539,
  	542,3,154,77,0,540,542,3,156,78,0,541,539,1,0,0,0,541,540,1,0,0,0,542,
  	547,1,0,0,0,543,544,5,135,0,0,544,545,5,65,0,0,545,546,5,135,0,0,546,
  	548,3,46,23,0,547,543,1,0,0,0,547,548,1,0,0,0,548,45,1,0,0,0,549,565,
  	5,5,0,0,550,561,3,48,24,0,551,553,5,135,0,0,552,551,1,0,0,0,552,553,1,
  	0,0,0,553,554,1,0,0,0,554,556,5,2,0,0,555,557,5,135,0,0,556,555,1,0,0,
  	0,556,557,1,0,0,0,557,558,1,0,0,0,558,560,3,48,24,0,559,552,1,0,0,0,560,
  	563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,565,1,0,0,0,563,561,1,
  	0,0,0,564,549,1,0,0,0,564,550,1,0,0,0,565,570,1,0,0,0,566,568,5,135,0,
  	0,567,566,1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,0,569,571,3,70,35,0,570,
  	567,1,0,0,0,570,571,1,0,0,0,571,47,1,0,0,0,572,573,3,158,79,0,573,574,
  	5,135,0,0,574,575,5,56,0,0,575,576,5,135,0,0,576,578,1,0,0,0,577,572,
  	1,0,0,0,577,578,1,0,0,0,578,579,1,0,0,0,579,580,3,174,87,0,580,49,1,0,
  	0,0,581,586,5,66,0,0,582,584,5,135,0,0,583,582,1,0,0,0,583,584,1,0,0,
  	0,584,585,1,0,0,0,585,587,5,67,0,0,586,583,1,0,0,0,586,587,1,0,0,0,587,
  	588,1,0,0,0,588,589,5,135,0,0,589,594,3,54,27,0,590,592,5,135,0,0,591,
  	590,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,595,3,70,35,0,594,591,
  	1,0,0,0,594,595,1,0,0,0,595,51,1,0,0,0,596,601,5,68,0,0,597,599,5,135,
  	0,0,598,597,1,0,0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,602,5,67,0,0,
  	601,598,1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,0,603,604,5,135,0,0,604,
  	605,3,54,27,0,605,53,1,0,0,0,606,609,3,56,28,0,607,608,5,135,0,0,608,
  	610,3,60,30,0,609,607,1,0,0,0,609,610,1,0,0,0,610,613,1,0,0,0,611,612,
  	5,135,0,0,612,614,3,62,31,0,613,611,1,0,0,0,613,614,1,0,0,0,614,617,1,
  	0,0,0,615,616,5,135,0,0,616,618,3,64,32,0,617,615,1,0,0,0,617,618,1,0,
  	0,0,618,55,1,0,0,0,619,630,5,5,0,0,620,622,5,135,0,0,621,620,1,0,0,0,
  	621,622,1,0,0,0,622,623,1,0,0,0,623,625,5,2,0,0,624,626,5,135,0,0,625,
  	624,1,0,0,0,625,626,1,0,0,0,626,627,1,0,0,0,627,629,3,58,29,0,628,621,
  	1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,630,631,1,0,0,0,631,648,1,0,0,
  	0,632,630,1,0,0,0,633,644,3,58,29,0,634,636,5,135,0,0,635,634,1,0,0,0,
  	635,636,1,0,0,0,636,637,1,0,0,0,637,639,5,2,0,0,638,640,5,135,0,0,639,
  	638,1,0,0,0,639,640,1,0,0,0,640,641,1,0,0,0,641,643,3,58,29,0,642,635,
  	1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,648,1,0,0,
  	0,646,644,1,0,0,0,647,619,1,0,0,0,647,633,1,0,0,0,648,57,1,0,0,0,649,
  	650,3,102,51,0,650,651,5,135,0,0,651,652,5,56,0,0,652,653,5,135,0,0,653,
  	654,3,174,87,0,654,657,1,0,0,0,655,657,3,102,51,0,656,649,1,0,0,0,656,
  	655,1,0,0,0,657,59,1,0,0,0,658,659,5,69,0,0,659,660,5,135,0,0,660,661,
  	5,70,0,0,661,662,5,135,0,0,662,670,3,66,33,0,663,665,5,2,0,0,664,666,
  	5,135,0,0,665,664,1,0,0,0,665,666,1,0,0,0,666,667,1,0,0,0,667,669,3,66,
  	33,0,668,663,1,0,0,0,669,672,1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,0,
  	671,61,1,0,0,0,672,670,1,0,0,0,673,674,5,71,0,0,674,675,5,135,0,0,675,
  	676,3,102,51,0,676,63,1,0,0,0,677,678,5,72,0,0,678,679,5,135,0,0,679,
  	680,3,102,51,0,680,65,1,0,0,0,681,686,3,102,51,0,682,684,5,135,0,0,683,
  	682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,687,7,0,0,0,686,683,1,
  	0,0,0,686,687,1,0,0,0,687,67,1,0,0,0,688,689,5,77,0,0,689,690,5,135,0,
  	0,690,691,5,78,0,0,691,692,5,135,0,0,692,693,5,58,0,0,693,694,5,135,0,
  	0,694,703,3,174,87,0,695,696,5,77,0,0,696,697,5,135,0,0,697,698,5,79,
  	0,0,698,699,5,135,0,0,699,700,5,58,0,0,700,701,5,135,0,0,701,703,3,174,
  	87,0,702,688,1,0,0,0,702,695,1,0,0,0,703,69,1,0,0,0,704,705,5,80,0,0,
  	705,706,5,135,0,0,706,707,3,102,51,0,707,71,1,0,0,0,708,719,3,74,37,0,
  	709,711,5,135,0,0,710,709,1,0,0,0,710,711,1,0,0,0,711,712,1,0,0,0,712,
  	714,5,2,0,0,713,715,5,135,0,0,714,713,1,0,0,0,714,715,1,0,0,0,715,716,
  	1,0,0,0,716,718,3,74,37,0,717,710,1,0,0,0,718,721,1,0,0,0,719,717,1,0,
  	0,0,719,720,1,0,0,0,720,73,1,0,0,0,721,719,1,0,0,0,722,724,3,174,87,0,
  	723,725,5,135,0,0,724,723,1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,
  	728,5,3,0,0,727,729,5,135,0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,730,
  	1,0,0,0,730,731,3,76,38,0,731,734,1,0,0,0,732,734,3,76,38,0,733,722,1,
  	0,0,0,733,732,1,0,0,0,734,75,1,0,0,0,735,736,3,78,39,0,736,77,1,0,0,0,
  	737,744,3,80,40,0,738,740,5,135,0,0,739,738,1,0,0,0,739,740,1,0,0,0,740,
  	741,1,0,0,0,741,743,3,82,41,0,742,739,1,0,0,0,743,746,1,0,0,0,744,742,
  	1,0,0,0,744,745,1,0,0,0,745,752,1,0,0,0,746,744,1,0,0,0,747,748,5,6,0,
  	0,748,749,3,78,39,0,749,750,5,7,0,0,750,752,1,0,0,0,751,737,1,0,0,0,751,
  	747,1,0,0,0,752,79,1,0,0,0,753,755,5,6,0,0,754,756,5,135,0,0,755,754,
  	1,0,0,0,755,756,1,0,0,0,756,761,1,0,0,0,757,759,3,174,87,0,758,760,5,
  	135,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,762,1,0,0,0,761,757,1,0,0,
  	0,761,762,1,0,0,0,762,767,1,0,0,0,763,765,3,92,46,0,764,766,5,135,0,0,
  	765,764,1,0,0,0,765,766,1,0,0,0,766,768,1,0,0,0,767,763,1,0,0,0,767,768,
  	1,0,0,0,768,773,1,0,0,0,769,771,3,88,44,0,770,772,5,135,0,0,771,770,1,
  	0,0,0,771,772,1,0,0,0,772,774,1,0,0,0,773,769,1,0,0,0,773,774,1,0,0,0,
  	774,775,1,0,0,0,775,776,5,7,0,0,776,81,1,0,0,0,777,779,3,84,42,0,778,
  	780,5,135,0,0,779,778,1,0,0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,782,
  	3,80,40,0,782,83,1,0,0,0,783,785,3,196,98,0,784,786,5,135,0,0,785,784,
  	1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,789,3,200,100,0,788,790,5,
  	135,0,0,789,788,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,793,3,86,
  	43,0,792,791,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,0,794,796,5,135,0,
  	0,795,794,1,0,0,0,795,796,1,0,0,0,796,797,1,0,0,0,797,799,3,200,100,0,
  	798,800,5,135,0,0,799,798,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,
  	802,3,198,99,0,802,848,1,0,0,0,803,805,3,196,98,0,804,806,5,135,0,0,805,
  	804,1,0,0,0,805,806,1,0,0,0,806,807,1,0,0,0,807,809,3,200,100,0,808,810,
  	5,135,0,0,809,808,1,0,0,0,809,810,1,0,0,0,810,812,1,0,0,0,811,813,3,86,
  	43,0,812,811,1,0,0,0,812,813,1,0,0,0,813,815,1,0,0,0,814,816,5,135,0,
  	0,815,814,1,0,0,0,815,816,1,0,0,0,816,817,1,0,0,0,817,818,3,200,100,0,
  	818,848,1,0,0,0,819,821,3,200,100,0,820,822,5,135,0,0,821,820,1,0,0,0,
  	821,822,1,0,0,0,822,824,1,0,0,0,823,825,3,86,43,0,824,823,1,0,0,0,824,
  	825,1,0,0,0,825,827,1,0,0,0,826,828,5,135,0,0,827,826,1,0,0,0,827,828,
  	1,0,0,0,828,829,1,0,0,0,829,831,3,200,100,0,830,832,5,135,0,0,831,830,
  	1,0,0,0,831,832,1,0,0,0,832,833,1,0,0,0,833,834,3,198,99,0,834,848,1,
  	0,0,0,835,837,3,200,100,0,836,838,5,135,0,0,837,836,1,0,0,0,837,838,1,
  	0,0,0,838,840,1,0,0,0,839,841,3,86,43,0,840,839,1,0,0,0,840,841,1,0,0,
  	0,841,843,1,0,0,0,842,844,5,135,0,0,843,842,1,0,0,0,843,844,1,0,0,0,844,
  	845,1,0,0,0,845,846,3,200,100,0,846,848,1,0,0,0,847,783,1,0,0,0,847,803,
  	1,0,0,0,847,819,1,0,0,0,847,835,1,0,0,0,848,85,1,0,0,0,849,851,5,8,0,
  	0,850,852,5,135,0,0,851,850,1,0,0,0,851,852,1,0,0,0,852,857,1,0,0,0,853,
  	855,3,174,87,0,854,856,5,135,0,0,855,854,1,0,0,0,855,856,1,0,0,0,856,
  	858,1,0,0,0,857,853,1,0,0,0,857,858,1,0,0,0,858,863,1,0,0,0,859,861,3,
  	90,45,0,860,862,5,135,0,0,861,860,1,0,0,0,861,862,1,0,0,0,862,864,1,0,
  	0,0,863,859,1,0,0,0,863,864,1,0,0,0,864,866,1,0,0,0,865,867,3,96,48,0,
  	866,865,1,0,0,0,866,867,1,0,0,0,867,872,1,0,0,0,868,870,3,88,44,0,869,
  	871,5,135,0,0,870,869,1,0,0,0,870,871,1,0,0,0,871,873,1,0,0,0,872,868,
  	1,0,0,0,872,873,1,0,0,0,873,881,1,0,0,0,874,876,5,135,0,0,875,874,1,0,
  	0,0,875,876,1,0,0,0,876,877,1,0,0,0,877,879,5,81,0,0,878,880,5,135,0,
  	0,879,878,1,0,0,0,879,880,1,0,0,0,880,882,1,0,0,0,881,875,1,0,0,0,881,
  	882,1,0,0,0,882,883,1,0,0,0,883,884,5,9,0,0,884,87,1,0,0,0,885,888,3,
  	178,89,0,886,888,3,180,90,0,887,885,1,0,0,0,887,886,1,0,0,0,888,89,1,
  	0,0,0,889,891,5,10,0,0,890,892,5,135,0,0,891,890,1,0,0,0,891,892,1,0,
  	0,0,892,893,1,0,0,0,893,907,3,100,50,0,894,896,5,135,0,0,895,894,1,0,
  	0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,899,5,11,0,0,898,900,5,10,0,0,
  	899,898,1,0,0,0,899,900,1,0,0,0,900,902,1,0,0,0,901,903,5,135,0,0,902,
  	901,1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,0,904,906,3,100,50,0,905,895,
  	1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,0,907,908,1,0,0,0,908,91,1,0,0,
  	0,909,907,1,0,0,0,910,917,3,94,47,0,911,913,5,135,0,0,912,911,1,0,0,0,
  	912,913,1,0,0,0,913,914,1,0,0,0,914,916,3,94,47,0,915,912,1,0,0,0,916,
  	919,1,0,0,0,917,915,1,0,0,0,917,918,1,0,0,0,918,93,1,0,0,0,919,917,1,
  	0,0,0,920,922,5,10,0,0,921,923,5,135,0,0,922,921,1,0,0,0,922,923,1,0,
  	0,0,923,924,1,0,0,0,924,925,3,98,49,0,925,95,1,0,0,0,926,928,5,5,0,0,
  	927,929,5,135,0,0,928,927,1,0,0,0,928,929,1,0,0,0,929,934,1,0,0,0,930,
  	932,3,186,93,0,931,933,5,135,0,0,932,931,1,0,0,0,932,933,1,0,0,0,933,
  	935,1,0,0,0,934,930,1,0,0,0,934,935,1,0,0,0,935,946,1,0,0,0,936,938,5,
  	12,0,0,937,939,5,135,0,0,938,937,1,0,0,0,938,939,1,0,0,0,939,944,1,0,
  	0,0,940,942,3,186,93,0,941,943,5,135,0,0,942,941,1,0,0,0,942,943,1,0,
  	0,0,943,945,1,0,0,0,944,940,1,0,0,0,944,945,1,0,0,0,945,947,1,0,0,0,946,
  	936,1,0,0,0,946,947,1,0,0,0,947,97,1,0,0,0,948,949,3,190,95,0,949,99,
  	1,0,0,0,950,951,3,190,95,0,951,101,1,0,0,0,952,953,3,104,52,0,953,103,
  	1,0,0,0,954,961,3,106,53,0,955,956,5,135,0,0,956,957,5,82,0,0,957,958,
  	5,135,0,0,958,960,3,106,53,0,959,955,1,0,0,0,960,963,1,0,0,0,961,959,
  	1,0,0,0,961,962,1,0,0,0,962,105,1,0,0,0,963,961,1,0,0,0,964,971,3,108,
  	54,0,965,966,5,135,0,0,966,967,5,83,0,0,967,968,5,135,0,0,968,970,3,108,
  	54,0,969,965,1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,
  	972,107,1,0,0,0,973,971,1,0,0,0,974,981,3,110,55,0,975,976,5,135,0,0,
  	976,977,5,84,0,0,977,978,5,135,0,0,978,980,3,110,55,0,979,975,1,0,0,0,
  	980,983,1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,109,1,0,0,0,983,981,
  	1,0,0,0,984,986,5,85,0,0,985,987,5,135,0,0,986,985,1,0,0,0,986,987,1,
  	0,0,0,987,989,1,0,0,0,988,984,1,0,0,0,989,992,1,0,0,0,990,988,1,0,0,0,
  	990,991,1,0,0,0,991,993,1,0,0,0,992,990,1,0,0,0,993,994,3,112,56,0,994,
  	111,1,0,0,0,995,1002,3,114,57,0,996,998,5,135,0,0,997,996,1,0,0,0,997,
  	998,1,0,0,0,998,999,1,0,0,0,999,1001,3,140,70,0,1000,997,1,0,0,0,1001,
  	1004,1,0,0,0,1002,1000,1,0,0,0,1002,1003,1,0,0,0,1003,113,1,0,0,0,1004,
  	1002,1,0,0,0,1005,1024,3,116,58,0,1006,1008,5,135,0,0,1007,1006,1,0,0,
  	0,1007,1008,1,0,0,0,1008,1009,1,0,0,0,1009,1011,5,13,0,0,1010,1012,5,
  	135,0,0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,1013,1,0,0,0,1013,1023,
  	3,116,58,0,1014,1016,5,135,0,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,
  	1017,1,0,0,0,1017,1019,5,14,0,0,1018,1020,5,135,0,0,1019,1018,1,0,0,0,
  	1019,1020,1,0,0,0,1020,1021,1,0,0,0,1021,1023,3,116,58,0,1022,1007,1,
  	0,0,0,1022,1015,1,0,0,0,1023,1026,1,0,0,0,1024,1022,1,0,0,0,1024,1025,
  	1,0,0,0,1025,115,1,0,0,0,1026,1024,1,0,0,0,1027,1054,3,118,59,0,1028,
  	1030,5,135,0,0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,
  	1031,1033,5,5,0,0,1032,1034,5,135,0,0,1033,1032,1,0,0,0,1033,1034,1,0,
  	0,0,1034,1035,1,0,0,0,1035,1053,3,118,59,0,1036,1038,5,135,0,0,1037,1036,
  	1,0,0,0,1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,1041,5,15,0,0,1040,1042,
  	5,135,0,0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,1043,1,0,0,0,1043,
  	1053,3,118,59,0,1044,1046,5,135,0,0,1045,1044,1,0,0,0,1045,1046,1,0,0,
  	0,1046,1047,1,0,0,0,1047,1049,5,16,0,0,1048,1050,5,135,0,0,1049,1048,
  	1,0,0,0,1049,1050,1,0,0,0,1050,1051,1,0,0,0,1051,1053,3,118,59,0,1052,
  	1029,1,0,0,0,1052,1037,1,0,0,0,1052,1045,1,0,0,0,1053,1056,1,0,0,0,1054,
  	1052,1,0,0,0,1054,1055,1,0,0,0,1055,117,1,0,0,0,1056,1054,1,0,0,0,1057,
  	1068,3,120,60,0,1058,1060,5,135,0,0,1059,1058,1,0,0,0,1059,1060,1,0,0,
  	0,1060,1061,1,0,0,0,1061,1063,5,17,0,0,1062,1064,5,135,0,0,1063,1062,
  	1,0,0,0,1063,1064,1,0,0,0,1064,1065,1,0,0,0,1065,1067,3,120,60,0,1066,
  	1059,1,0,0,0,1067,1070,1,0,0,0,1068,1066,1,0,0,0,1068,1069,1,0,0,0,1069,
  	119,1,0,0,0,1070,1068,1,0,0,0,1071,1073,7,1,0,0,1072,1074,5,135,0,0,1073,
  	1072,1,0,0,0,1073,1074,1,0,0,0,1074,1076,1,0,0,0,1075,1071,1,0,0,0,1076,
  	1079,1,0,0,0,1077,1075,1,0,0,0,1077,1078,1,0,0,0,1078,1080,1,0,0,0,1079,
  	1077,1,0,0,0,1080,1081,3,122,61,0,1081,121,1,0,0,0,1082,1088,3,130,65,
  	0,1083,1087,3,126,63,0,1084,1087,3,124,62,0,1085,1087,3,128,64,0,1086,
  	1083,1,0,0,0,1086,1084,1,0,0,0,1086,1085,1,0,0,0,1087,1090,1,0,0,0,1088,
  	1086,1,0,0,0,1088,1089,1,0,0,0,1089,123,1,0,0,0,1090,1088,1,0,0,0,1091,
  	1092,5,135,0,0,1092,1094,5,86,0,0,1093,1095,5,135,0,0,1094,1093,1,0,0,
  	0,1094,1095,1,0,0,0,1095,1096,1,0,0,0,1096,1117,3,130,65,0,1097,1099,
  	5,135,0,0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,1100,1,0,0,0,1100,
  	1101,5,8,0,0,1101,1102,3,102,51,0,1102,1103,5,9,0,0,1103,1117,1,0,0,0,
  	1104,1106,5,135,0,0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,1106,1107,1,0,
  	0,0,1107,1109,5,8,0,0,1108,1110,3,102,51,0,1109,1108,1,0,0,0,1109,1110,
  	1,0,0,0,1110,1111,1,0,0,0,1111,1113,5,12,0,0,1112,1114,3,102,51,0,1113,
  	1112,1,0,0,0,1113,1114,1,0,0,0,1114,1115,1,0,0,0,1115,1117,5,9,0,0,1116,
  	1091,1,0,0,0,1116,1098,1,0,0,0,1116,1105,1,0,0,0,1117,125,1,0,0,0,1118,
  	1119,5,135,0,0,1119,1120,5,87,0,0,1120,1121,5,135,0,0,1121,1131,5,66,
  	0,0,1122,1123,5,135,0,0,1123,1124,5,88,0,0,1124,1125,5,135,0,0,1125,1131,
  	5,66,0,0,1126,1127,5,135,0,0,1127,1131,5,89,0,0,1128,1129,5,135,0,0,1129,
  	1131,5,90,0,0,1130,1118,1,0,0,0,1130,1122,1,0,0,0,1130,1126,1,0,0,0,1130,
  	1128,1,0,0,0,1131,1133,1,0,0,0,1132,1134,5,135,0,0,1133,1132,1,0,0,0,
  	1133,1134,1,0,0,0,1134,1135,1,0,0,0,1135,1136,3,130,65,0,1136,127,1,0,
  	0,0,1137,1138,5,135,0,0,1138,1139,5,91,0,0,1139,1140,5,135,0,0,1140,1148,
  	5,92,0,0,1141,1142,5,135,0,0,1142,1143,5,91,0,0,1143,1144,5,135,0,0,1144,
  	1145,5,85,0,0,1145,1146,5,135,0,0,1146,1148,5,92,0,0,1147,1137,1,0,0,
  	0,1147,1141,1,0,0,0,1148,129,1,0,0,0,1149,1156,3,132,66,0,1150,1152,5,
  	135,0,0,1151,1150,1,0,0,0,1151,1152,1,0,0,0,1152,1153,1,0,0,0,1153,1155,
  	3,168,84,0,1154,1151,1,0,0,0,1155,1158,1,0,0,0,1156,1154,1,0,0,0,1156,
  	1157,1,0,0,0,1157,1163,1,0,0,0,1158,1156,1,0,0,0,1159,1161,5,135,0,0,
  	1160,1159,1,0,0,0,1160,1161,1,0,0,0,1161,1162,1,0,0,0,1162,1164,3,92,
  	46,0,1163,1160,1,0,0,0,1163,1164,1,0,0,0,1164,131,1,0,0,0,1165,1244,3,
  	134,67,0,1166,1244,3,180,90,0,1167,1244,3,170,85,0,1168,1170,5,93,0,0,
  	1169,1171,5,135,0,0,1170,1169,1,0,0,0,1170,1171,1,0,0,0,1171,1172,1,0,
  	0,0,1172,1174,5,6,0,0,1173,1175,5,135,0,0,1174,1173,1,0,0,0,1174,1175,
  	1,0,0,0,1175,1176,1,0,0,0,1176,1178,5,5,0,0,1177,1179,5,135,0,0,1178,
  	1177,1,0,0,0,1178,1179,1,0,0,0,1179,1180,1,0,0,0,1180,1244,5,7,0,0,1181,
  	1244,3,164,82,0,1182,1244,3,166,83,0,1183,1185,5,52,0,0,1184,1186,5,135,
  	0,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,1189,5,
  	6,0,0,1188,1190,5,135,0,0,1189,1188,1,0,0,0,1189,1190,1,0,0,0,1190,1191,
  	1,0,0,0,1191,1193,3,146,73,0,1192,1194,5,135,0,0,1193,1192,1,0,0,0,1193,
  	1194,1,0,0,0,1194,1195,1,0,0,0,1195,1196,5,7,0,0,1196,1244,1,0,0,0,1197,
  	1199,5,94,0,0,1198,1200,5,135,0,0,1199,1198,1,0,0,0,1199,1200,1,0,0,0,
  	1200,1201,1,0,0,0,1201,1203,5,6,0,0,1202,1204,5,135,0,0,1203,1202,1,0,
  	0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1207,3,146,73,0,1206,1208,
  	5,135,0,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1209,1,0,0,0,1209,
  	1210,5,7,0,0,1210,1244,1,0,0,0,1211,1213,5,95,0,0,1212,1214,5,135,0,0,
  	1213,1212,1,0,0,0,1213,1214,1,0,0,0,1214,1215,1,0,0,0,1215,1217,5,6,0,
  	0,1216,1218,5,135,0,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,1219,1,
  	0,0,0,1219,1221,3,146,73,0,1220,1222,5,135,0,0,1221,1220,1,0,0,0,1221,
  	1222,1,0,0,0,1222,1223,1,0,0,0,1223,1224,5,7,0,0,1224,1244,1,0,0,0,1225,
  	1227,5,96,0,0,1226,1228,5,135,0,0,1227,1226,1,0,0,0,1227,1228,1,0,0,0,
  	1228,1229,1,0,0,0,1229,1231,5,6,0,0,1230,1232,5,135,0,0,1231,1230,1,0,
  	0,0,1231,1232,1,0,0,0,1232,1233,1,0,0,0,1233,1235,3,146,73,0,1234,1236,
  	5,135,0,0,1235,1234,1,0,0,0,1235,1236,1,0,0,0,1236,1237,1,0,0,0,1237,
  	1238,5,7,0,0,1238,1244,1,0,0,0,1239,1244,3,144,72,0,1240,1244,3,142,71,
  	0,1241,1244,3,150,75,0,1242,1244,3,174,87,0,1243,1165,1,0,0,0,1243,1166,
  	1,0,0,0,1243,1167,1,0,0,0,1243,1168,1,0,0,0,1243,1181,1,0,0,0,1243,1182,
  	1,0,0,0,1243,1183,1,0,0,0,1243,1197,1,0,0,0,1243,1211,1,0,0,0,1243,1225,
  	1,0,0,0,1243,1239,1,0,0,0,1243,1240,1,0,0,0,1243,1241,1,0,0,0,1243,1242,
  	1,0,0,0,1244,133,1,0,0,0,1245,1252,3,176,88,0,1246,1252,5,105,0,0,1247,
  	1252,3,136,68,0,1248,1252,5,92,0,0,1249,1252,3,178,89,0,1250,1252,3,138,
  	69,0,1251,1245,1,0,0,0,1251,1246,1,0,0,0,1251,1247,1,0,0,0,1251,1248,
  	1,0,0,0,1251,1249,1,0,0,0,1251,1250,1,0,0,0,1252,135,1,0,0,0,1253,1254,
  	7,2,0,0,1254,137,1,0,0,0,1255,1257,5,8,0,0,1256,1258,5,135,0,0,1257,1256,
  	1,0,0,0,1257,1258,1,0,0,0,1258,1276,1,0,0,0,1259,1261,3,102,51,0,1260,
  	1262,5,135,0,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1273,1,0,0,0,
  	1263,1265,5,2,0,0,1264,1266,5,135,0,0,1265,1264,1,0,0,0,1265,1266,1,0,
  	0,0,1266,1267,1,0,0,0,1267,1269,3,102,51,0,1268,1270,5,135,0,0,1269,1268,
  	1,0,0,0,1269,1270,1,0,0,0,1270,1272,1,0,0,0,1271,1263,1,0,0,0,1272,1275,
  	1,0,0,0,1273,1271,1,0,0,0,1273,1274,1,0,0,0,1274,1277,1,0,0,0,1275,1273,
  	1,0,0,0,1276,1259,1,0,0,0,1276,1277,1,0,0,0,1277,1278,1,0,0,0,1278,1279,
  	5,9,0,0,1279,139,1,0,0,0,1280,1282,5,3,0,0,1281,1283,5,135,0,0,1282,1281,
  	1,0,0,0,1282,1283,1,0,0,0,1283,1284,1,0,0,0,1284,1311,3,114,57,0,1285,
  	1287,5,18,0,0,1286,1288,5,135,0,0,1287,1286,1,0,0,0,1287,1288,1,0,0,0,
  	1288,1289,1,0,0,0,1289,1311,3,114,57,0,1290,1292,5,19,0,0,1291,1293,5,
  	135,0,0,1292,1291,1,0,0,0,1292,1293,1,0,0,0,1293,1294,1,0,0,0,1294,1311,
  	3,114,57,0,1295,1297,5,20,0,0,1296,1298,5,135,0,0,1297,1296,1,0,0,0,1297,
  	1298,1,0,0,0,1298,1299,1,0,0,0,1299,1311,3,114,57,0,1300,1302,5,21,0,
  	0,1301,1303,5,135,0,0,1302,1301,1,0,0,0,1302,1303,1,0,0,0,1303,1304,1,
  	0,0,0,1304,1311,3,114,57,0,1305,1307,5,22,0,0,1306,1308,5,135,0,0,1307,
  	1306,1,0,0,0,1307,1308,1,0,0,0,1308,1309,1,0,0,0,1309,1311,3,114,57,0,
  	1310,1280,1,0,0,0,1310,1285,1,0,0,0,1310,1290,1,0,0,0,1310,1295,1,0,0,
  	0,1310,1300,1,0,0,0,1310,1305,1,0,0,0,1311,141,1,0,0,0,1312,1314,5,6,
  	0,0,1313,1315,5,135,0,0,1314,1313,1,0,0,0,1314,1315,1,0,0,0,1315,1316,
  	1,0,0,0,1316,1318,3,102,51,0,1317,1319,5,135,0,0,1318,1317,1,0,0,0,1318,
  	1319,1,0,0,0,1319,1320,1,0,0,0,1320,1321,5,7,0,0,1321,143,1,0,0,0,1322,
  	1327,3,80,40,0,1323,1325,5,135,0,0,1324,1323,1,0,0,0,1324,1325,1,0,0,
  	0,1325,1326,1,0,0,0,1326,1328,3,82,41,0,1327,1324,1,0,0,0,1328,1329,1,
  	0,0,0,1329,1327,1,0,0,0,1329,1330,1,0,0,0,1330,145,1,0,0,0,1331,1336,
  	3,148,74,0,1332,1334,5,135,0,0,1333,1332,1,0,0,0,1333,1334,1,0,0,0,1334,
  	1335,1,0,0,0,1335,1337,3,70,35,0,1336,1333,1,0,0,0,1336,1337,1,0,0,0,
  	1337,147,1,0,0,0,1338,1339,3,174,87,0,1339,1340,5,135,0,0,1340,1341,5,
  	86,0,0,1341,1342,5,135,0,0,1342,1343,3,102,51,0,1343,149,1,0,0,0,1344,
  	1346,3,152,76,0,1345,1347,5,135,0,0,1346,1345,1,0,0,0,1346,1347,1,0,0,
  	0,1347,1348,1,0,0,0,1348,1350,5,6,0,0,1349,1351,5,135,0,0,1350,1349,1,
  	0,0,0,1350,1351,1,0,0,0,1351,1356,1,0,0,0,1352,1354,5,67,0,0,1353,1355,
  	5,135,0,0,1354,1353,1,0,0,0,1354,1355,1,0,0,0,1355,1357,1,0,0,0,1356,
  	1352,1,0,0,0,1356,1357,1,0,0,0,1357,1375,1,0,0,0,1358,1360,3,102,51,0,
  	1359,1361,5,135,0,0,1360,1359,1,0,0,0,1360,1361,1,0,0,0,1361,1372,1,0,
  	0,0,1362,1364,5,2,0,0,1363,1365,5,135,0,0,1364,1363,1,0,0,0,1364,1365,
  	1,0,0,0,1365,1366,1,0,0,0,1366,1368,3,102,51,0,1367,1369,5,135,0,0,1368,
  	1367,1,0,0,0,1368,1369,1,0,0,0,1369,1371,1,0,0,0,1370,1362,1,0,0,0,1371,
  	1374,1,0,0,0,1372,1370,1,0,0,0,1372,1373,1,0,0,0,1373,1376,1,0,0,0,1374,
  	1372,1,0,0,0,1375,1358,1,0,0,0,1375,1376,1,0,0,0,1376,1377,1,0,0,0,1377,
  	1378,5,7,0,0,1378,151,1,0,0,0,1379,1380,3,162,81,0,1380,1381,3,192,96,
  	0,1381,1384,1,0,0,0,1382,1384,5,99,0,0,1383,1379,1,0,0,0,1383,1382,1,
  	0,0,0,1384,153,1,0,0,0,1385,1387,3,160,80,0,1386,1388,5,135,0,0,1387,
  	1386,1,0,0,0,1387,1388,1,0,0,0,1388,1389,1,0,0,0,1389,1391,5,6,0,0,1390,
  	1392,5,135,0,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,1410,1,0,0,0,
  	1393,1395,3,102,51,0,1394,1396,5,135,0,0,1395,1394,1,0,0,0,1395,1396,
  	1,0,0,0,1396,1407,1,0,0,0,1397,1399,5,2,0,0,1398,1400,5,135,0,0,1399,
  	1398,1,0,0,0,1399,1400,1,0,0,0,1400,1401,1,0,0,0,1401,1403,3,102,51,0,
  	1402,1404,5,135,0,0,1403,1402,1,0,0,0,1403,1404,1,0,0,0,1404,1406,1,0,
  	0,0,1405,1397,1,0,0,0,1406,1409,1,0,0,0,1407,1405,1,0,0,0,1407,1408,1,
  	0,0,0,1408,1411,1,0,0,0,1409,1407,1,0,0,0,1410,1393,1,0,0,0,1410,1411,
  	1,0,0,0,1411,1412,1,0,0,0,1412,1413,5,7,0,0,1413,155,1,0,0,0,1414,1415,
  	3,160,80,0,1415,157,1,0,0,0,1416,1417,3,192,96,0,1417,159,1,0,0,0,1418,
  	1419,3,162,81,0,1419,1420,3,192,96,0,1420,161,1,0,0,0,1421,1422,3,192,
  	96,0,1422,1423,5,23,0,0,1423,1425,1,0,0,0,1424,1421,1,0,0,0,1425,1428,
  	1,0,0,0,1426,1424,1,0,0,0,1426,1427,1,0,0,0,1427,163,1,0,0,0,1428,1426,
  	1,0,0,0,1429,1431,5,8,0,0,1430,1432,5,135,0,0,1431,1430,1,0,0,0,1431,
  	1432,1,0,0,0,1432,1433,1,0,0,0,1433,1442,3,146,73,0,1434,1436,5,135,0,
  	0,1435,1434,1,0,0,0,1435,1436,1,0,0,0,1436,1437,1,0,0,0,1437,1439,5,11,
  	0,0,1438,1440,5,135,0,0,1439,1438,1,0,0,0,1439,1440,1,0,0,0,1440,1441,
  	1,0,0,0,1441,1443,3,102,51,0,1442,1435,1,0,0,0,1442,1443,1,0,0,0,1443,
  	1445,1,0,0,0,1444,1446,5,135,0,0,1445,1444,1,0,0,0,1445,1446,1,0,0,0,
  	1446,1447,1,0,0,0,1447,1448,5,9,0,0,1448,165,1,0,0,0,1449,1451,5,8,0,
  	0,1450,1452,5,135,0,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,1461,1,
  	0,0,0,1453,1455,3,174,87,0,1454,1456,5,135,0,0,1455,1454,1,0,0,0,1455,
  	1456,1,0,0,0,1456,1457,1,0,0,0,1457,1459,5,3,0,0,1458,1460,5,135,0,0,
  	1459,1458,1,0,0,0,1459,1460,1,0,0,0,1460,1462,1,0,0,0,1461,1453,1,0,0,
  	0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,1465,3,144,72,0,1464,1466,
  	5,135,0,0,1465,1464,1,0,0,0,1465,1466,1,0,0,0,1466,1475,1,0,0,0,1467,
  	1469,5,80,0,0,1468,1470,5,135,0,0,1469,1468,1,0,0,0,1469,1470,1,0,0,0,
  	1470,1471,1,0,0,0,1471,1473,3,102,51,0,1472,1474,5,135,0,0,1473,1472,
  	1,0,0,0,1473,1474,1,0,0,0,1474,1476,1,0,0,0,1475,1467,1,0,0,0,1475,1476,
  	1,0,0,0,1476,1477,1,0,0,0,1477,1479,5,11,0,0,1478,1480,5,135,0,0,1479,
  	1478,1,0,0,0,1479,1480,1,0,0,0,1480,1481,1,0,0,0,1481,1483,3,102,51,0,
  	1482,1484,5,135,0,0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,1485,1,0,
  	0,0,1485,1486,5,9,0,0,1486,167,1,0,0,0,1487,1489,5,23,0,0,1488,1490,5,
  	135,0,0,1489,1488,1,0,0,0,1489,1490,1,0,0,0,1490,1491,1,0,0,0,1491,1492,
  	3,184,92,0,1492,169,1,0,0,0,1493,1498,5,100,0,0,1494,1496,5,135,0,0,1495,
  	1494,1,0,0,0,1495,1496,1,0,0,0,1496,1497,1,0,0,0,1497,1499,3,172,86,0,
  	1498,1495,1,0,0,0,1499,1500,1,0,0,0,1500,1498,1,0,0,0,1500,1501,1,0,0,
  	0,1501,1516,1,0,0,0,1502,1504,5,100,0,0,1503,1505,5,135,0,0,1504,1503,
  	1,0,0,0,1504,1505,1,0,0,0,1505,1506,1,0,0,0,1506,1511,3,102,51,0,1507,
  	1509,5,135,0,0,1508,1507,1,0,0,0,1508,1509,1,0,0,0,1509,1510,1,0,0,0,
  	1510,1512,3,172,86,0,1511,1508,1,0,0,0,1512,1513,1,0,0,0,1513,1511,1,
  	0,0,0,1513,1514,1,0,0,0,1514,1516,1,0,0,0,1515,1493,1,0,0,0,1515,1502,
  	1,0,0,0,1516,1525,1,0,0,0,1517,1519,5,135,0,0,1518,1517,1,0,0,0,1518,
  	1519,1,0,0,0,1519,1520,1,0,0,0,1520,1522,5,101,0,0,1521,1523,5,135,0,
  	0,1522,1521,1,0,0,0,1522,1523,1,0,0,0,1523,1524,1,0,0,0,1524,1526,3,102,
  	51,0,1525,1518,1,0,0,0,1525,1526,1,0,0,0,1526,1528,1,0,0,0,1527,1529,
  	5,135,0,0,1528,1527,1,0,0,0,1528,1529,1,0,0,0,1529,1530,1,0,0,0,1530,
  	1531,5,102,0,0,1531,171,1,0,0,0,1532,1534,5,103,0,0,1533,1535,5,135,0,
  	0,1534,1533,1,0,0,0,1534,1535,1,0,0,0,1535,1536,1,0,0,0,1536,1538,3,102,
  	51,0,1537,1539,5,135,0,0,1538,1537,1,0,0,0,1538,1539,1,0,0,0,1539,1540,
  	1,0,0,0,1540,1542,5,104,0,0,1541,1543,5,135,0,0,1542,1541,1,0,0,0,1542,
  	1543,1,0,0,0,1543,1544,1,0,0,0,1544,1545,3,102,51,0,1545,173,1,0,0,0,
  	1546,1547,3,192,96,0,1547,175,1,0,0,0,1548,1551,3,188,94,0,1549,1551,
  	3,186,93,0,1550,1548,1,0,0,0,1550,1549,1,0,0,0,1551,177,1,0,0,0,1552,
  	1554,5,24,0,0,1553,1555,5,135,0,0,1554,1553,1,0,0,0,1554,1555,1,0,0,0,
  	1555,1589,1,0,0,0,1556,1558,3,184,92,0,1557,1559,5,135,0,0,1558,1557,
  	1,0,0,0,1558,1559,1,0,0,0,1559,1560,1,0,0,0,1560,1562,5,10,0,0,1561,1563,
  	5,135,0,0,1562,1561,1,0,0,0,1562,1563,1,0,0,0,1563,1564,1,0,0,0,1564,
  	1566,3,102,51,0,1565,1567,5,135,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,
  	0,1567,1586,1,0,0,0,1568,1570,5,2,0,0,1569,1571,5,135,0,0,1570,1569,1,
  	0,0,0,1570,1571,1,0,0,0,1571,1572,1,0,0,0,1572,1574,3,184,92,0,1573,1575,
  	5,135,0,0,1574,1573,1,0,0,0,1574,1575,1,0,0,0,1575,1576,1,0,0,0,1576,
  	1578,5,10,0,0,1577,1579,5,135,0,0,1578,1577,1,0,0,0,1578,1579,1,0,0,0,
  	1579,1580,1,0,0,0,1580,1582,3,102,51,0,1581,1583,5,135,0,0,1582,1581,
  	1,0,0,0,1582,1583,1,0,0,0,1583,1585,1,0,0,0,1584,1568,1,0,0,0,1585,1588,
  	1,0,0,0,1586,1584,1,0,0,0,1586,1587,1,0,0,0,1587,1590,1,0,0,0,1588,1586,
  	1,0,0,0,1589,1556,1,0,0,0,1589,1590,1,0,0,0,1590,1591,1,0,0,0,1591,1592,
  	5,25,0,0,1592,179,1,0,0,0,1593,1596,5,26,0,0,1594,1597,3,192,96,0,1595,
  	1597,5,108,0,0,1596,1594,1,0,0,0,1596,1595,1,0,0,0,1597,181,1,0,0,0,1598,
  	1603,3,132,66,0,1599,1601,5,135,0,0,1600,1599,1,0,0,0,1600,1601,1,0,0,
  	0,1601,1602,1,0,0,0,1602,1604,3,168,84,0,1603,1600,1,0,0,0,1604,1605,
  	1,0,0,0,1605,1603,1,0,0,0,1605,1606,1,0,0,0,1606,183,1,0,0,0,1607,1608,
  	3,190,95,0,1608,185,1,0,0,0,1609,1610,7,3,0,0,1610,187,1,0,0,0,1611,1612,
  	7,4,0,0,1612,189,1,0,0,0,1613,1616,3,192,96,0,1614,1616,3,194,97,0,1615,
  	1613,1,0,0,0,1615,1614,1,0,0,0,1616,191,1,0,0,0,1617,1618,7,5,0,0,1618,
  	193,1,0,0,0,1619,1620,7,6,0,0,1620,195,1,0,0,0,1621,1622,7,7,0,0,1622,
  	197,1,0,0,0,1623,1624,7,8,0,0,1624,199,1,0,0,0,1625,1626,7,9,0,0,1626,
  	201,1,0,0,0,300,203,207,210,213,220,225,230,235,239,243,247,251,255,259,
  	265,270,277,282,285,289,293,297,303,307,312,317,321,324,326,330,334,339,
  	343,348,352,361,366,370,374,378,383,387,390,394,404,411,424,428,434,441,
  	446,450,456,460,466,470,476,480,484,488,492,496,501,508,512,517,524,530,
  	535,541,547,552,556,561,564,567,570,577,583,586,591,594,598,601,609,613,
  	617,621,625,630,635,639,644,647,656,665,670,683,686,702,710,714,719,724,
  	728,733,739,744,751,755,759,761,765,767,771,773,779,785,789,792,795,799,
  	805,809,812,815,821,824,827,831,837,840,843,847,851,855,857,861,863,866,
  	870,872,875,879,881,887,891,895,899,902,907,912,917,922,928,932,934,938,
  	942,944,946,961,971,981,986,990,997,1002,1007,1011,1015,1019,1022,1024,
  	1029,1033,1037,1041,1045,1049,1052,1054,1059,1063,1068,1073,1077,1086,
  	1088,1094,1098,1105,1109,1113,1116,1130,1133,1147,1151,1156,1160,1163,
  	1170,1174,1178,1185,1189,1193,1199,1203,1207,1213,1217,1221,1227,1231,
  	1235,1243,1251,1257,1261,1265,1269,1273,1276,1282,1287,1292,1297,1302,
  	1307,1310,1314,1318,1324,1329,1333,1336,1346,1350,1354,1356,1360,1364,
  	1368,1372,1375,1383,1387,1391,1395,1399,1403,1407,1410,1426,1431,1435,
  	1439,1442,1445,1451,1455,1459,1461,1465,1469,1473,1475,1479,1483,1489,
  	1495,1500,1504,1508,1513,1515,1518,1522,1525,1528,1534,1538,1542,1550,
  	1554,1558,1562,1566,1570,1574,1578,1582,1586,1589,1596,1600,1605,1615
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  lcypherParserStaticData = staticData.release();
}

}

LcypherParser::LcypherParser(TokenStream *input) : LcypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

LcypherParser::LcypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  LcypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *lcypherParserStaticData->atn, lcypherParserStaticData->decisionToDFA, lcypherParserStaticData->sharedContextCache, options);
}

LcypherParser::~LcypherParser() {
  delete _interpreter;
}

const atn::ATN& LcypherParser::getATN() const {
  return *lcypherParserStaticData->atn;
}

std::string LcypherParser::getGrammarFileName() const {
  return "Lcypher.g4";
}

const std::vector<std::string>& LcypherParser::getRuleNames() const {
  return lcypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& LcypherParser::getVocabulary() const {
  return lcypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView LcypherParser::getSerializedATN() const {
  return lcypherParserStaticData->serializedATN;
}


//----------------- OC_CypherContext ------------------------------------------------------------------

LcypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_StatementContext* LcypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<LcypherParser::OC_StatementContext>(0);
}

tree::TerminalNode* LcypherParser::OC_CypherContext::EOF() {
  return getToken(LcypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_CypherContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_CypherContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Cypher;
}


std::any LcypherParser::OC_CypherContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Cypher(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_CypherContext* LcypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 0, LcypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(203);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(202);
      match(LcypherParser::SP);
    }
    setState(205);
    oC_Statement();
    setState(210);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      setState(207);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(206);
        match(LcypherParser::SP);
      }
      setState(209);
      match(LcypherParser::T__0);
      break;
    }

    default:
      break;
    }
    setState(213);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(212);
      match(LcypherParser::SP);
    }
    setState(215);
    match(LcypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

LcypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_QueryContext* LcypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<LcypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* LcypherParser::OC_StatementContext::EXPLAIN() {
  return getToken(LcypherParser::EXPLAIN, 0);
}

tree::TerminalNode* LcypherParser::OC_StatementContext::SP() {
  return getToken(LcypherParser::SP, 0);
}

tree::TerminalNode* LcypherParser::OC_StatementContext::PROFILE() {
  return getToken(LcypherParser::PROFILE, 0);
}

tree::TerminalNode* LcypherParser::OC_StatementContext::OPTIMIZE() {
  return getToken(LcypherParser::OPTIMIZE, 0);
}

tree::TerminalNode* LcypherParser::OC_StatementContext::MAINTENANCE() {
  return getToken(LcypherParser::MAINTENANCE, 0);
}

LcypherParser::OC_ViewContext* LcypherParser::OC_StatementContext::oC_View() {
  return getRuleContext<LcypherParser::OC_ViewContext>(0);
}


size_t LcypherParser::OC_StatementContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Statement;
}


std::any LcypherParser::OC_StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Statement(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_StatementContext* LcypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 2, LcypherParser::RuleOC_Statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(239);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(217);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(218);
      match(LcypherParser::EXPLAIN);
      setState(220);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(219);
        match(LcypherParser::SP);
      }
      setState(222);
      oC_Query();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(223);
      match(LcypherParser::PROFILE);
      setState(225);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(224);
        match(LcypherParser::SP);
      }
      setState(227);
      oC_Query();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(228);
      match(LcypherParser::OPTIMIZE);
      setState(230);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(229);
        match(LcypherParser::SP);
      }
      setState(232);
      oC_Query();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(233);
      match(LcypherParser::MAINTENANCE);
      setState(235);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(234);
        match(LcypherParser::SP);
      }
      setState(237);
      oC_Query();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(238);
      oC_View();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

LcypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_RegularQueryContext* LcypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<LcypherParser::OC_RegularQueryContext>(0);
}

LcypherParser::OC_StandaloneCallContext* LcypherParser::OC_QueryContext::oC_StandaloneCall() {
  return getRuleContext<LcypherParser::OC_StandaloneCallContext>(0);
}


size_t LcypherParser::OC_QueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Query;
}


std::any LcypherParser::OC_QueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Query(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_QueryContext* LcypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 4, LcypherParser::RuleOC_Query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(243);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(241);
      oC_RegularQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(242);
      oC_StandaloneCall();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ViewContext ------------------------------------------------------------------

LcypherParser::OC_ViewContext::OC_ViewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_ViewContext::CREATE() {
  return getToken(LcypherParser::CREATE, 0);
}

tree::TerminalNode* LcypherParser::OC_ViewContext::VIEW() {
  return getToken(LcypherParser::VIEW, 0);
}

LcypherParser::OC_LabelNameContext* LcypherParser::OC_ViewContext::oC_LabelName() {
  return getRuleContext<LcypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_ViewContext::AS() {
  return getToken(LcypherParser::AS, 0);
}

LcypherParser::OC_RegularQueryContext* LcypherParser::OC_ViewContext::oC_RegularQuery() {
  return getRuleContext<LcypherParser::OC_RegularQueryContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ViewContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ViewContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_ViewContext::getRuleIndex() const {
  return LcypherParser::RuleOC_View;
}


std::any LcypherParser::OC_ViewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_View(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ViewContext* LcypherParser::oC_View() {
  OC_ViewContext *_localctx = _tracker.createInstance<OC_ViewContext>(_ctx, getState());
  enterRule(_localctx, 6, LcypherParser::RuleOC_View);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(245);
    match(LcypherParser::CREATE);
    setState(247);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(246);
      match(LcypherParser::SP);
    }
    setState(249);
    match(LcypherParser::VIEW);
    setState(251);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(250);
      match(LcypherParser::SP);
    }
    setState(253);
    oC_LabelName();
    setState(255);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(254);
      match(LcypherParser::SP);
    }
    setState(257);
    match(LcypherParser::AS);
    setState(259);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(258);
      match(LcypherParser::SP);
    }
    setState(261);
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

LcypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SingleQueryContext* LcypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<LcypherParser::OC_SingleQueryContext>(0);
}

std::vector<LcypherParser::OC_UnionContext *> LcypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<LcypherParser::OC_UnionContext>();
}

LcypherParser::OC_UnionContext* LcypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<LcypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RegularQueryContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RegularQuery;
}


std::any LcypherParser::OC_RegularQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RegularQuery(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RegularQueryContext* LcypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 8, LcypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(263);
    oC_SingleQuery();
    setState(270);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(265);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(264);
          match(LcypherParser::SP);
        }
        setState(267);
        oC_Union(); 
      }
      setState(272);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 15, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

LcypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_UnionContext::UNION() {
  return getToken(LcypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_UnionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_UnionContext::ALL() {
  return getToken(LcypherParser::ALL, 0);
}

LcypherParser::OC_SingleQueryContext* LcypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<LcypherParser::OC_SingleQueryContext>(0);
}


size_t LcypherParser::OC_UnionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Union;
}


std::any LcypherParser::OC_UnionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Union(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_UnionContext* LcypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 10, LcypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(285);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(273);
      match(LcypherParser::UNION);
      setState(274);
      match(LcypherParser::SP);
      setState(275);
      match(LcypherParser::ALL);
      setState(277);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(276);
        match(LcypherParser::SP);
      }
      setState(279);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(280);
      match(LcypherParser::UNION);
      setState(282);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(281);
        match(LcypherParser::SP);
      }
      setState(284);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

LcypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SinglePartQueryContext* LcypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<LcypherParser::OC_SinglePartQueryContext>(0);
}

LcypherParser::OC_MultiPartQueryContext* LcypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<LcypherParser::OC_MultiPartQueryContext>(0);
}


size_t LcypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SingleQuery;
}


std::any LcypherParser::OC_SingleQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SingleQuery(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SingleQueryContext* LcypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 12, LcypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(289);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(287);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(288);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

LcypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ReturnContext* LcypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<LcypherParser::OC_ReturnContext>(0);
}

std::vector<LcypherParser::OC_ReadingClauseContext *> LcypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<LcypherParser::OC_ReadingClauseContext>();
}

LcypherParser::OC_ReadingClauseContext* LcypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<LcypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_UpdatingClauseContext *> LcypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<LcypherParser::OC_UpdatingClauseContext>();
}

LcypherParser::OC_UpdatingClauseContext* LcypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<LcypherParser::OC_UpdatingClauseContext>(i);
}


size_t LcypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SinglePartQuery;
}


std::any LcypherParser::OC_SinglePartQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SinglePartQuery(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SinglePartQueryContext* LcypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 14, LcypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(326);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(297);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 53) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 53)) & 2055) != 0)) {
        setState(291);
        oC_ReadingClause();
        setState(293);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(292);
          match(LcypherParser::SP);
        }
        setState(299);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(300);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(307);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 53) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 53)) & 2055) != 0)) {
        setState(301);
        oC_ReadingClause();
        setState(303);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(302);
          match(LcypherParser::SP);
        }
        setState(309);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(310);
      oC_UpdatingClause();
      setState(317);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(312);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(311);
            match(LcypherParser::SP);
          }
          setState(314);
          oC_UpdatingClause(); 
        }
        setState(319);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx);
      }
      setState(324);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
      case 1: {
        setState(321);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(320);
          match(LcypherParser::SP);
        }
        setState(323);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

LcypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SinglePartQueryContext* LcypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<LcypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<LcypherParser::OC_WithContext *> LcypherParser::OC_MultiPartQueryContext::oC_With() {
  return getRuleContexts<LcypherParser::OC_WithContext>();
}

LcypherParser::OC_WithContext* LcypherParser::OC_MultiPartQueryContext::oC_With(size_t i) {
  return getRuleContext<LcypherParser::OC_WithContext>(i);
}

std::vector<LcypherParser::OC_ReadingClauseContext *> LcypherParser::OC_MultiPartQueryContext::oC_ReadingClause() {
  return getRuleContexts<LcypherParser::OC_ReadingClauseContext>();
}

LcypherParser::OC_ReadingClauseContext* LcypherParser::OC_MultiPartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<LcypherParser::OC_ReadingClauseContext>(i);
}

std::vector<LcypherParser::OC_UpdatingClauseContext *> LcypherParser::OC_MultiPartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<LcypherParser::OC_UpdatingClauseContext>();
}

LcypherParser::OC_UpdatingClauseContext* LcypherParser::OC_MultiPartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<LcypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_MultiPartQuery;
}


std::any LcypherParser::OC_MultiPartQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_MultiPartQuery(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MultiPartQueryContext* LcypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 16, LcypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(350); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(334);
              _errHandler->sync(this);
              _la = _input->LA(1);
              while (((((_la - 53) & ~ 0x3fULL) == 0) &&
                ((1ULL << (_la - 53)) & 2055) != 0)) {
                setState(328);
                oC_ReadingClause();
                setState(330);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == LcypherParser::SP) {
                  setState(329);
                  match(LcypherParser::SP);
                }
                setState(336);
                _errHandler->sync(this);
                _la = _input->LA(1);
              }
              setState(343);
              _errHandler->sync(this);
              _la = _input->LA(1);
              while ((((_la & ~ 0x3fULL) == 0) &&
                ((1ULL << _la) & -432345564227567616) != 0)) {
                setState(337);
                oC_UpdatingClause();
                setState(339);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == LcypherParser::SP) {
                  setState(338);
                  match(LcypherParser::SP);
                }
                setState(345);
                _errHandler->sync(this);
                _la = _input->LA(1);
              }
              setState(346);
              oC_With();
              setState(348);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == LcypherParser::SP) {
                setState(347);
                match(LcypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(352); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(354);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

LcypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_CreateContext* LcypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<LcypherParser::OC_CreateContext>(0);
}

LcypherParser::OC_MergeContext* LcypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<LcypherParser::OC_MergeContext>(0);
}

LcypherParser::OC_DeleteContext* LcypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<LcypherParser::OC_DeleteContext>(0);
}

LcypherParser::OC_SetContext* LcypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<LcypherParser::OC_SetContext>(0);
}

LcypherParser::OC_RemoveContext* LcypherParser::OC_UpdatingClauseContext::oC_Remove() {
  return getRuleContext<LcypherParser::OC_RemoveContext>(0);
}


size_t LcypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return LcypherParser::RuleOC_UpdatingClause;
}


std::any LcypherParser::OC_UpdatingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_UpdatingClause(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_UpdatingClauseContext* LcypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 18, LcypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(361);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(356);
        oC_Create();
        break;
      }

      case LcypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(357);
        oC_Merge();
        break;
      }

      case LcypherParser::DETACH:
      case LcypherParser::DELETE_: {
        enterOuterAlt(_localctx, 3);
        setState(358);
        oC_Delete();
        break;
      }

      case LcypherParser::SET: {
        enterOuterAlt(_localctx, 4);
        setState(359);
        oC_Set();
        break;
      }

      case LcypherParser::REMOVE: {
        enterOuterAlt(_localctx, 5);
        setState(360);
        oC_Remove();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

LcypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_MatchContext* LcypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<LcypherParser::OC_MatchContext>(0);
}

LcypherParser::OC_UnwindContext* LcypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<LcypherParser::OC_UnwindContext>(0);
}

LcypherParser::OC_InQueryCallContext* LcypherParser::OC_ReadingClauseContext::oC_InQueryCall() {
  return getRuleContext<LcypherParser::OC_InQueryCallContext>(0);
}


size_t LcypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReadingClause;
}


std::any LcypherParser::OC_ReadingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReadingClause(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReadingClauseContext* LcypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 20, LcypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(366);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::OPTIONAL_:
      case LcypherParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(363);
        oC_Match();
        break;
      }

      case LcypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(364);
        oC_Unwind();
        break;
      }

      case LcypherParser::CALL: {
        enterOuterAlt(_localctx, 3);
        setState(365);
        oC_InQueryCall();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

LcypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_MatchContext::MATCH() {
  return getToken(LcypherParser::MATCH, 0);
}

LcypherParser::OC_PatternContext* LcypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<LcypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* LcypherParser::OC_MatchContext::OPTIONAL_() {
  return getToken(LcypherParser::OPTIONAL_, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MatchContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_HintContext *> LcypherParser::OC_MatchContext::oC_Hint() {
  return getRuleContexts<LcypherParser::OC_HintContext>();
}

LcypherParser::OC_HintContext* LcypherParser::OC_MatchContext::oC_Hint(size_t i) {
  return getRuleContext<LcypherParser::OC_HintContext>(i);
}

LcypherParser::OC_WhereContext* LcypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<LcypherParser::OC_WhereContext>(0);
}


size_t LcypherParser::OC_MatchContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Match;
}


std::any LcypherParser::OC_MatchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Match(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MatchContext* LcypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 22, LcypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(370);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::OPTIONAL_) {
      setState(368);
      match(LcypherParser::OPTIONAL_);
      setState(369);
      match(LcypherParser::SP);
    }
    setState(372);
    match(LcypherParser::MATCH);
    setState(374);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(373);
      match(LcypherParser::SP);
    }
    setState(376);
    oC_Pattern();
    setState(383);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(378);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(377);
          match(LcypherParser::SP);
        }
        setState(380);
        oC_Hint(); 
      }
      setState(385);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
    }
    setState(390);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      setState(387);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(386);
        match(LcypherParser::SP);
      }
      setState(389);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

LcypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_UnwindContext::UNWIND() {
  return getToken(LcypherParser::UNWIND, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_UnwindContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_UnwindContext::AS() {
  return getToken(LcypherParser::AS, 0);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}


size_t LcypherParser::OC_UnwindContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Unwind;
}


std::any LcypherParser::OC_UnwindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Unwind(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_UnwindContext* LcypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 24, LcypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(392);
    match(LcypherParser::UNWIND);
    setState(394);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(393);
      match(LcypherParser::SP);
    }
    setState(396);
    oC_Expression();
    setState(397);
    match(LcypherParser::SP);
    setState(398);
    match(LcypherParser::AS);
    setState(399);
    match(LcypherParser::SP);
    setState(400);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

LcypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_MergeContext::MERGE() {
  return getToken(LcypherParser::MERGE, 0);
}

LcypherParser::OC_PatternPartContext* LcypherParser::OC_MergeContext::oC_PatternPart() {
  return getRuleContext<LcypherParser::OC_PatternPartContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MergeContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_MergeActionContext *> LcypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<LcypherParser::OC_MergeActionContext>();
}

LcypherParser::OC_MergeActionContext* LcypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<LcypherParser::OC_MergeActionContext>(i);
}


size_t LcypherParser::OC_MergeContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Merge;
}


std::any LcypherParser::OC_MergeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Merge(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MergeContext* LcypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 26, LcypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(402);
    match(LcypherParser::MERGE);
    setState(404);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(403);
      match(LcypherParser::SP);
    }
    setState(406);
    oC_PatternPart();
    setState(411);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(407);
        match(LcypherParser::SP);
        setState(408);
        oC_MergeAction(); 
      }
      setState(413);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

LcypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_MergeActionContext::ON() {
  return getToken(LcypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MergeActionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_MergeActionContext::MATCH() {
  return getToken(LcypherParser::MATCH, 0);
}

LcypherParser::OC_SetContext* LcypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<LcypherParser::OC_SetContext>(0);
}

tree::TerminalNode* LcypherParser::OC_MergeActionContext::CREATE() {
  return getToken(LcypherParser::CREATE, 0);
}


size_t LcypherParser::OC_MergeActionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_MergeAction;
}


std::any LcypherParser::OC_MergeActionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_MergeAction(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MergeActionContext* LcypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 28, LcypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(424);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(414);
      match(LcypherParser::ON);
      setState(415);
      match(LcypherParser::SP);
      setState(416);
      match(LcypherParser::MATCH);
      setState(417);
      match(LcypherParser::SP);
      setState(418);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(419);
      match(LcypherParser::ON);
      setState(420);
      match(LcypherParser::SP);
      setState(421);
      match(LcypherParser::CREATE);
      setState(422);
      match(LcypherParser::SP);
      setState(423);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

LcypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_CreateContext::CREATE() {
  return getToken(LcypherParser::CREATE, 0);
}

LcypherParser::OC_PatternContext* LcypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<LcypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* LcypherParser::OC_CreateContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_CreateContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Create;
}


std::any LcypherParser::OC_CreateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Create(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_CreateContext* LcypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 30, LcypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(426);
    match(LcypherParser::CREATE);
    setState(428);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(427);
      match(LcypherParser::SP);
    }
    setState(430);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

LcypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_SetContext::SET() {
  return getToken(LcypherParser::SET, 0);
}

std::vector<LcypherParser::OC_SetItemContext *> LcypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<LcypherParser::OC_SetItemContext>();
}

LcypherParser::OC_SetItemContext* LcypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<LcypherParser::OC_SetItemContext>(i);
}

tree::TerminalNode* LcypherParser::OC_SetContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_SetContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Set;
}


std::any LcypherParser::OC_SetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Set(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SetContext* LcypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 32, LcypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(432);
    match(LcypherParser::SET);
    setState(434);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(433);
      match(LcypherParser::SP);
    }
    setState(436);
    oC_SetItem();
    setState(441);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LcypherParser::T__1) {
      setState(437);
      match(LcypherParser::T__1);
      setState(438);
      oC_SetItem();
      setState(443);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

LcypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PropertyExpressionContext* LcypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<LcypherParser::OC_PropertyExpressionContext>(0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_SetItemContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_SetItemContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::OC_SetItemContext::oC_NodeLabels() {
  return getRuleContext<LcypherParser::OC_NodeLabelsContext>(0);
}


size_t LcypherParser::OC_SetItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SetItem;
}


std::any LcypherParser::OC_SetItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SetItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SetItemContext* LcypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 34, LcypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(480);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(444);
      oC_PropertyExpression();
      setState(446);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(445);
        match(LcypherParser::SP);
      }
      setState(448);
      match(LcypherParser::T__2);
      setState(450);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(449);
        match(LcypherParser::SP);
      }
      setState(452);
      oC_Expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(454);
      oC_Variable();
      setState(456);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(455);
        match(LcypherParser::SP);
      }
      setState(458);
      match(LcypherParser::T__2);
      setState(460);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(459);
        match(LcypherParser::SP);
      }
      setState(462);
      oC_Expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(464);
      oC_Variable();
      setState(466);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(465);
        match(LcypherParser::SP);
      }
      setState(468);
      match(LcypherParser::T__3);
      setState(470);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(469);
        match(LcypherParser::SP);
      }
      setState(472);
      oC_Expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(474);
      oC_Variable();
      setState(476);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(475);
        match(LcypherParser::SP);
      }
      setState(478);
      oC_NodeLabels();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

LcypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_DeleteContext::DELETE_() {
  return getToken(LcypherParser::DELETE_, 0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* LcypherParser::OC_DeleteContext::DETACH() {
  return getToken(LcypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_DeleteContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_DeleteContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Delete;
}


std::any LcypherParser::OC_DeleteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Delete(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_DeleteContext* LcypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 36, LcypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(484);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::DETACH) {
      setState(482);
      match(LcypherParser::DETACH);
      setState(483);
      match(LcypherParser::SP);
    }
    setState(486);
    match(LcypherParser::DELETE_);
    setState(488);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(487);
      match(LcypherParser::SP);
    }
    setState(490);
    oC_Expression();
    setState(501);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(492);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(491);
          match(LcypherParser::SP);
        }
        setState(494);
        match(LcypherParser::T__1);
        setState(496);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(495);
          match(LcypherParser::SP);
        }
        setState(498);
        oC_Expression(); 
      }
      setState(503);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RemoveContext ------------------------------------------------------------------

LcypherParser::OC_RemoveContext::OC_RemoveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_RemoveContext::REMOVE() {
  return getToken(LcypherParser::REMOVE, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RemoveContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RemoveContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_RemoveItemContext *> LcypherParser::OC_RemoveContext::oC_RemoveItem() {
  return getRuleContexts<LcypherParser::OC_RemoveItemContext>();
}

LcypherParser::OC_RemoveItemContext* LcypherParser::OC_RemoveContext::oC_RemoveItem(size_t i) {
  return getRuleContext<LcypherParser::OC_RemoveItemContext>(i);
}


size_t LcypherParser::OC_RemoveContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Remove;
}


std::any LcypherParser::OC_RemoveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Remove(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RemoveContext* LcypherParser::oC_Remove() {
  OC_RemoveContext *_localctx = _tracker.createInstance<OC_RemoveContext>(_ctx, getState());
  enterRule(_localctx, 38, LcypherParser::RuleOC_Remove);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(504);
    match(LcypherParser::REMOVE);
    setState(505);
    match(LcypherParser::SP);
    setState(506);
    oC_RemoveItem();
    setState(517);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(508);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(507);
          match(LcypherParser::SP);
        }
        setState(510);
        match(LcypherParser::T__1);
        setState(512);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(511);
          match(LcypherParser::SP);
        }
        setState(514);
        oC_RemoveItem(); 
      }
      setState(519);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RemoveItemContext ------------------------------------------------------------------

LcypherParser::OC_RemoveItemContext::OC_RemoveItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_VariableContext* LcypherParser::OC_RemoveItemContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::OC_RemoveItemContext::oC_NodeLabels() {
  return getRuleContext<LcypherParser::OC_NodeLabelsContext>(0);
}

LcypherParser::OC_PropertyExpressionContext* LcypherParser::OC_RemoveItemContext::oC_PropertyExpression() {
  return getRuleContext<LcypherParser::OC_PropertyExpressionContext>(0);
}


size_t LcypherParser::OC_RemoveItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RemoveItem;
}


std::any LcypherParser::OC_RemoveItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RemoveItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RemoveItemContext* LcypherParser::oC_RemoveItem() {
  OC_RemoveItemContext *_localctx = _tracker.createInstance<OC_RemoveItemContext>(_ctx, getState());
  enterRule(_localctx, 40, LcypherParser::RuleOC_RemoveItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(524);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(520);
      oC_Variable();
      setState(521);
      oC_NodeLabels();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(523);
      oC_PropertyExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_InQueryCallContext ------------------------------------------------------------------

LcypherParser::OC_InQueryCallContext::OC_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_InQueryCallContext::CALL() {
  return getToken(LcypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_InQueryCallContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_InQueryCallContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ExplicitProcedureInvocationContext* LcypherParser::OC_InQueryCallContext::oC_ExplicitProcedureInvocation() {
  return getRuleContext<LcypherParser::OC_ExplicitProcedureInvocationContext>(0);
}

tree::TerminalNode* LcypherParser::OC_InQueryCallContext::YIELD() {
  return getToken(LcypherParser::YIELD, 0);
}

LcypherParser::OC_YieldItemsContext* LcypherParser::OC_InQueryCallContext::oC_YieldItems() {
  return getRuleContext<LcypherParser::OC_YieldItemsContext>(0);
}


size_t LcypherParser::OC_InQueryCallContext::getRuleIndex() const {
  return LcypherParser::RuleOC_InQueryCall;
}


std::any LcypherParser::OC_InQueryCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_InQueryCall(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_InQueryCallContext* LcypherParser::oC_InQueryCall() {
  OC_InQueryCallContext *_localctx = _tracker.createInstance<OC_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 42, LcypherParser::RuleOC_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(526);
    match(LcypherParser::CALL);
    setState(527);
    match(LcypherParser::SP);
    setState(528);
    oC_ExplicitProcedureInvocation();
    setState(535);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      setState(530);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(529);
        match(LcypherParser::SP);
      }
      setState(532);
      match(LcypherParser::YIELD);
      setState(533);
      match(LcypherParser::SP);
      setState(534);
      oC_YieldItems();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StandaloneCallContext ------------------------------------------------------------------

LcypherParser::OC_StandaloneCallContext::OC_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_StandaloneCallContext::CALL() {
  return getToken(LcypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_StandaloneCallContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_StandaloneCallContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ExplicitProcedureInvocationContext* LcypherParser::OC_StandaloneCallContext::oC_ExplicitProcedureInvocation() {
  return getRuleContext<LcypherParser::OC_ExplicitProcedureInvocationContext>(0);
}

LcypherParser::OC_ImplicitProcedureInvocationContext* LcypherParser::OC_StandaloneCallContext::oC_ImplicitProcedureInvocation() {
  return getRuleContext<LcypherParser::OC_ImplicitProcedureInvocationContext>(0);
}

tree::TerminalNode* LcypherParser::OC_StandaloneCallContext::YIELD() {
  return getToken(LcypherParser::YIELD, 0);
}

LcypherParser::OC_YieldItemsContext* LcypherParser::OC_StandaloneCallContext::oC_YieldItems() {
  return getRuleContext<LcypherParser::OC_YieldItemsContext>(0);
}


size_t LcypherParser::OC_StandaloneCallContext::getRuleIndex() const {
  return LcypherParser::RuleOC_StandaloneCall;
}


std::any LcypherParser::OC_StandaloneCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_StandaloneCall(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_StandaloneCallContext* LcypherParser::oC_StandaloneCall() {
  OC_StandaloneCallContext *_localctx = _tracker.createInstance<OC_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 44, LcypherParser::RuleOC_StandaloneCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(537);
    match(LcypherParser::CALL);
    setState(538);
    match(LcypherParser::SP);
    setState(541);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
    case 1: {
      setState(539);
      oC_ExplicitProcedureInvocation();
      break;
    }

    case 2: {
      setState(540);
      oC_ImplicitProcedureInvocation();
      break;
    }

    default:
      break;
    }
    setState(547);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      setState(543);
      match(LcypherParser::SP);
      setState(544);
      match(LcypherParser::YIELD);
      setState(545);
      match(LcypherParser::SP);
      setState(546);
      oC_YieldItems();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_YieldItemsContext ------------------------------------------------------------------

LcypherParser::OC_YieldItemsContext::OC_YieldItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_WhereContext* LcypherParser::OC_YieldItemsContext::oC_Where() {
  return getRuleContext<LcypherParser::OC_WhereContext>(0);
}

std::vector<LcypherParser::OC_YieldItemContext *> LcypherParser::OC_YieldItemsContext::oC_YieldItem() {
  return getRuleContexts<LcypherParser::OC_YieldItemContext>();
}

LcypherParser::OC_YieldItemContext* LcypherParser::OC_YieldItemsContext::oC_YieldItem(size_t i) {
  return getRuleContext<LcypherParser::OC_YieldItemContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_YieldItemsContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_YieldItemsContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_YieldItemsContext::getRuleIndex() const {
  return LcypherParser::RuleOC_YieldItems;
}


std::any LcypherParser::OC_YieldItemsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_YieldItems(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_YieldItemsContext* LcypherParser::oC_YieldItems() {
  OC_YieldItemsContext *_localctx = _tracker.createInstance<OC_YieldItemsContext>(_ctx, getState());
  enterRule(_localctx, 46, LcypherParser::RuleOC_YieldItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(564);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::T__4: {
        setState(549);
        match(LcypherParser::T__4);
        break;
      }

      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        setState(550);
        oC_YieldItem();
        setState(561);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(552);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(551);
              match(LcypherParser::SP);
            }
            setState(554);
            match(LcypherParser::T__1);
            setState(556);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(555);
              match(LcypherParser::SP);
            }
            setState(558);
            oC_YieldItem(); 
          }
          setState(563);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(570);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      setState(567);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(566);
        match(LcypherParser::SP);
      }
      setState(569);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_YieldItemContext ------------------------------------------------------------------

LcypherParser::OC_YieldItemContext::OC_YieldItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_VariableContext* LcypherParser::OC_YieldItemContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_ProcedureResultFieldContext* LcypherParser::OC_YieldItemContext::oC_ProcedureResultField() {
  return getRuleContext<LcypherParser::OC_ProcedureResultFieldContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_YieldItemContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_YieldItemContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_YieldItemContext::AS() {
  return getToken(LcypherParser::AS, 0);
}


size_t LcypherParser::OC_YieldItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_YieldItem;
}


std::any LcypherParser::OC_YieldItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_YieldItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_YieldItemContext* LcypherParser::oC_YieldItem() {
  OC_YieldItemContext *_localctx = _tracker.createInstance<OC_YieldItemContext>(_ctx, getState());
  enterRule(_localctx, 48, LcypherParser::RuleOC_YieldItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(577);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      setState(572);
      oC_ProcedureResultField();
      setState(573);
      match(LcypherParser::SP);
      setState(574);
      match(LcypherParser::AS);
      setState(575);
      match(LcypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(579);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

LcypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_WithContext::WITH() {
  return getToken(LcypherParser::WITH, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_WithContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_WithContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ReturnBodyContext* LcypherParser::OC_WithContext::oC_ReturnBody() {
  return getRuleContext<LcypherParser::OC_ReturnBodyContext>(0);
}

tree::TerminalNode* LcypherParser::OC_WithContext::DISTINCT() {
  return getToken(LcypherParser::DISTINCT, 0);
}

LcypherParser::OC_WhereContext* LcypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<LcypherParser::OC_WhereContext>(0);
}


size_t LcypherParser::OC_WithContext::getRuleIndex() const {
  return LcypherParser::RuleOC_With;
}


std::any LcypherParser::OC_WithContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_With(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_WithContext* LcypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 50, LcypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(581);
    match(LcypherParser::WITH);
    setState(586);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
    case 1: {
      setState(583);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(582);
        match(LcypherParser::SP);
      }
      setState(585);
      match(LcypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(588);
    match(LcypherParser::SP);
    setState(589);
    oC_ReturnBody();
    setState(594);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      setState(591);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(590);
        match(LcypherParser::SP);
      }
      setState(593);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

LcypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_ReturnContext::RETURN() {
  return getToken(LcypherParser::RETURN, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ReturnContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ReturnContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ReturnBodyContext* LcypherParser::OC_ReturnContext::oC_ReturnBody() {
  return getRuleContext<LcypherParser::OC_ReturnBodyContext>(0);
}

tree::TerminalNode* LcypherParser::OC_ReturnContext::DISTINCT() {
  return getToken(LcypherParser::DISTINCT, 0);
}


size_t LcypherParser::OC_ReturnContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Return;
}


std::any LcypherParser::OC_ReturnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Return(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReturnContext* LcypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 52, LcypherParser::RuleOC_Return);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(596);
    match(LcypherParser::RETURN);
    setState(601);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
    case 1: {
      setState(598);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(597);
        match(LcypherParser::SP);
      }
      setState(600);
      match(LcypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(603);
    match(LcypherParser::SP);
    setState(604);
    oC_ReturnBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnBodyContext ------------------------------------------------------------------

LcypherParser::OC_ReturnBodyContext::OC_ReturnBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ReturnItemsContext* LcypherParser::OC_ReturnBodyContext::oC_ReturnItems() {
  return getRuleContext<LcypherParser::OC_ReturnItemsContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ReturnBodyContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ReturnBodyContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_OrderContext* LcypherParser::OC_ReturnBodyContext::oC_Order() {
  return getRuleContext<LcypherParser::OC_OrderContext>(0);
}

LcypherParser::OC_SkipContext* LcypherParser::OC_ReturnBodyContext::oC_Skip() {
  return getRuleContext<LcypherParser::OC_SkipContext>(0);
}

LcypherParser::OC_LimitContext* LcypherParser::OC_ReturnBodyContext::oC_Limit() {
  return getRuleContext<LcypherParser::OC_LimitContext>(0);
}


size_t LcypherParser::OC_ReturnBodyContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReturnBody;
}


std::any LcypherParser::OC_ReturnBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReturnBody(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReturnBodyContext* LcypherParser::oC_ReturnBody() {
  OC_ReturnBodyContext *_localctx = _tracker.createInstance<OC_ReturnBodyContext>(_ctx, getState());
  enterRule(_localctx, 54, LcypherParser::RuleOC_ReturnBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(606);
    oC_ReturnItems();
    setState(609);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      setState(607);
      match(LcypherParser::SP);
      setState(608);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(613);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      setState(611);
      match(LcypherParser::SP);
      setState(612);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(617);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      setState(615);
      match(LcypherParser::SP);
      setState(616);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnItemsContext ------------------------------------------------------------------

LcypherParser::OC_ReturnItemsContext::OC_ReturnItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_ReturnItemContext *> LcypherParser::OC_ReturnItemsContext::oC_ReturnItem() {
  return getRuleContexts<LcypherParser::OC_ReturnItemContext>();
}

LcypherParser::OC_ReturnItemContext* LcypherParser::OC_ReturnItemsContext::oC_ReturnItem(size_t i) {
  return getRuleContext<LcypherParser::OC_ReturnItemContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ReturnItemsContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ReturnItemsContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_ReturnItemsContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReturnItems;
}


std::any LcypherParser::OC_ReturnItemsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReturnItems(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReturnItemsContext* LcypherParser::oC_ReturnItems() {
  OC_ReturnItemsContext *_localctx = _tracker.createInstance<OC_ReturnItemsContext>(_ctx, getState());
  enterRule(_localctx, 56, LcypherParser::RuleOC_ReturnItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(647);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::T__4: {
        enterOuterAlt(_localctx, 1);
        setState(619);
        match(LcypherParser::T__4);
        setState(630);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(621);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(620);
              match(LcypherParser::SP);
            }
            setState(623);
            match(LcypherParser::T__1);
            setState(625);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(624);
              match(LcypherParser::SP);
            }
            setState(627);
            oC_ReturnItem(); 
          }
          setState(632);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
        }
        break;
      }

      case LcypherParser::T__5:
      case LcypherParser::T__7:
      case LcypherParser::T__12:
      case LcypherParser::T__13:
      case LcypherParser::T__23:
      case LcypherParser::T__25:
      case LcypherParser::ALL:
      case LcypherParser::NOT:
      case LcypherParser::NULL_:
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::TRUE_:
      case LcypherParser::FALSE_:
      case LcypherParser::EXISTS:
      case LcypherParser::CASE:
      case LcypherParser::StringLiteral:
      case LcypherParser::HexInteger:
      case LcypherParser::DecimalInteger:
      case LcypherParser::OctalInteger:
      case LcypherParser::HexLetter:
      case LcypherParser::ExponentDecimalReal:
      case LcypherParser::RegularDecimalReal:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(633);
        oC_ReturnItem();
        setState(644);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(635);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(634);
              match(LcypherParser::SP);
            }
            setState(637);
            match(LcypherParser::T__1);
            setState(639);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(638);
              match(LcypherParser::SP);
            }
            setState(641);
            oC_ReturnItem(); 
          }
          setState(646);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnItemContext ------------------------------------------------------------------

LcypherParser::OC_ReturnItemContext::OC_ReturnItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ReturnItemContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ReturnItemContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ReturnItemContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_ReturnItemContext::AS() {
  return getToken(LcypherParser::AS, 0);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_ReturnItemContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}


size_t LcypherParser::OC_ReturnItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReturnItem;
}


std::any LcypherParser::OC_ReturnItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReturnItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReturnItemContext* LcypherParser::oC_ReturnItem() {
  OC_ReturnItemContext *_localctx = _tracker.createInstance<OC_ReturnItemContext>(_ctx, getState());
  enterRule(_localctx, 58, LcypherParser::RuleOC_ReturnItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(656);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(649);
      oC_Expression();
      setState(650);
      match(LcypherParser::SP);
      setState(651);
      match(LcypherParser::AS);
      setState(652);
      match(LcypherParser::SP);
      setState(653);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(655);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

LcypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_OrderContext::ORDER() {
  return getToken(LcypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_OrderContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_OrderContext::BY() {
  return getToken(LcypherParser::BY, 0);
}

std::vector<LcypherParser::OC_SortItemContext *> LcypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<LcypherParser::OC_SortItemContext>();
}

LcypherParser::OC_SortItemContext* LcypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<LcypherParser::OC_SortItemContext>(i);
}


size_t LcypherParser::OC_OrderContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Order;
}


std::any LcypherParser::OC_OrderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Order(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_OrderContext* LcypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 60, LcypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(658);
    match(LcypherParser::ORDER);
    setState(659);
    match(LcypherParser::SP);
    setState(660);
    match(LcypherParser::BY);
    setState(661);
    match(LcypherParser::SP);
    setState(662);
    oC_SortItem();
    setState(670);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LcypherParser::T__1) {
      setState(663);
      match(LcypherParser::T__1);
      setState(665);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(664);
        match(LcypherParser::SP);
      }
      setState(667);
      oC_SortItem();
      setState(672);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

LcypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_SkipContext::L_SKIP() {
  return getToken(LcypherParser::L_SKIP, 0);
}

tree::TerminalNode* LcypherParser::OC_SkipContext::SP() {
  return getToken(LcypherParser::SP, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_SkipContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Skip;
}


std::any LcypherParser::OC_SkipContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Skip(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SkipContext* LcypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 62, LcypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(673);
    match(LcypherParser::L_SKIP);
    setState(674);
    match(LcypherParser::SP);
    setState(675);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

LcypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_LimitContext::LIMIT() {
  return getToken(LcypherParser::LIMIT, 0);
}

tree::TerminalNode* LcypherParser::OC_LimitContext::SP() {
  return getToken(LcypherParser::SP, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_LimitContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Limit;
}


std::any LcypherParser::OC_LimitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Limit(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_LimitContext* LcypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 64, LcypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(677);
    match(LcypherParser::LIMIT);
    setState(678);
    match(LcypherParser::SP);
    setState(679);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

LcypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(LcypherParser::ASCENDING, 0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::ASC() {
  return getToken(LcypherParser::ASC, 0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(LcypherParser::DESCENDING, 0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::DESC() {
  return getToken(LcypherParser::DESC, 0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_SortItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SortItem;
}


std::any LcypherParser::OC_SortItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SortItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SortItemContext* LcypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 66, LcypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(681);
    oC_Expression();
    setState(686);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      setState(683);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(682);
        match(LcypherParser::SP);
      }
      setState(685);
      _la = _input->LA(1);
      if (!(((((_la - 73) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 73)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_HintContext ------------------------------------------------------------------

LcypherParser::OC_HintContext::OC_HintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_HintContext::USING() {
  return getToken(LcypherParser::USING, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_HintContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_HintContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_HintContext::JOIN() {
  return getToken(LcypherParser::JOIN, 0);
}

tree::TerminalNode* LcypherParser::OC_HintContext::ON() {
  return getToken(LcypherParser::ON, 0);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_HintContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

tree::TerminalNode* LcypherParser::OC_HintContext::START() {
  return getToken(LcypherParser::START, 0);
}


size_t LcypherParser::OC_HintContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Hint;
}


std::any LcypherParser::OC_HintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Hint(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_HintContext* LcypherParser::oC_Hint() {
  OC_HintContext *_localctx = _tracker.createInstance<OC_HintContext>(_ctx, getState());
  enterRule(_localctx, 68, LcypherParser::RuleOC_Hint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(702);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(688);
      match(LcypherParser::USING);
      setState(689);
      match(LcypherParser::SP);
      setState(690);
      match(LcypherParser::JOIN);
      setState(691);
      match(LcypherParser::SP);
      setState(692);
      match(LcypherParser::ON);
      setState(693);
      match(LcypherParser::SP);
      setState(694);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(695);
      match(LcypherParser::USING);
      setState(696);
      match(LcypherParser::SP);
      setState(697);
      match(LcypherParser::START);
      setState(698);
      match(LcypherParser::SP);
      setState(699);
      match(LcypherParser::ON);
      setState(700);
      match(LcypherParser::SP);
      setState(701);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

LcypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_WhereContext::WHERE() {
  return getToken(LcypherParser::WHERE, 0);
}

tree::TerminalNode* LcypherParser::OC_WhereContext::SP() {
  return getToken(LcypherParser::SP, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_WhereContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Where;
}


std::any LcypherParser::OC_WhereContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Where(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_WhereContext* LcypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 70, LcypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(704);
    match(LcypherParser::WHERE);
    setState(705);
    match(LcypherParser::SP);
    setState(706);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

LcypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_PatternPartContext *> LcypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<LcypherParser::OC_PatternPartContext>();
}

LcypherParser::OC_PatternPartContext* LcypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<LcypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PatternContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PatternContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Pattern;
}


std::any LcypherParser::OC_PatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Pattern(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternContext* LcypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 72, LcypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(708);
    oC_PatternPart();
    setState(719);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(710);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(709);
          match(LcypherParser::SP);
        }
        setState(712);
        match(LcypherParser::T__1);
        setState(714);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(713);
          match(LcypherParser::SP);
        }
        setState(716);
        oC_PatternPart(); 
      }
      setState(721);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

LcypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_VariableContext* LcypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_AnonymousPatternPartContext* LcypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<LcypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PatternPartContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PatternPartContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PatternPart;
}


std::any LcypherParser::OC_PatternPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternPart(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternPartContext* LcypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 74, LcypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(733);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(722);
        oC_Variable();
        setState(724);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(723);
          match(LcypherParser::SP);
        }
        setState(726);
        match(LcypherParser::T__2);
        setState(728);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(727);
          match(LcypherParser::SP);
        }
        setState(730);
        oC_AnonymousPatternPart();
        break;
      }

      case LcypherParser::T__5: {
        enterOuterAlt(_localctx, 2);
        setState(732);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

LcypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PatternElementContext* LcypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<LcypherParser::OC_PatternElementContext>(0);
}


size_t LcypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return LcypherParser::RuleOC_AnonymousPatternPart;
}


std::any LcypherParser::OC_AnonymousPatternPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_AnonymousPatternPart(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_AnonymousPatternPartContext* LcypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 76, LcypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(735);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

LcypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NodePatternContext* LcypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<LcypherParser::OC_NodePatternContext>(0);
}

std::vector<LcypherParser::OC_PatternElementChainContext *> LcypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<LcypherParser::OC_PatternElementChainContext>();
}

LcypherParser::OC_PatternElementChainContext* LcypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<LcypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PatternElementContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_PatternElementContext* LcypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<LcypherParser::OC_PatternElementContext>(0);
}


size_t LcypherParser::OC_PatternElementContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PatternElement;
}


std::any LcypherParser::OC_PatternElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternElement(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternElementContext* LcypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 78, LcypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(751);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(737);
      oC_NodePattern();
      setState(744);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(739);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(738);
            match(LcypherParser::SP);
          }
          setState(741);
          oC_PatternElementChain(); 
        }
        setState(746);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(747);
      match(LcypherParser::T__5);
      setState(748);
      oC_PatternElement();
      setState(749);
      match(LcypherParser::T__6);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

LcypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NodePatternContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<LcypherParser::OC_NodeLabelsContext>(0);
}

LcypherParser::OC_PropertiesContext* LcypherParser::OC_NodePatternContext::oC_Properties() {
  return getRuleContext<LcypherParser::OC_PropertiesContext>(0);
}


size_t LcypherParser::OC_NodePatternContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NodePattern;
}


std::any LcypherParser::OC_NodePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NodePattern(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NodePatternContext* LcypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 80, LcypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(753);
    match(LcypherParser::T__5);
    setState(755);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(754);
      match(LcypherParser::SP);
    }
    setState(761);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 93) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 93)) & 2199493148687) != 0)) {
      setState(757);
      oC_Variable();
      setState(759);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(758);
        match(LcypherParser::SP);
      }
    }
    setState(767);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__9) {
      setState(763);
      oC_NodeLabels();
      setState(765);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(764);
        match(LcypherParser::SP);
      }
    }
    setState(773);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__23

    || _la == LcypherParser::T__25) {
      setState(769);
      oC_Properties();
      setState(771);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(770);
        match(LcypherParser::SP);
      }
    }
    setState(775);
    match(LcypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

LcypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_RelationshipPatternContext* LcypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<LcypherParser::OC_RelationshipPatternContext>(0);
}

LcypherParser::OC_NodePatternContext* LcypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<LcypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* LcypherParser::OC_PatternElementChainContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PatternElementChain;
}


std::any LcypherParser::OC_PatternElementChainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternElementChain(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternElementChainContext* LcypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 82, LcypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(777);
    oC_RelationshipPattern();
    setState(779);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(778);
      match(LcypherParser::SP);
    }
    setState(781);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

LcypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_LeftArrowHeadContext* LcypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<LcypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<LcypherParser::OC_DashContext *> LcypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<LcypherParser::OC_DashContext>();
}

LcypherParser::OC_DashContext* LcypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<LcypherParser::OC_DashContext>(i);
}

LcypherParser::OC_RightArrowHeadContext* LcypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<LcypherParser::OC_RightArrowHeadContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_RelationshipDetailContext* LcypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<LcypherParser::OC_RelationshipDetailContext>(0);
}


size_t LcypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelationshipPattern;
}


std::any LcypherParser::OC_RelationshipPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipPattern(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelationshipPatternContext* LcypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 84, LcypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(847);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(783);
      oC_LeftArrowHead();
      setState(785);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(784);
        match(LcypherParser::SP);
      }
      setState(787);
      oC_Dash();
      setState(789);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
      case 1: {
        setState(788);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(792);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::T__7) {
        setState(791);
        oC_RelationshipDetail();
      }
      setState(795);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(794);
        match(LcypherParser::SP);
      }
      setState(797);
      oC_Dash();
      setState(799);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(798);
        match(LcypherParser::SP);
      }
      setState(801);
      oC_RightArrowHead();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(803);
      oC_LeftArrowHead();
      setState(805);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(804);
        match(LcypherParser::SP);
      }
      setState(807);
      oC_Dash();
      setState(809);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
      case 1: {
        setState(808);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(812);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::T__7) {
        setState(811);
        oC_RelationshipDetail();
      }
      setState(815);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(814);
        match(LcypherParser::SP);
      }
      setState(817);
      oC_Dash();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(819);
      oC_Dash();
      setState(821);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
      case 1: {
        setState(820);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(824);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::T__7) {
        setState(823);
        oC_RelationshipDetail();
      }
      setState(827);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(826);
        match(LcypherParser::SP);
      }
      setState(829);
      oC_Dash();
      setState(831);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(830);
        match(LcypherParser::SP);
      }
      setState(833);
      oC_RightArrowHead();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(835);
      oC_Dash();
      setState(837);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
      case 1: {
        setState(836);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(840);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::T__7) {
        setState(839);
        oC_RelationshipDetail();
      }
      setState(843);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(842);
        match(LcypherParser::SP);
      }
      setState(845);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

LcypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_RelationshipTypesContext* LcypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<LcypherParser::OC_RelationshipTypesContext>(0);
}

LcypherParser::OC_RangeLiteralContext* LcypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<LcypherParser::OC_RangeLiteralContext>(0);
}

LcypherParser::OC_PropertiesContext* LcypherParser::OC_RelationshipDetailContext::oC_Properties() {
  return getRuleContext<LcypherParser::OC_PropertiesContext>(0);
}

tree::TerminalNode* LcypherParser::OC_RelationshipDetailContext::NO_DUPLICATE_EDGE() {
  return getToken(LcypherParser::NO_DUPLICATE_EDGE, 0);
}


size_t LcypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelationshipDetail;
}


std::any LcypherParser::OC_RelationshipDetailContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipDetail(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelationshipDetailContext* LcypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 86, LcypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(849);
    match(LcypherParser::T__7);
    setState(851);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
    case 1: {
      setState(850);
      match(LcypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(857);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 93) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 93)) & 2199493148687) != 0)) {
      setState(853);
      oC_Variable();
      setState(855);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
      case 1: {
        setState(854);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
    }
    setState(863);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__9) {
      setState(859);
      oC_RelationshipTypes();
      setState(861);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
      case 1: {
        setState(860);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
    }
    setState(866);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__4) {
      setState(865);
      oC_RangeLiteral();
    }
    setState(872);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__23

    || _la == LcypherParser::T__25) {
      setState(868);
      oC_Properties();
      setState(870);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
      case 1: {
        setState(869);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
    }
    setState(881);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::NO_DUPLICATE_EDGE

    || _la == LcypherParser::SP) {
      setState(875);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(874);
        match(LcypherParser::SP);
      }
      setState(877);
      match(LcypherParser::NO_DUPLICATE_EDGE);
      setState(879);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(878);
        match(LcypherParser::SP);
      }
    }
    setState(883);
    match(LcypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertiesContext ------------------------------------------------------------------

LcypherParser::OC_PropertiesContext::OC_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_MapLiteralContext* LcypherParser::OC_PropertiesContext::oC_MapLiteral() {
  return getRuleContext<LcypherParser::OC_MapLiteralContext>(0);
}

LcypherParser::OC_ParameterContext* LcypherParser::OC_PropertiesContext::oC_Parameter() {
  return getRuleContext<LcypherParser::OC_ParameterContext>(0);
}


size_t LcypherParser::OC_PropertiesContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Properties;
}


std::any LcypherParser::OC_PropertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Properties(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertiesContext* LcypherParser::oC_Properties() {
  OC_PropertiesContext *_localctx = _tracker.createInstance<OC_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 88, LcypherParser::RuleOC_Properties);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(887);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::T__23: {
        enterOuterAlt(_localctx, 1);
        setState(885);
        oC_MapLiteral();
        break;
      }

      case LcypherParser::T__25: {
        enterOuterAlt(_localctx, 2);
        setState(886);
        oC_Parameter();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

LcypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_RelTypeNameContext *> LcypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<LcypherParser::OC_RelTypeNameContext>();
}

LcypherParser::OC_RelTypeNameContext* LcypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<LcypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelationshipTypes;
}


std::any LcypherParser::OC_RelationshipTypesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipTypes(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelationshipTypesContext* LcypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 90, LcypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(889);
    match(LcypherParser::T__9);
    setState(891);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(890);
      match(LcypherParser::SP);
    }
    setState(893);
    oC_RelTypeName();
    setState(907);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(895);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(894);
          match(LcypherParser::SP);
        }
        setState(897);
        match(LcypherParser::T__10);
        setState(899);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::T__9) {
          setState(898);
          match(LcypherParser::T__9);
        }
        setState(902);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(901);
          match(LcypherParser::SP);
        }
        setState(904);
        oC_RelTypeName(); 
      }
      setState(909);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

LcypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_NodeLabelContext *> LcypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<LcypherParser::OC_NodeLabelContext>();
}

LcypherParser::OC_NodeLabelContext* LcypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<LcypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NodeLabels;
}


std::any LcypherParser::OC_NodeLabelsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NodeLabels(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 92, LcypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(910);
    oC_NodeLabel();
    setState(917);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(912);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(911);
          match(LcypherParser::SP);
        }
        setState(914);
        oC_NodeLabel(); 
      }
      setState(919);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

LcypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_LabelNameContext* LcypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<LcypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_NodeLabelContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NodeLabel;
}


std::any LcypherParser::OC_NodeLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NodeLabel(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NodeLabelContext* LcypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
  enterRule(_localctx, 94, LcypherParser::RuleOC_NodeLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(920);
    match(LcypherParser::T__9);
    setState(922);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(921);
      match(LcypherParser::SP);
    }
    setState(924);
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

LcypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_IntegerLiteralContext *> LcypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContexts<LcypherParser::OC_IntegerLiteralContext>();
}

LcypherParser::OC_IntegerLiteralContext* LcypherParser::OC_RangeLiteralContext::oC_IntegerLiteral(size_t i) {
  return getRuleContext<LcypherParser::OC_IntegerLiteralContext>(i);
}


size_t LcypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RangeLiteral;
}


std::any LcypherParser::OC_RangeLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RangeLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RangeLiteralContext* LcypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 96, LcypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(926);
    match(LcypherParser::T__4);
    setState(928);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      setState(927);
      match(LcypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(934);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 107) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 107)) & 7) != 0)) {
      setState(930);
      oC_IntegerLiteral();
      setState(932);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
      case 1: {
        setState(931);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
    }
    setState(946);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__11) {
      setState(936);
      match(LcypherParser::T__11);
      setState(938);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
      case 1: {
        setState(937);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(944);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 107) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 107)) & 7) != 0)) {
        setState(940);
        oC_IntegerLiteral();
        setState(942);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
        case 1: {
          setState(941);
          match(LcypherParser::SP);
          break;
        }

        default:
          break;
        }
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

LcypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SchemaNameContext* LcypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<LcypherParser::OC_SchemaNameContext>(0);
}


size_t LcypherParser::OC_LabelNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_LabelName;
}


std::any LcypherParser::OC_LabelNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_LabelName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_LabelNameContext* LcypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 98, LcypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(948);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

LcypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SchemaNameContext* LcypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<LcypherParser::OC_SchemaNameContext>(0);
}


size_t LcypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelTypeName;
}


std::any LcypherParser::OC_RelTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelTypeName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelTypeNameContext* LcypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 100, LcypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(950);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

LcypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_OrExpressionContext* LcypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<LcypherParser::OC_OrExpressionContext>(0);
}


size_t LcypherParser::OC_ExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Expression;
}


std::any LcypherParser::OC_ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Expression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ExpressionContext* LcypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 102, LcypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(952);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

LcypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_XorExpressionContext *> LcypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<LcypherParser::OC_XorExpressionContext>();
}

LcypherParser::OC_XorExpressionContext* LcypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_OrExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_OrExpressionContext::OR() {
  return getTokens(LcypherParser::OR);
}

tree::TerminalNode* LcypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(LcypherParser::OR, i);
}


size_t LcypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_OrExpression;
}


std::any LcypherParser::OC_OrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_OrExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_OrExpressionContext* LcypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 104, LcypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(954);
    oC_XorExpression();
    setState(961);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(955);
        match(LcypherParser::SP);
        setState(956);
        match(LcypherParser::OR);
        setState(957);
        match(LcypherParser::SP);
        setState(958);
        oC_XorExpression(); 
      }
      setState(963);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_AndExpressionContext *> LcypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<LcypherParser::OC_AndExpressionContext>();
}

LcypherParser::OC_AndExpressionContext* LcypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_XorExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(LcypherParser::XOR);
}

tree::TerminalNode* LcypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(LcypherParser::XOR, i);
}


size_t LcypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_XorExpression;
}


std::any LcypherParser::OC_XorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_XorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_XorExpressionContext* LcypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 106, LcypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(964);
    oC_AndExpression();
    setState(971);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(965);
        match(LcypherParser::SP);
        setState(966);
        match(LcypherParser::XOR);
        setState(967);
        match(LcypherParser::SP);
        setState(968);
        oC_AndExpression(); 
      }
      setState(973);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

LcypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_NotExpressionContext *> LcypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<LcypherParser::OC_NotExpressionContext>();
}

LcypherParser::OC_NotExpressionContext* LcypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_AndExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_AndExpressionContext::AND() {
  return getTokens(LcypherParser::AND);
}

tree::TerminalNode* LcypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(LcypherParser::AND, i);
}


size_t LcypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_AndExpression;
}


std::any LcypherParser::OC_AndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_AndExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_AndExpressionContext* LcypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 108, LcypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(974);
    oC_NotExpression();
    setState(981);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(975);
        match(LcypherParser::SP);
        setState(976);
        match(LcypherParser::AND);
        setState(977);
        match(LcypherParser::SP);
        setState(978);
        oC_NotExpression(); 
      }
      setState(983);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

LcypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ComparisonExpressionContext* LcypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<LcypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(LcypherParser::NOT);
}

tree::TerminalNode* LcypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(LcypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NotExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NotExpression;
}


std::any LcypherParser::OC_NotExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NotExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NotExpressionContext* LcypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 110, LcypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(990);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LcypherParser::NOT) {
      setState(984);
      match(LcypherParser::NOT);
      setState(986);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(985);
        match(LcypherParser::SP);
      }
      setState(992);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(993);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

LcypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_AddOrSubtractExpressionContext* LcypherParser::OC_ComparisonExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContext<LcypherParser::OC_AddOrSubtractExpressionContext>(0);
}

std::vector<LcypherParser::OC_PartialComparisonExpressionContext *> LcypherParser::OC_ComparisonExpressionContext::oC_PartialComparisonExpression() {
  return getRuleContexts<LcypherParser::OC_PartialComparisonExpressionContext>();
}

LcypherParser::OC_PartialComparisonExpressionContext* LcypherParser::OC_ComparisonExpressionContext::oC_PartialComparisonExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_PartialComparisonExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ComparisonExpression;
}


std::any LcypherParser::OC_ComparisonExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ComparisonExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ComparisonExpressionContext* LcypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 112, LcypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(995);
    oC_AddOrSubtractExpression();
    setState(1002);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(997);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(996);
          match(LcypherParser::SP);
        }
        setState(999);
        oC_PartialComparisonExpression(); 
      }
      setState(1004);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

LcypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_MultiplyDivideModuloExpressionContext *> LcypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<LcypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

LcypherParser::OC_MultiplyDivideModuloExpressionContext* LcypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_AddOrSubtractExpression;
}


std::any LcypherParser::OC_AddOrSubtractExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_AddOrSubtractExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_AddOrSubtractExpressionContext* LcypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 114, LcypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1005);
    oC_MultiplyDivideModuloExpression();
    setState(1024);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1022);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
        case 1: {
          setState(1007);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1006);
            match(LcypherParser::SP);
          }
          setState(1009);
          match(LcypherParser::T__12);
          setState(1011);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1010);
            match(LcypherParser::SP);
          }
          setState(1013);
          oC_MultiplyDivideModuloExpression();
          break;
        }

        case 2: {
          setState(1015);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1014);
            match(LcypherParser::SP);
          }
          setState(1017);
          match(LcypherParser::T__13);
          setState(1019);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1018);
            match(LcypherParser::SP);
          }
          setState(1021);
          oC_MultiplyDivideModuloExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(1026);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

LcypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_PowerOfExpressionContext *> LcypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<LcypherParser::OC_PowerOfExpressionContext>();
}

LcypherParser::OC_PowerOfExpressionContext* LcypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_MultiplyDivideModuloExpression;
}


std::any LcypherParser::OC_MultiplyDivideModuloExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_MultiplyDivideModuloExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MultiplyDivideModuloExpressionContext* LcypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 116, LcypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1027);
    oC_PowerOfExpression();
    setState(1054);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1052);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
        case 1: {
          setState(1029);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1028);
            match(LcypherParser::SP);
          }
          setState(1031);
          match(LcypherParser::T__4);
          setState(1033);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1032);
            match(LcypherParser::SP);
          }
          setState(1035);
          oC_PowerOfExpression();
          break;
        }

        case 2: {
          setState(1037);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1036);
            match(LcypherParser::SP);
          }
          setState(1039);
          match(LcypherParser::T__14);
          setState(1041);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1040);
            match(LcypherParser::SP);
          }
          setState(1043);
          oC_PowerOfExpression();
          break;
        }

        case 3: {
          setState(1045);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1044);
            match(LcypherParser::SP);
          }
          setState(1047);
          match(LcypherParser::T__15);
          setState(1049);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1048);
            match(LcypherParser::SP);
          }
          setState(1051);
          oC_PowerOfExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(1056);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

LcypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_UnaryAddOrSubtractExpressionContext *> LcypherParser::OC_PowerOfExpressionContext::oC_UnaryAddOrSubtractExpression() {
  return getRuleContexts<LcypherParser::OC_UnaryAddOrSubtractExpressionContext>();
}

LcypherParser::OC_UnaryAddOrSubtractExpressionContext* LcypherParser::OC_PowerOfExpressionContext::oC_UnaryAddOrSubtractExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_UnaryAddOrSubtractExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PowerOfExpression;
}


std::any LcypherParser::OC_PowerOfExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PowerOfExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PowerOfExpressionContext* LcypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 118, LcypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1057);
    oC_UnaryAddOrSubtractExpression();
    setState(1068);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1059);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1058);
          match(LcypherParser::SP);
        }
        setState(1061);
        match(LcypherParser::T__16);
        setState(1063);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1062);
          match(LcypherParser::SP);
        }
        setState(1065);
        oC_UnaryAddOrSubtractExpression(); 
      }
      setState(1070);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddOrSubtractExpressionContext ------------------------------------------------------------------

LcypherParser::OC_UnaryAddOrSubtractExpressionContext::OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_StringListNullOperatorExpressionContext* LcypherParser::OC_UnaryAddOrSubtractExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<LcypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_UnaryAddOrSubtractExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_UnaryAddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_UnaryAddOrSubtractExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_UnaryAddOrSubtractExpression;
}


std::any LcypherParser::OC_UnaryAddOrSubtractExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_UnaryAddOrSubtractExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_UnaryAddOrSubtractExpressionContext* LcypherParser::oC_UnaryAddOrSubtractExpression() {
  OC_UnaryAddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 120, LcypherParser::RuleOC_UnaryAddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1077);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LcypherParser::T__12

    || _la == LcypherParser::T__13) {
      setState(1071);
      _la = _input->LA(1);
      if (!(_la == LcypherParser::T__12

      || _la == LcypherParser::T__13)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1073);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1072);
        match(LcypherParser::SP);
      }
      setState(1079);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1080);
    oC_StringListNullOperatorExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PropertyOrLabelsExpressionContext* LcypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<LcypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<LcypherParser::OC_StringOperatorExpressionContext *> LcypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContexts<LcypherParser::OC_StringOperatorExpressionContext>();
}

LcypherParser::OC_StringOperatorExpressionContext* LcypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_StringOperatorExpressionContext>(i);
}

std::vector<LcypherParser::OC_ListOperatorExpressionContext *> LcypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<LcypherParser::OC_ListOperatorExpressionContext>();
}

LcypherParser::OC_ListOperatorExpressionContext* LcypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_ListOperatorExpressionContext>(i);
}

std::vector<LcypherParser::OC_NullOperatorExpressionContext *> LcypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContexts<LcypherParser::OC_NullOperatorExpressionContext>();
}

LcypherParser::OC_NullOperatorExpressionContext* LcypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_NullOperatorExpressionContext>(i);
}


size_t LcypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_StringListNullOperatorExpression;
}


std::any LcypherParser::OC_StringListNullOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_StringListNullOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_StringListNullOperatorExpressionContext* LcypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 122, LcypherParser::RuleOC_StringListNullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1082);
    oC_PropertyOrLabelsExpression();
    setState(1088);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1086);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
        case 1: {
          setState(1083);
          oC_StringOperatorExpression();
          break;
        }

        case 2: {
          setState(1084);
          oC_ListOperatorExpression();
          break;
        }

        case 3: {
          setState(1085);
          oC_NullOperatorExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(1090);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(LcypherParser::IN, 0);
}

LcypherParser::OC_PropertyOrLabelsExpressionContext* LcypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<LcypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ListOperatorExpression;
}


std::any LcypherParser::OC_ListOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ListOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ListOperatorExpressionContext* LcypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 124, LcypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1116);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1091);
      match(LcypherParser::SP);
      setState(1092);
      match(LcypherParser::IN);
      setState(1094);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1093);
        match(LcypherParser::SP);
      }
      setState(1096);
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1098);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1097);
        match(LcypherParser::SP);
      }
      setState(1100);
      match(LcypherParser::T__7);
      setState(1101);
      oC_Expression();
      setState(1102);
      match(LcypherParser::T__8);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1105);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1104);
        match(LcypherParser::SP);
      }
      setState(1107);
      match(LcypherParser::T__7);
      setState(1109);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4503599711281472) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 85)) & 563083161436033) != 0)) {
        setState(1108);
        oC_Expression();
      }
      setState(1111);
      match(LcypherParser::T__11);
      setState(1113);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 4503599711281472) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 85)) & 563083161436033) != 0)) {
        setState(1112);
        oC_Expression();
      }
      setState(1115);
      match(LcypherParser::T__8);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PropertyOrLabelsExpressionContext* LcypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<LcypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(LcypherParser::STARTS, 0);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(LcypherParser::WITH, 0);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(LcypherParser::ENDS, 0);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(LcypherParser::CONTAINS, 0);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::REGEXP() {
  return getToken(LcypherParser::REGEXP, 0);
}


size_t LcypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_StringOperatorExpression;
}


std::any LcypherParser::OC_StringOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_StringOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_StringOperatorExpressionContext* LcypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 126, LcypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1130);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      setState(1118);
      match(LcypherParser::SP);
      setState(1119);
      match(LcypherParser::STARTS);
      setState(1120);
      match(LcypherParser::SP);
      setState(1121);
      match(LcypherParser::WITH);
      break;
    }

    case 2: {
      setState(1122);
      match(LcypherParser::SP);
      setState(1123);
      match(LcypherParser::ENDS);
      setState(1124);
      match(LcypherParser::SP);
      setState(1125);
      match(LcypherParser::WITH);
      break;
    }

    case 3: {
      setState(1126);
      match(LcypherParser::SP);
      setState(1127);
      match(LcypherParser::CONTAINS);
      break;
    }

    case 4: {
      setState(1128);
      match(LcypherParser::SP);
      setState(1129);
      match(LcypherParser::REGEXP);
      break;
    }

    default:
      break;
    }
    setState(1133);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1132);
      match(LcypherParser::SP);
    }
    setState(1135);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(LcypherParser::IS, 0);
}

tree::TerminalNode* LcypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(LcypherParser::NULL_, 0);
}

tree::TerminalNode* LcypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(LcypherParser::NOT, 0);
}


size_t LcypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NullOperatorExpression;
}


std::any LcypherParser::OC_NullOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NullOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NullOperatorExpressionContext* LcypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 128, LcypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1147);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1137);
      match(LcypherParser::SP);
      setState(1138);
      match(LcypherParser::IS);
      setState(1139);
      match(LcypherParser::SP);
      setState(1140);
      match(LcypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1141);
      match(LcypherParser::SP);
      setState(1142);
      match(LcypherParser::IS);
      setState(1143);
      match(LcypherParser::SP);
      setState(1144);
      match(LcypherParser::NOT);
      setState(1145);
      match(LcypherParser::SP);
      setState(1146);
      match(LcypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

LcypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_AtomContext* LcypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<LcypherParser::OC_AtomContext>(0);
}

std::vector<LcypherParser::OC_PropertyLookupContext *> LcypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<LcypherParser::OC_PropertyLookupContext>();
}

LcypherParser::OC_PropertyLookupContext* LcypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<LcypherParser::OC_PropertyLookupContext>(i);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::OC_PropertyOrLabelsExpressionContext::oC_NodeLabels() {
  return getRuleContext<LcypherParser::OC_NodeLabelsContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PropertyOrLabelsExpression;
}


std::any LcypherParser::OC_PropertyOrLabelsExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyOrLabelsExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertyOrLabelsExpressionContext* LcypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 130, LcypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1149);
    oC_Atom();
    setState(1156);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1151);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1150);
          match(LcypherParser::SP);
        }
        setState(1153);
        oC_PropertyLookup(); 
      }
      setState(1158);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx);
    }
    setState(1163);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      setState(1160);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1159);
        match(LcypherParser::SP);
      }
      setState(1162);
      oC_NodeLabels();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

LcypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_LiteralContext* LcypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<LcypherParser::OC_LiteralContext>(0);
}

LcypherParser::OC_ParameterContext* LcypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<LcypherParser::OC_ParameterContext>(0);
}

LcypherParser::OC_CaseExpressionContext* LcypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<LcypherParser::OC_CaseExpressionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::COUNT() {
  return getToken(LcypherParser::COUNT, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_AtomContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ListComprehensionContext* LcypherParser::OC_AtomContext::oC_ListComprehension() {
  return getRuleContext<LcypherParser::OC_ListComprehensionContext>(0);
}

LcypherParser::OC_PatternComprehensionContext* LcypherParser::OC_AtomContext::oC_PatternComprehension() {
  return getRuleContext<LcypherParser::OC_PatternComprehensionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::ALL() {
  return getToken(LcypherParser::ALL, 0);
}

LcypherParser::OC_FilterExpressionContext* LcypherParser::OC_AtomContext::oC_FilterExpression() {
  return getRuleContext<LcypherParser::OC_FilterExpressionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::ANY() {
  return getToken(LcypherParser::ANY, 0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::NONE() {
  return getToken(LcypherParser::NONE, 0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::SINGLE() {
  return getToken(LcypherParser::SINGLE, 0);
}

LcypherParser::OC_RelationshipsPatternContext* LcypherParser::OC_AtomContext::oC_RelationshipsPattern() {
  return getRuleContext<LcypherParser::OC_RelationshipsPatternContext>(0);
}

LcypherParser::OC_ParenthesizedExpressionContext* LcypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<LcypherParser::OC_ParenthesizedExpressionContext>(0);
}

LcypherParser::OC_FunctionInvocationContext* LcypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<LcypherParser::OC_FunctionInvocationContext>(0);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}


size_t LcypherParser::OC_AtomContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Atom;
}


std::any LcypherParser::OC_AtomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Atom(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_AtomContext* LcypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 132, LcypherParser::RuleOC_Atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1243);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1165);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1166);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1167);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1168);
      match(LcypherParser::COUNT);
      setState(1170);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1169);
        match(LcypherParser::SP);
      }
      setState(1172);
      match(LcypherParser::T__5);
      setState(1174);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1173);
        match(LcypherParser::SP);
      }
      setState(1176);
      match(LcypherParser::T__4);
      setState(1178);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1177);
        match(LcypherParser::SP);
      }
      setState(1180);
      match(LcypherParser::T__6);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1181);
      oC_ListComprehension();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1182);
      oC_PatternComprehension();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1183);
      match(LcypherParser::ALL);
      setState(1185);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1184);
        match(LcypherParser::SP);
      }
      setState(1187);
      match(LcypherParser::T__5);
      setState(1189);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1188);
        match(LcypherParser::SP);
      }
      setState(1191);
      oC_FilterExpression();
      setState(1193);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1192);
        match(LcypherParser::SP);
      }
      setState(1195);
      match(LcypherParser::T__6);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1197);
      match(LcypherParser::ANY);
      setState(1199);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1198);
        match(LcypherParser::SP);
      }
      setState(1201);
      match(LcypherParser::T__5);
      setState(1203);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1202);
        match(LcypherParser::SP);
      }
      setState(1205);
      oC_FilterExpression();
      setState(1207);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1206);
        match(LcypherParser::SP);
      }
      setState(1209);
      match(LcypherParser::T__6);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1211);
      match(LcypherParser::NONE);
      setState(1213);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1212);
        match(LcypherParser::SP);
      }
      setState(1215);
      match(LcypherParser::T__5);
      setState(1217);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1216);
        match(LcypherParser::SP);
      }
      setState(1219);
      oC_FilterExpression();
      setState(1221);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1220);
        match(LcypherParser::SP);
      }
      setState(1223);
      match(LcypherParser::T__6);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1225);
      match(LcypherParser::SINGLE);
      setState(1227);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1226);
        match(LcypherParser::SP);
      }
      setState(1229);
      match(LcypherParser::T__5);
      setState(1231);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1230);
        match(LcypherParser::SP);
      }
      setState(1233);
      oC_FilterExpression();
      setState(1235);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1234);
        match(LcypherParser::SP);
      }
      setState(1237);
      match(LcypherParser::T__6);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1239);
      oC_RelationshipsPattern();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1240);
      oC_ParenthesizedExpression();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1241);
      oC_FunctionInvocation();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1242);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

LcypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NumberLiteralContext* LcypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<LcypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* LcypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(LcypherParser::StringLiteral, 0);
}

LcypherParser::OC_BooleanLiteralContext* LcypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<LcypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* LcypherParser::OC_LiteralContext::NULL_() {
  return getToken(LcypherParser::NULL_, 0);
}

LcypherParser::OC_MapLiteralContext* LcypherParser::OC_LiteralContext::oC_MapLiteral() {
  return getRuleContext<LcypherParser::OC_MapLiteralContext>(0);
}

LcypherParser::OC_ListLiteralContext* LcypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<LcypherParser::OC_ListLiteralContext>(0);
}


size_t LcypherParser::OC_LiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Literal;
}


std::any LcypherParser::OC_LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Literal(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_LiteralContext* LcypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 134, LcypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1251);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::HexInteger:
      case LcypherParser::DecimalInteger:
      case LcypherParser::OctalInteger:
      case LcypherParser::ExponentDecimalReal:
      case LcypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(1245);
        oC_NumberLiteral();
        break;
      }

      case LcypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(1246);
        match(LcypherParser::StringLiteral);
        break;
      }

      case LcypherParser::TRUE_:
      case LcypherParser::FALSE_: {
        enterOuterAlt(_localctx, 3);
        setState(1247);
        oC_BooleanLiteral();
        break;
      }

      case LcypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(1248);
        match(LcypherParser::NULL_);
        break;
      }

      case LcypherParser::T__23: {
        enterOuterAlt(_localctx, 5);
        setState(1249);
        oC_MapLiteral();
        break;
      }

      case LcypherParser::T__7: {
        enterOuterAlt(_localctx, 6);
        setState(1250);
        oC_ListLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

LcypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_BooleanLiteralContext::TRUE_() {
  return getToken(LcypherParser::TRUE_, 0);
}

tree::TerminalNode* LcypherParser::OC_BooleanLiteralContext::FALSE_() {
  return getToken(LcypherParser::FALSE_, 0);
}


size_t LcypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_BooleanLiteral;
}


std::any LcypherParser::OC_BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_BooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_BooleanLiteralContext* LcypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 136, LcypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1253);
    _la = _input->LA(1);
    if (!(_la == LcypherParser::TRUE_

    || _la == LcypherParser::FALSE_)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

LcypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ListLiteralContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ListLiteralContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ListLiteral;
}


std::any LcypherParser::OC_ListLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ListLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ListLiteralContext* LcypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 138, LcypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1255);
    match(LcypherParser::T__7);
    setState(1257);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1256);
      match(LcypherParser::SP);
    }
    setState(1276);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4503599711281472) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 85)) & 563083161436033) != 0)) {
      setState(1259);
      oC_Expression();
      setState(1261);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1260);
        match(LcypherParser::SP);
      }
      setState(1273);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LcypherParser::T__1) {
        setState(1263);
        match(LcypherParser::T__1);
        setState(1265);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1264);
          match(LcypherParser::SP);
        }
        setState(1267);
        oC_Expression();
        setState(1269);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1268);
          match(LcypherParser::SP);
        }
        setState(1275);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1278);
    match(LcypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PartialComparisonExpressionContext ------------------------------------------------------------------

LcypherParser::OC_PartialComparisonExpressionContext::OC_PartialComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_AddOrSubtractExpressionContext* LcypherParser::OC_PartialComparisonExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContext<LcypherParser::OC_AddOrSubtractExpressionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_PartialComparisonExpressionContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_PartialComparisonExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PartialComparisonExpression;
}


std::any LcypherParser::OC_PartialComparisonExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PartialComparisonExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PartialComparisonExpressionContext* LcypherParser::oC_PartialComparisonExpression() {
  OC_PartialComparisonExpressionContext *_localctx = _tracker.createInstance<OC_PartialComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 140, LcypherParser::RuleOC_PartialComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1310);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::T__2: {
        enterOuterAlt(_localctx, 1);
        setState(1280);
        match(LcypherParser::T__2);
        setState(1282);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1281);
          match(LcypherParser::SP);
        }
        setState(1284);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__17: {
        enterOuterAlt(_localctx, 2);
        setState(1285);
        match(LcypherParser::T__17);
        setState(1287);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1286);
          match(LcypherParser::SP);
        }
        setState(1289);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__18: {
        enterOuterAlt(_localctx, 3);
        setState(1290);
        match(LcypherParser::T__18);
        setState(1292);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1291);
          match(LcypherParser::SP);
        }
        setState(1294);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__19: {
        enterOuterAlt(_localctx, 4);
        setState(1295);
        match(LcypherParser::T__19);
        setState(1297);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1296);
          match(LcypherParser::SP);
        }
        setState(1299);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__20: {
        enterOuterAlt(_localctx, 5);
        setState(1300);
        match(LcypherParser::T__20);
        setState(1302);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1301);
          match(LcypherParser::SP);
        }
        setState(1304);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__21: {
        enterOuterAlt(_localctx, 6);
        setState(1305);
        match(LcypherParser::T__21);
        setState(1307);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1306);
          match(LcypherParser::SP);
        }
        setState(1309);
        oC_AddOrSubtractExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

LcypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ParenthesizedExpression;
}


std::any LcypherParser::OC_ParenthesizedExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ParenthesizedExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ParenthesizedExpressionContext* LcypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 142, LcypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1312);
    match(LcypherParser::T__5);
    setState(1314);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1313);
      match(LcypherParser::SP);
    }
    setState(1316);
    oC_Expression();
    setState(1318);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1317);
      match(LcypherParser::SP);
    }
    setState(1320);
    match(LcypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipsPatternContext ------------------------------------------------------------------

LcypherParser::OC_RelationshipsPatternContext::OC_RelationshipsPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NodePatternContext* LcypherParser::OC_RelationshipsPatternContext::oC_NodePattern() {
  return getRuleContext<LcypherParser::OC_NodePatternContext>(0);
}

std::vector<LcypherParser::OC_PatternElementChainContext *> LcypherParser::OC_RelationshipsPatternContext::oC_PatternElementChain() {
  return getRuleContexts<LcypherParser::OC_PatternElementChainContext>();
}

LcypherParser::OC_PatternElementChainContext* LcypherParser::OC_RelationshipsPatternContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<LcypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RelationshipsPatternContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RelationshipsPatternContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_RelationshipsPatternContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelationshipsPattern;
}


std::any LcypherParser::OC_RelationshipsPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipsPattern(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelationshipsPatternContext* LcypherParser::oC_RelationshipsPattern() {
  OC_RelationshipsPatternContext *_localctx = _tracker.createInstance<OC_RelationshipsPatternContext>(_ctx, getState());
  enterRule(_localctx, 144, LcypherParser::RuleOC_RelationshipsPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1322);
    oC_NodePattern();
    setState(1327); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1324);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == LcypherParser::SP) {
                setState(1323);
                match(LcypherParser::SP);
              }
              setState(1326);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1329); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FilterExpressionContext ------------------------------------------------------------------

LcypherParser::OC_FilterExpressionContext::OC_FilterExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_IdInCollContext* LcypherParser::OC_FilterExpressionContext::oC_IdInColl() {
  return getRuleContext<LcypherParser::OC_IdInCollContext>(0);
}

LcypherParser::OC_WhereContext* LcypherParser::OC_FilterExpressionContext::oC_Where() {
  return getRuleContext<LcypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* LcypherParser::OC_FilterExpressionContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_FilterExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_FilterExpression;
}


std::any LcypherParser::OC_FilterExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_FilterExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_FilterExpressionContext* LcypherParser::oC_FilterExpression() {
  OC_FilterExpressionContext *_localctx = _tracker.createInstance<OC_FilterExpressionContext>(_ctx, getState());
  enterRule(_localctx, 146, LcypherParser::RuleOC_FilterExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1331);
    oC_IdInColl();
    setState(1336);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
    case 1: {
      setState(1333);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1332);
        match(LcypherParser::SP);
      }
      setState(1335);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IdInCollContext ------------------------------------------------------------------

LcypherParser::OC_IdInCollContext::OC_IdInCollContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_VariableContext* LcypherParser::OC_IdInCollContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_IdInCollContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_IdInCollContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_IdInCollContext::IN() {
  return getToken(LcypherParser::IN, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_IdInCollContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_IdInCollContext::getRuleIndex() const {
  return LcypherParser::RuleOC_IdInColl;
}


std::any LcypherParser::OC_IdInCollContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_IdInColl(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_IdInCollContext* LcypherParser::oC_IdInColl() {
  OC_IdInCollContext *_localctx = _tracker.createInstance<OC_IdInCollContext>(_ctx, getState());
  enterRule(_localctx, 148, LcypherParser::RuleOC_IdInColl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1338);
    oC_Variable();
    setState(1339);
    match(LcypherParser::SP);
    setState(1340);
    match(LcypherParser::IN);
    setState(1341);
    match(LcypherParser::SP);
    setState(1342);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

LcypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_FunctionNameContext* LcypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<LcypherParser::OC_FunctionNameContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(LcypherParser::DISTINCT, 0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_FunctionInvocationContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_FunctionInvocationContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return LcypherParser::RuleOC_FunctionInvocation;
}


std::any LcypherParser::OC_FunctionInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_FunctionInvocation(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_FunctionInvocationContext* LcypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 150, LcypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1344);
    oC_FunctionName();
    setState(1346);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1345);
      match(LcypherParser::SP);
    }
    setState(1348);
    match(LcypherParser::T__5);
    setState(1350);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1349);
      match(LcypherParser::SP);
    }
    setState(1356);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::DISTINCT) {
      setState(1352);
      match(LcypherParser::DISTINCT);
      setState(1354);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1353);
        match(LcypherParser::SP);
      }
    }
    setState(1375);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4503599711281472) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 85)) & 563083161436033) != 0)) {
      setState(1358);
      oC_Expression();
      setState(1360);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1359);
        match(LcypherParser::SP);
      }
      setState(1372);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LcypherParser::T__1) {
        setState(1362);
        match(LcypherParser::T__1);
        setState(1364);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1363);
          match(LcypherParser::SP);
        }
        setState(1366);
        oC_Expression();
        setState(1368);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1367);
          match(LcypherParser::SP);
        }
        setState(1374);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1377);
    match(LcypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

LcypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NamespaceContext* LcypherParser::OC_FunctionNameContext::oC_Namespace() {
  return getRuleContext<LcypherParser::OC_NamespaceContext>(0);
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_FunctionNameContext::EXISTS() {
  return getToken(LcypherParser::EXISTS, 0);
}


size_t LcypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_FunctionName;
}


std::any LcypherParser::OC_FunctionNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_FunctionName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_FunctionNameContext* LcypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 152, LcypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1383);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1379);
        oC_Namespace();
        setState(1380);
        oC_SymbolicName();
        break;
      }

      case LcypherParser::EXISTS: {
        enterOuterAlt(_localctx, 2);
        setState(1382);
        match(LcypherParser::EXISTS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplicitProcedureInvocationContext ------------------------------------------------------------------

LcypherParser::OC_ExplicitProcedureInvocationContext::OC_ExplicitProcedureInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ProcedureNameContext* LcypherParser::OC_ExplicitProcedureInvocationContext::oC_ProcedureName() {
  return getRuleContext<LcypherParser::OC_ProcedureNameContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ExplicitProcedureInvocationContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ExplicitProcedureInvocationContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_ExplicitProcedureInvocationContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ExplicitProcedureInvocationContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_ExplicitProcedureInvocationContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ExplicitProcedureInvocation;
}


std::any LcypherParser::OC_ExplicitProcedureInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ExplicitProcedureInvocation(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ExplicitProcedureInvocationContext* LcypherParser::oC_ExplicitProcedureInvocation() {
  OC_ExplicitProcedureInvocationContext *_localctx = _tracker.createInstance<OC_ExplicitProcedureInvocationContext>(_ctx, getState());
  enterRule(_localctx, 154, LcypherParser::RuleOC_ExplicitProcedureInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1385);
    oC_ProcedureName();
    setState(1387);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1386);
      match(LcypherParser::SP);
    }
    setState(1389);
    match(LcypherParser::T__5);
    setState(1391);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1390);
      match(LcypherParser::SP);
    }
    setState(1410);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4503599711281472) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 85)) & 563083161436033) != 0)) {
      setState(1393);
      oC_Expression();
      setState(1395);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1394);
        match(LcypherParser::SP);
      }
      setState(1407);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LcypherParser::T__1) {
        setState(1397);
        match(LcypherParser::T__1);
        setState(1399);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1398);
          match(LcypherParser::SP);
        }
        setState(1401);
        oC_Expression();
        setState(1403);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1402);
          match(LcypherParser::SP);
        }
        setState(1409);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1412);
    match(LcypherParser::T__6);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ImplicitProcedureInvocationContext ------------------------------------------------------------------

LcypherParser::OC_ImplicitProcedureInvocationContext::OC_ImplicitProcedureInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ProcedureNameContext* LcypherParser::OC_ImplicitProcedureInvocationContext::oC_ProcedureName() {
  return getRuleContext<LcypherParser::OC_ProcedureNameContext>(0);
}


size_t LcypherParser::OC_ImplicitProcedureInvocationContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ImplicitProcedureInvocation;
}


std::any LcypherParser::OC_ImplicitProcedureInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ImplicitProcedureInvocation(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ImplicitProcedureInvocationContext* LcypherParser::oC_ImplicitProcedureInvocation() {
  OC_ImplicitProcedureInvocationContext *_localctx = _tracker.createInstance<OC_ImplicitProcedureInvocationContext>(_ctx, getState());
  enterRule(_localctx, 156, LcypherParser::RuleOC_ImplicitProcedureInvocation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1414);
    oC_ProcedureName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProcedureResultFieldContext ------------------------------------------------------------------

LcypherParser::OC_ProcedureResultFieldContext::OC_ProcedureResultFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_ProcedureResultFieldContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}


size_t LcypherParser::OC_ProcedureResultFieldContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ProcedureResultField;
}


std::any LcypherParser::OC_ProcedureResultFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ProcedureResultField(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ProcedureResultFieldContext* LcypherParser::oC_ProcedureResultField() {
  OC_ProcedureResultFieldContext *_localctx = _tracker.createInstance<OC_ProcedureResultFieldContext>(_ctx, getState());
  enterRule(_localctx, 158, LcypherParser::RuleOC_ProcedureResultField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1416);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProcedureNameContext ------------------------------------------------------------------

LcypherParser::OC_ProcedureNameContext::OC_ProcedureNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NamespaceContext* LcypherParser::OC_ProcedureNameContext::oC_Namespace() {
  return getRuleContext<LcypherParser::OC_NamespaceContext>(0);
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_ProcedureNameContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}


size_t LcypherParser::OC_ProcedureNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ProcedureName;
}


std::any LcypherParser::OC_ProcedureNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ProcedureName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ProcedureNameContext* LcypherParser::oC_ProcedureName() {
  OC_ProcedureNameContext *_localctx = _tracker.createInstance<OC_ProcedureNameContext>(_ctx, getState());
  enterRule(_localctx, 160, LcypherParser::RuleOC_ProcedureName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1418);
    oC_Namespace();
    setState(1419);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NamespaceContext ------------------------------------------------------------------

LcypherParser::OC_NamespaceContext::OC_NamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_SymbolicNameContext *> LcypherParser::OC_NamespaceContext::oC_SymbolicName() {
  return getRuleContexts<LcypherParser::OC_SymbolicNameContext>();
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_NamespaceContext::oC_SymbolicName(size_t i) {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(i);
}


size_t LcypherParser::OC_NamespaceContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Namespace;
}


std::any LcypherParser::OC_NamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Namespace(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NamespaceContext* LcypherParser::oC_Namespace() {
  OC_NamespaceContext *_localctx = _tracker.createInstance<OC_NamespaceContext>(_ctx, getState());
  enterRule(_localctx, 162, LcypherParser::RuleOC_Namespace);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1426);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1421);
        oC_SymbolicName();
        setState(1422);
        match(LcypherParser::T__22); 
      }
      setState(1428);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListComprehensionContext ------------------------------------------------------------------

LcypherParser::OC_ListComprehensionContext::OC_ListComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_FilterExpressionContext* LcypherParser::OC_ListComprehensionContext::oC_FilterExpression() {
  return getRuleContext<LcypherParser::OC_FilterExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ListComprehensionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ListComprehensionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ListComprehensionContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_ListComprehensionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ListComprehension;
}


std::any LcypherParser::OC_ListComprehensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ListComprehension(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ListComprehensionContext* LcypherParser::oC_ListComprehension() {
  OC_ListComprehensionContext *_localctx = _tracker.createInstance<OC_ListComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 164, LcypherParser::RuleOC_ListComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1429);
    match(LcypherParser::T__7);
    setState(1431);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1430);
      match(LcypherParser::SP);
    }
    setState(1433);
    oC_FilterExpression();
    setState(1442);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx)) {
    case 1: {
      setState(1435);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1434);
        match(LcypherParser::SP);
      }
      setState(1437);
      match(LcypherParser::T__10);
      setState(1439);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1438);
        match(LcypherParser::SP);
      }
      setState(1441);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(1445);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1444);
      match(LcypherParser::SP);
    }
    setState(1447);
    match(LcypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternComprehensionContext ------------------------------------------------------------------

LcypherParser::OC_PatternComprehensionContext::OC_PatternComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_RelationshipsPatternContext* LcypherParser::OC_PatternComprehensionContext::oC_RelationshipsPattern() {
  return getRuleContext<LcypherParser::OC_RelationshipsPatternContext>(0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_PatternComprehensionContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_PatternComprehensionContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PatternComprehensionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PatternComprehensionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_PatternComprehensionContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

tree::TerminalNode* LcypherParser::OC_PatternComprehensionContext::WHERE() {
  return getToken(LcypherParser::WHERE, 0);
}


size_t LcypherParser::OC_PatternComprehensionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PatternComprehension;
}


std::any LcypherParser::OC_PatternComprehensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternComprehension(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternComprehensionContext* LcypherParser::oC_PatternComprehension() {
  OC_PatternComprehensionContext *_localctx = _tracker.createInstance<OC_PatternComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 166, LcypherParser::RuleOC_PatternComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1449);
    match(LcypherParser::T__7);
    setState(1451);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1450);
      match(LcypherParser::SP);
    }
    setState(1461);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 93) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 93)) & 2199493148687) != 0)) {
      setState(1453);
      oC_Variable();
      setState(1455);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1454);
        match(LcypherParser::SP);
      }
      setState(1457);
      match(LcypherParser::T__2);
      setState(1459);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1458);
        match(LcypherParser::SP);
      }
    }
    setState(1463);
    oC_RelationshipsPattern();
    setState(1465);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1464);
      match(LcypherParser::SP);
    }
    setState(1475);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::WHERE) {
      setState(1467);
      match(LcypherParser::WHERE);
      setState(1469);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1468);
        match(LcypherParser::SP);
      }
      setState(1471);
      oC_Expression();
      setState(1473);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1472);
        match(LcypherParser::SP);
      }
    }
    setState(1477);
    match(LcypherParser::T__10);
    setState(1479);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1478);
      match(LcypherParser::SP);
    }
    setState(1481);
    oC_Expression();
    setState(1483);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1482);
      match(LcypherParser::SP);
    }
    setState(1485);
    match(LcypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

LcypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PropertyKeyNameContext* LcypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<LcypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_PropertyLookupContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PropertyLookup;
}


std::any LcypherParser::OC_PropertyLookupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyLookup(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertyLookupContext* LcypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 168, LcypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1487);
    match(LcypherParser::T__22);
    setState(1489);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1488);
      match(LcypherParser::SP);
    }

    setState(1491);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

LcypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_CaseExpressionContext::END() {
  return getToken(LcypherParser::END, 0);
}

tree::TerminalNode* LcypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(LcypherParser::ELSE, 0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(LcypherParser::CASE, 0);
}

std::vector<LcypherParser::OC_CaseAlternativesContext *> LcypherParser::OC_CaseExpressionContext::oC_CaseAlternatives() {
  return getRuleContexts<LcypherParser::OC_CaseAlternativesContext>();
}

LcypherParser::OC_CaseAlternativesContext* LcypherParser::OC_CaseExpressionContext::oC_CaseAlternatives(size_t i) {
  return getRuleContext<LcypherParser::OC_CaseAlternativesContext>(i);
}


size_t LcypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_CaseExpression;
}


std::any LcypherParser::OC_CaseExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_CaseExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_CaseExpressionContext* LcypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 170, LcypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1515);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx)) {
    case 1: {
      setState(1493);
      match(LcypherParser::CASE);
      setState(1498); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1495);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == LcypherParser::SP) {
                  setState(1494);
                  match(LcypherParser::SP);
                }
                setState(1497);
                oC_CaseAlternatives();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1500); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 273, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(1502);
      match(LcypherParser::CASE);
      setState(1504);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1503);
        match(LcypherParser::SP);
      }
      setState(1506);
      oC_Expression();
      setState(1511); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1508);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == LcypherParser::SP) {
                  setState(1507);
                  match(LcypherParser::SP);
                }
                setState(1510);
                oC_CaseAlternatives();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1513); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(1525);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx)) {
    case 1: {
      setState(1518);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1517);
        match(LcypherParser::SP);
      }
      setState(1520);
      match(LcypherParser::ELSE);
      setState(1522);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1521);
        match(LcypherParser::SP);
      }
      setState(1524);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(1528);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1527);
      match(LcypherParser::SP);
    }
    setState(1530);
    match(LcypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativesContext ------------------------------------------------------------------

LcypherParser::OC_CaseAlternativesContext::OC_CaseAlternativesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_CaseAlternativesContext::WHEN() {
  return getToken(LcypherParser::WHEN, 0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_CaseAlternativesContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_CaseAlternativesContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* LcypherParser::OC_CaseAlternativesContext::THEN() {
  return getToken(LcypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_CaseAlternativesContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_CaseAlternativesContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_CaseAlternativesContext::getRuleIndex() const {
  return LcypherParser::RuleOC_CaseAlternatives;
}


std::any LcypherParser::OC_CaseAlternativesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_CaseAlternatives(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_CaseAlternativesContext* LcypherParser::oC_CaseAlternatives() {
  OC_CaseAlternativesContext *_localctx = _tracker.createInstance<OC_CaseAlternativesContext>(_ctx, getState());
  enterRule(_localctx, 172, LcypherParser::RuleOC_CaseAlternatives);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1532);
    match(LcypherParser::WHEN);
    setState(1534);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1533);
      match(LcypherParser::SP);
    }
    setState(1536);
    oC_Expression();
    setState(1538);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1537);
      match(LcypherParser::SP);
    }
    setState(1540);
    match(LcypherParser::THEN);
    setState(1542);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1541);
      match(LcypherParser::SP);
    }
    setState(1544);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

LcypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}


size_t LcypherParser::OC_VariableContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Variable;
}


std::any LcypherParser::OC_VariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Variable(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_VariableContext* LcypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 174, LcypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1546);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

LcypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_DoubleLiteralContext* LcypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<LcypherParser::OC_DoubleLiteralContext>(0);
}

LcypherParser::OC_IntegerLiteralContext* LcypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<LcypherParser::OC_IntegerLiteralContext>(0);
}


size_t LcypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NumberLiteral;
}


std::any LcypherParser::OC_NumberLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NumberLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NumberLiteralContext* LcypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 176, LcypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1550);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::ExponentDecimalReal:
      case LcypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(1548);
        oC_DoubleLiteral();
        break;
      }

      case LcypherParser::HexInteger:
      case LcypherParser::DecimalInteger:
      case LcypherParser::OctalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(1549);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MapLiteralContext ------------------------------------------------------------------

LcypherParser::OC_MapLiteralContext::OC_MapLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MapLiteralContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MapLiteralContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_PropertyKeyNameContext *> LcypherParser::OC_MapLiteralContext::oC_PropertyKeyName() {
  return getRuleContexts<LcypherParser::OC_PropertyKeyNameContext>();
}

LcypherParser::OC_PropertyKeyNameContext* LcypherParser::OC_MapLiteralContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<LcypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_MapLiteralContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_MapLiteralContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_MapLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_MapLiteral;
}


std::any LcypherParser::OC_MapLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_MapLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MapLiteralContext* LcypherParser::oC_MapLiteral() {
  OC_MapLiteralContext *_localctx = _tracker.createInstance<OC_MapLiteralContext>(_ctx, getState());
  enterRule(_localctx, 178, LcypherParser::RuleOC_MapLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1552);
    match(LcypherParser::T__23);
    setState(1554);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1553);
      match(LcypherParser::SP);
    }
    setState(1589);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 594474599513563135) != 0) || ((((_la - 119) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 119)) & 40959) != 0)) {
      setState(1556);
      oC_PropertyKeyName();
      setState(1558);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1557);
        match(LcypherParser::SP);
      }
      setState(1560);
      match(LcypherParser::T__9);
      setState(1562);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1561);
        match(LcypherParser::SP);
      }
      setState(1564);
      oC_Expression();
      setState(1566);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1565);
        match(LcypherParser::SP);
      }
      setState(1586);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LcypherParser::T__1) {
        setState(1568);
        match(LcypherParser::T__1);
        setState(1570);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1569);
          match(LcypherParser::SP);
        }
        setState(1572);
        oC_PropertyKeyName();
        setState(1574);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1573);
          match(LcypherParser::SP);
        }
        setState(1576);
        match(LcypherParser::T__9);
        setState(1578);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1577);
          match(LcypherParser::SP);
        }
        setState(1580);
        oC_Expression();
        setState(1582);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1581);
          match(LcypherParser::SP);
        }
        setState(1588);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1591);
    match(LcypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

LcypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(LcypherParser::DecimalInteger, 0);
}


size_t LcypherParser::OC_ParameterContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Parameter;
}


std::any LcypherParser::OC_ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Parameter(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ParameterContext* LcypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 180, LcypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1593);
    match(LcypherParser::T__25);
    setState(1596);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        setState(1594);
        oC_SymbolicName();
        break;
      }

      case LcypherParser::DecimalInteger: {
        setState(1595);
        match(LcypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

LcypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_AtomContext* LcypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<LcypherParser::OC_AtomContext>(0);
}

std::vector<LcypherParser::OC_PropertyLookupContext *> LcypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<LcypherParser::OC_PropertyLookupContext>();
}

LcypherParser::OC_PropertyLookupContext* LcypherParser::OC_PropertyExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<LcypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PropertyExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PropertyExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PropertyExpression;
}


std::any LcypherParser::OC_PropertyExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertyExpressionContext* LcypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 182, LcypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1598);
    oC_Atom();
    setState(1603); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1600);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == LcypherParser::SP) {
                setState(1599);
                match(LcypherParser::SP);
              }
              setState(1602);
              oC_PropertyLookup();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1605); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

LcypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SchemaNameContext* LcypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<LcypherParser::OC_SchemaNameContext>(0);
}


size_t LcypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PropertyKeyName;
}


std::any LcypherParser::OC_PropertyKeyNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyKeyName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertyKeyNameContext* LcypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 184, LcypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1607);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

LcypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_IntegerLiteralContext::HexInteger() {
  return getToken(LcypherParser::HexInteger, 0);
}

tree::TerminalNode* LcypherParser::OC_IntegerLiteralContext::OctalInteger() {
  return getToken(LcypherParser::OctalInteger, 0);
}

tree::TerminalNode* LcypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(LcypherParser::DecimalInteger, 0);
}


size_t LcypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_IntegerLiteral;
}


std::any LcypherParser::OC_IntegerLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_IntegerLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_IntegerLiteralContext* LcypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 186, LcypherParser::RuleOC_IntegerLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1609);
    _la = _input->LA(1);
    if (!(((((_la - 107) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 107)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

LcypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_DoubleLiteralContext::ExponentDecimalReal() {
  return getToken(LcypherParser::ExponentDecimalReal, 0);
}

tree::TerminalNode* LcypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(LcypherParser::RegularDecimalReal, 0);
}


size_t LcypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_DoubleLiteral;
}


std::any LcypherParser::OC_DoubleLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_DoubleLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_DoubleLiteralContext* LcypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 188, LcypherParser::RuleOC_DoubleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1611);
    _la = _input->LA(1);
    if (!(_la == LcypherParser::ExponentDecimalReal

    || _la == LcypherParser::RegularDecimalReal)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

LcypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}

LcypherParser::OC_ReservedWordContext* LcypherParser::OC_SchemaNameContext::oC_ReservedWord() {
  return getRuleContext<LcypherParser::OC_ReservedWordContext>(0);
}


size_t LcypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SchemaName;
}


std::any LcypherParser::OC_SchemaNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SchemaName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SchemaNameContext* LcypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 190, LcypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1615);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1613);
        oC_SymbolicName();
        break;
      }

      case LcypherParser::UNION:
      case LcypherParser::ALL:
      case LcypherParser::OPTIONAL_:
      case LcypherParser::MATCH:
      case LcypherParser::UNWIND:
      case LcypherParser::AS:
      case LcypherParser::MERGE:
      case LcypherParser::ON:
      case LcypherParser::CREATE:
      case LcypherParser::SET:
      case LcypherParser::DETACH:
      case LcypherParser::DELETE_:
      case LcypherParser::REMOVE:
      case LcypherParser::WITH:
      case LcypherParser::DISTINCT:
      case LcypherParser::RETURN:
      case LcypherParser::ORDER:
      case LcypherParser::BY:
      case LcypherParser::L_SKIP:
      case LcypherParser::LIMIT:
      case LcypherParser::ASCENDING:
      case LcypherParser::ASC:
      case LcypherParser::DESCENDING:
      case LcypherParser::DESC:
      case LcypherParser::WHERE:
      case LcypherParser::OR:
      case LcypherParser::XOR:
      case LcypherParser::AND:
      case LcypherParser::NOT:
      case LcypherParser::IN:
      case LcypherParser::STARTS:
      case LcypherParser::ENDS:
      case LcypherParser::CONTAINS:
      case LcypherParser::IS:
      case LcypherParser::NULL_:
      case LcypherParser::TRUE_:
      case LcypherParser::FALSE_:
      case LcypherParser::EXISTS:
      case LcypherParser::CASE:
      case LcypherParser::ELSE:
      case LcypherParser::END:
      case LcypherParser::WHEN:
      case LcypherParser::THEN:
      case LcypherParser::CONSTRAINT:
      case LcypherParser::DO:
      case LcypherParser::FOR:
      case LcypherParser::REQUIRE:
      case LcypherParser::UNIQUE:
      case LcypherParser::MANDATORY:
      case LcypherParser::SCALAR:
      case LcypherParser::OF:
      case LcypherParser::ADD:
      case LcypherParser::DROP: {
        enterOuterAlt(_localctx, 2);
        setState(1614);
        oC_ReservedWord();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

LcypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(LcypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(LcypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(LcypherParser::HexLetter, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::COUNT() {
  return getToken(LcypherParser::COUNT, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::FILTER() {
  return getToken(LcypherParser::FILTER, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::EXTRACT() {
  return getToken(LcypherParser::EXTRACT, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::ANY() {
  return getToken(LcypherParser::ANY, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::NONE() {
  return getToken(LcypherParser::NONE, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::SINGLE() {
  return getToken(LcypherParser::SINGLE, 0);
}


size_t LcypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SymbolicName;
}


std::any LcypherParser::OC_SymbolicNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SymbolicName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 192, LcypherParser::RuleOC_SymbolicName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1617);
    _la = _input->LA(1);
    if (!(((((_la - 93) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 93)) & 2199493148687) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReservedWordContext ------------------------------------------------------------------

LcypherParser::OC_ReservedWordContext::OC_ReservedWordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ALL() {
  return getToken(LcypherParser::ALL, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ASC() {
  return getToken(LcypherParser::ASC, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ASCENDING() {
  return getToken(LcypherParser::ASCENDING, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::BY() {
  return getToken(LcypherParser::BY, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::CREATE() {
  return getToken(LcypherParser::CREATE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DELETE_() {
  return getToken(LcypherParser::DELETE_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DESC() {
  return getToken(LcypherParser::DESC, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DESCENDING() {
  return getToken(LcypherParser::DESCENDING, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DETACH() {
  return getToken(LcypherParser::DETACH, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::EXISTS() {
  return getToken(LcypherParser::EXISTS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::LIMIT() {
  return getToken(LcypherParser::LIMIT, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::MATCH() {
  return getToken(LcypherParser::MATCH, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::MERGE() {
  return getToken(LcypherParser::MERGE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ON() {
  return getToken(LcypherParser::ON, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::OPTIONAL_() {
  return getToken(LcypherParser::OPTIONAL_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ORDER() {
  return getToken(LcypherParser::ORDER, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::REMOVE() {
  return getToken(LcypherParser::REMOVE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::RETURN() {
  return getToken(LcypherParser::RETURN, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::SET() {
  return getToken(LcypherParser::SET, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::L_SKIP() {
  return getToken(LcypherParser::L_SKIP, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::WHERE() {
  return getToken(LcypherParser::WHERE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::WITH() {
  return getToken(LcypherParser::WITH, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::UNION() {
  return getToken(LcypherParser::UNION, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::UNWIND() {
  return getToken(LcypherParser::UNWIND, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::AND() {
  return getToken(LcypherParser::AND, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::AS() {
  return getToken(LcypherParser::AS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::CONTAINS() {
  return getToken(LcypherParser::CONTAINS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DISTINCT() {
  return getToken(LcypherParser::DISTINCT, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ENDS() {
  return getToken(LcypherParser::ENDS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::IN() {
  return getToken(LcypherParser::IN, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::IS() {
  return getToken(LcypherParser::IS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::NOT() {
  return getToken(LcypherParser::NOT, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::OR() {
  return getToken(LcypherParser::OR, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::STARTS() {
  return getToken(LcypherParser::STARTS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::XOR() {
  return getToken(LcypherParser::XOR, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::FALSE_() {
  return getToken(LcypherParser::FALSE_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::TRUE_() {
  return getToken(LcypherParser::TRUE_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::NULL_() {
  return getToken(LcypherParser::NULL_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::CONSTRAINT() {
  return getToken(LcypherParser::CONSTRAINT, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DO() {
  return getToken(LcypherParser::DO, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::FOR() {
  return getToken(LcypherParser::FOR, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::REQUIRE() {
  return getToken(LcypherParser::REQUIRE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::UNIQUE() {
  return getToken(LcypherParser::UNIQUE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::CASE() {
  return getToken(LcypherParser::CASE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::WHEN() {
  return getToken(LcypherParser::WHEN, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::THEN() {
  return getToken(LcypherParser::THEN, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ELSE() {
  return getToken(LcypherParser::ELSE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::END() {
  return getToken(LcypherParser::END, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::MANDATORY() {
  return getToken(LcypherParser::MANDATORY, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::SCALAR() {
  return getToken(LcypherParser::SCALAR, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::OF() {
  return getToken(LcypherParser::OF, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ADD() {
  return getToken(LcypherParser::ADD, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DROP() {
  return getToken(LcypherParser::DROP, 0);
}


size_t LcypherParser::OC_ReservedWordContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReservedWord;
}


std::any LcypherParser::OC_ReservedWordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReservedWord(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReservedWordContext* LcypherParser::oC_ReservedWord() {
  OC_ReservedWordContext *_localctx = _tracker.createInstance<OC_ReservedWordContext>(_ctx, getState());
  enterRule(_localctx, 194, LcypherParser::RuleOC_ReservedWord);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1619);
    _la = _input->LA(1);
    if (!(((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 17947876512473087) != 0) || ((((_la - 122) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 122)) & 1023) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

LcypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LcypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return LcypherParser::RuleOC_LeftArrowHead;
}


std::any LcypherParser::OC_LeftArrowHeadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_LeftArrowHead(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_LeftArrowHeadContext* LcypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 196, LcypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1621);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2013790208) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

LcypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LcypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RightArrowHead;
}


std::any LcypherParser::OC_RightArrowHeadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RightArrowHead(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RightArrowHeadContext* LcypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 198, LcypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1623);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 32213303296) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

LcypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LcypherParser::OC_DashContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Dash;
}


std::any LcypherParser::OC_DashContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Dash(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_DashContext* LcypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 200, LcypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1625);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70334384455680) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void LcypherParser::initialize() {
  ::antlr4::internal::call_once(lcypherParserOnceFlag, lcypherParserInitialize);
}
