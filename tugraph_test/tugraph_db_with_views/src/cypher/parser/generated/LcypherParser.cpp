
// Generated from /home2/xcj/tugraph-2024-04-11/tugraph-db-master/src/cypher/grammar/../../..//src/cypher/grammar/Lcypher.g4 by ANTLR 4.12.0


#include "LcypherVisitor.h"

#include "LcypherParser.h"


using namespace antlrcpp;
using namespace parser;

using namespace antlr4;

namespace {

struct LcypherParserStaticData final {
  LcypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  LcypherParserStaticData(const LcypherParserStaticData&) = delete;
  LcypherParserStaticData(LcypherParserStaticData&&) = delete;
  LcypherParserStaticData& operator=(const LcypherParserStaticData&) = delete;
  LcypherParserStaticData& operator=(LcypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag lcypherParserOnceFlag;
LcypherParserStaticData *lcypherParserStaticData = nullptr;

void lcypherParserInitialize() {
  assert(lcypherParserStaticData == nullptr);
  auto staticData = std::make_unique<LcypherParserStaticData>(
    std::vector<std::string>{
      "oC_Cypher", "oC_Statement", "oC_Query", "oC_View", "oC_Construct", 
      "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
      "oC_MultiPartQuery", "oC_UpdatingClause", "oC_ReadingClause", "oC_Match", 
      "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", "oC_Set", 
      "oC_SetItem", "oC_Delete", "oC_Remove", "oC_RemoveItem", "oC_InQueryCall", 
      "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem", "oC_With", "oC_Return", 
      "oC_ReturnBody", "oC_ReturnItems", "oC_ReturnItem", "oC_Order", "oC_Skip", 
      "oC_Limit", "oC_SortItem", "oC_Hint", "oC_Where", "oC_Pattern", "oC_PatternPart", 
      "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern", 
      "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", 
      "oC_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
      "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", "oC_Expression", 
      "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
      "oC_ComparisonExpression", "oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression", 
      "oC_PowerOfExpression", "oC_UnaryAddOrSubtractExpression", "oC_StringListNullOperatorExpression", 
      "oC_ListOperatorExpression", "oC_StringOperatorExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral", 
      "oC_ListLiteral", "oC_PartialComparisonExpression", "oC_ParenthesizedExpression", 
      "oC_RelationshipsPattern", "oC_FilterExpression", "oC_IdInColl", "oC_FunctionInvocation", 
      "oC_FunctionName", "oC_ExplicitProcedureInvocation", "oC_ImplicitProcedureInvocation", 
      "oC_ProcedureResultField", "oC_ProcedureName", "oC_Namespace", "oC_ListComprehension", 
      "oC_PatternComprehension", "oC_PropertyLookup", "oC_CaseExpression", 
      "oC_CaseAlternatives", "oC_Variable", "oC_NumberLiteral", "oC_MapLiteral", 
      "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", "oC_IntegerLiteral", 
      "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", "oC_ReservedWord", 
      "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "')'", "','", "'='", "'+='", "'*'", "'['", "']'", 
      "':'", "'|'", "'..'", "'+'", "'-'", "'/'", "'%'", "'^'", "'<>'", "'<'", 
      "'>'", "'<='", "'>='", "'.'", "'{'", "'}'", "'$'", "'\\u27E8'", "'\\u3008'", 
      "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", "'\\uFF1E'", 
      "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
      "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "EXPLAIN", "PROFILE", 
      "OPTIMIZE", "MAINTENANCE", "VIEW", "CONSTRUCT", "UNION", "ALL", "OPTIONAL_", 
      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", "SET", "DETACH", 
      "DELETE_", "REMOVE", "CALL", "YIELD", "WITH", "DISTINCT", "RETURN", 
      "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", 
      "DESC", "USING", "JOIN", "START", "WHERE", "NO_DUPLICATE_EDGE", "OR", 
      "XOR", "AND", "NOT", "IN", "STARTS", "ENDS", "CONTAINS", "REGEXP", 
      "IS", "NULL_", "COUNT", "ANY", "NONE", "SINGLE", "TRUE_", "FALSE_", 
      "EXISTS", "CASE", "ELSE", "END", "WHEN", "THEN", "StringLiteral", 
      "EscapedChar", "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", 
      "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit", 
      "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "FILTER", 
      "EXTRACT", "UnescapedSymbolicName", "CONSTRAINT", "DO", "FOR", "REQUIRE", 
      "UNIQUE", "MANDATORY", "SCALAR", "OF", "ADD", "DROP", "IdentifierStart", 
      "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,138,1648,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,1,0,3,0,206,8,0,1,0,1,0,3,0,210,
  	8,0,1,0,3,0,213,8,0,1,0,3,0,216,8,0,1,0,1,0,1,1,1,1,1,1,3,1,223,8,1,1,
  	1,1,1,1,1,3,1,228,8,1,1,1,1,1,1,1,3,1,233,8,1,1,1,1,1,1,1,3,1,238,8,1,
  	1,1,1,1,3,1,242,8,1,1,2,1,2,3,2,246,8,2,1,3,1,3,3,3,250,8,3,1,3,1,3,3,
  	3,254,8,3,1,3,1,3,3,3,258,8,3,1,3,1,3,3,3,262,8,3,1,3,1,3,3,3,266,8,3,
  	1,3,1,3,3,3,270,8,3,1,3,1,3,3,3,274,8,3,1,3,1,3,1,4,1,4,3,4,280,8,4,1,
  	4,1,4,1,5,1,5,3,5,286,8,5,1,5,5,5,289,8,5,10,5,12,5,292,9,5,1,6,1,6,1,
  	6,1,6,3,6,298,8,6,1,6,1,6,1,6,3,6,303,8,6,1,6,3,6,306,8,6,1,7,1,7,3,7,
  	310,8,7,1,8,1,8,3,8,314,8,8,5,8,316,8,8,10,8,12,8,319,9,8,1,8,1,8,1,8,
  	3,8,324,8,8,5,8,326,8,8,10,8,12,8,329,9,8,1,8,1,8,3,8,333,8,8,1,8,5,8,
  	336,8,8,10,8,12,8,339,9,8,1,8,3,8,342,8,8,1,8,3,8,345,8,8,3,8,347,8,8,
  	1,9,1,9,3,9,351,8,9,5,9,353,8,9,10,9,12,9,356,9,9,1,9,1,9,3,9,360,8,9,
  	5,9,362,8,9,10,9,12,9,365,9,9,1,9,1,9,3,9,369,8,9,4,9,371,8,9,11,9,12,
  	9,372,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,382,8,10,1,11,1,11,1,11,3,
  	11,387,8,11,1,12,1,12,3,12,391,8,12,1,12,1,12,3,12,395,8,12,1,12,1,12,
  	3,12,399,8,12,1,12,5,12,402,8,12,10,12,12,12,405,9,12,1,12,3,12,408,8,
  	12,1,12,3,12,411,8,12,1,13,1,13,3,13,415,8,13,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,14,1,14,3,14,425,8,14,1,14,1,14,1,14,5,14,430,8,14,10,14,12,14,
  	433,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,445,8,
  	15,1,16,1,16,3,16,449,8,16,1,16,1,16,1,17,1,17,3,17,455,8,17,1,17,1,17,
  	1,17,5,17,460,8,17,10,17,12,17,463,9,17,1,18,1,18,3,18,467,8,18,1,18,
  	1,18,3,18,471,8,18,1,18,1,18,1,18,1,18,3,18,477,8,18,1,18,1,18,3,18,481,
  	8,18,1,18,1,18,1,18,1,18,3,18,487,8,18,1,18,1,18,3,18,491,8,18,1,18,1,
  	18,1,18,1,18,3,18,497,8,18,1,18,1,18,3,18,501,8,18,1,19,1,19,3,19,505,
  	8,19,1,19,1,19,3,19,509,8,19,1,19,1,19,3,19,513,8,19,1,19,1,19,3,19,517,
  	8,19,1,19,5,19,520,8,19,10,19,12,19,523,9,19,1,20,1,20,1,20,1,20,3,20,
  	529,8,20,1,20,1,20,3,20,533,8,20,1,20,5,20,536,8,20,10,20,12,20,539,9,
  	20,1,21,1,21,1,21,1,21,3,21,545,8,21,1,22,1,22,1,22,1,22,3,22,551,8,22,
  	1,22,1,22,1,22,3,22,556,8,22,1,23,1,23,1,23,1,23,3,23,562,8,23,1,23,1,
  	23,1,23,1,23,3,23,568,8,23,1,24,1,24,1,24,3,24,573,8,24,1,24,1,24,3,24,
  	577,8,24,1,24,5,24,580,8,24,10,24,12,24,583,9,24,3,24,585,8,24,1,24,3,
  	24,588,8,24,1,24,3,24,591,8,24,1,25,1,25,1,25,1,25,1,25,3,25,598,8,25,
  	1,25,1,25,1,26,1,26,3,26,604,8,26,1,26,3,26,607,8,26,1,26,1,26,1,26,3,
  	26,612,8,26,1,26,3,26,615,8,26,1,27,1,27,3,27,619,8,27,1,27,3,27,622,
  	8,27,1,27,1,27,1,27,1,28,1,28,1,28,3,28,630,8,28,1,28,1,28,3,28,634,8,
  	28,1,28,1,28,3,28,638,8,28,1,29,1,29,3,29,642,8,29,1,29,1,29,3,29,646,
  	8,29,1,29,5,29,649,8,29,10,29,12,29,652,9,29,1,29,1,29,3,29,656,8,29,
  	1,29,1,29,3,29,660,8,29,1,29,5,29,663,8,29,10,29,12,29,666,9,29,3,29,
  	668,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,677,8,30,1,31,1,31,1,
  	31,1,31,1,31,1,31,1,31,3,31,686,8,31,1,31,5,31,689,8,31,10,31,12,31,692,
  	9,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,3,34,704,8,34,
  	1,34,3,34,707,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,1,35,1,35,3,35,723,8,35,1,36,1,36,1,36,1,36,1,37,1,37,3,37,
  	731,8,37,1,37,1,37,3,37,735,8,37,1,37,5,37,738,8,37,10,37,12,37,741,9,
  	37,1,38,1,38,3,38,745,8,38,1,38,1,38,3,38,749,8,38,1,38,1,38,1,38,3,38,
  	754,8,38,1,39,1,39,1,40,1,40,3,40,760,8,40,1,40,5,40,763,8,40,10,40,12,
  	40,766,9,40,1,40,1,40,1,40,1,40,3,40,772,8,40,1,41,1,41,3,41,776,8,41,
  	1,41,1,41,3,41,780,8,41,3,41,782,8,41,1,41,1,41,3,41,786,8,41,3,41,788,
  	8,41,1,41,1,41,3,41,792,8,41,3,41,794,8,41,1,41,1,41,1,42,1,42,3,42,800,
  	8,42,1,42,1,42,1,43,1,43,3,43,806,8,43,1,43,1,43,3,43,810,8,43,1,43,3,
  	43,813,8,43,1,43,3,43,816,8,43,1,43,1,43,3,43,820,8,43,1,43,1,43,1,43,
  	1,43,3,43,826,8,43,1,43,1,43,3,43,830,8,43,1,43,3,43,833,8,43,1,43,3,
  	43,836,8,43,1,43,1,43,1,43,1,43,3,43,842,8,43,1,43,3,43,845,8,43,1,43,
  	3,43,848,8,43,1,43,1,43,3,43,852,8,43,1,43,1,43,1,43,1,43,3,43,858,8,
  	43,1,43,3,43,861,8,43,1,43,3,43,864,8,43,1,43,1,43,3,43,868,8,43,1,44,
  	1,44,3,44,872,8,44,1,44,1,44,3,44,876,8,44,3,44,878,8,44,1,44,1,44,3,
  	44,882,8,44,3,44,884,8,44,1,44,3,44,887,8,44,1,44,1,44,3,44,891,8,44,
  	3,44,893,8,44,1,44,3,44,896,8,44,1,44,1,44,3,44,900,8,44,3,44,902,8,44,
  	1,44,1,44,1,45,1,45,3,45,908,8,45,1,46,1,46,3,46,912,8,46,1,46,1,46,3,
  	46,916,8,46,1,46,1,46,3,46,920,8,46,1,46,3,46,923,8,46,1,46,5,46,926,
  	8,46,10,46,12,46,929,9,46,1,47,1,47,3,47,933,8,47,1,47,5,47,936,8,47,
  	10,47,12,47,939,9,47,1,48,1,48,3,48,943,8,48,1,48,1,48,1,49,1,49,3,49,
  	949,8,49,1,49,1,49,3,49,953,8,49,3,49,955,8,49,1,49,1,49,3,49,959,8,49,
  	1,49,1,49,3,49,963,8,49,3,49,965,8,49,3,49,967,8,49,1,50,1,50,1,51,1,
  	51,1,52,1,52,1,53,1,53,1,53,1,53,1,53,5,53,980,8,53,10,53,12,53,983,9,
  	53,1,54,1,54,1,54,1,54,1,54,5,54,990,8,54,10,54,12,54,993,9,54,1,55,1,
  	55,1,55,1,55,1,55,5,55,1000,8,55,10,55,12,55,1003,9,55,1,56,1,56,3,56,
  	1007,8,56,5,56,1009,8,56,10,56,12,56,1012,9,56,1,56,1,56,1,57,1,57,3,
  	57,1018,8,57,1,57,5,57,1021,8,57,10,57,12,57,1024,9,57,1,58,1,58,3,58,
  	1028,8,58,1,58,1,58,3,58,1032,8,58,1,58,1,58,3,58,1036,8,58,1,58,1,58,
  	3,58,1040,8,58,1,58,5,58,1043,8,58,10,58,12,58,1046,9,58,1,59,1,59,3,
  	59,1050,8,59,1,59,1,59,3,59,1054,8,59,1,59,1,59,3,59,1058,8,59,1,59,1,
  	59,3,59,1062,8,59,1,59,1,59,3,59,1066,8,59,1,59,1,59,3,59,1070,8,59,1,
  	59,5,59,1073,8,59,10,59,12,59,1076,9,59,1,60,1,60,3,60,1080,8,60,1,60,
  	1,60,3,60,1084,8,60,1,60,5,60,1087,8,60,10,60,12,60,1090,9,60,1,61,1,
  	61,3,61,1094,8,61,5,61,1096,8,61,10,61,12,61,1099,9,61,1,61,1,61,1,62,
  	1,62,1,62,1,62,5,62,1107,8,62,10,62,12,62,1110,9,62,1,63,1,63,1,63,3,
  	63,1115,8,63,1,63,1,63,3,63,1119,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1126,
  	8,63,1,63,1,63,3,63,1130,8,63,1,63,1,63,3,63,1134,8,63,1,63,3,63,1137,
  	8,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,
  	1151,8,64,1,64,3,64,1154,8,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,
  	1,65,1,65,1,65,1,65,3,65,1168,8,65,1,66,1,66,3,66,1172,8,66,1,66,5,66,
  	1175,8,66,10,66,12,66,1178,9,66,1,66,3,66,1181,8,66,1,66,3,66,1184,8,
  	66,1,67,1,67,1,67,1,67,1,67,3,67,1191,8,67,1,67,1,67,3,67,1195,8,67,1,
  	67,1,67,3,67,1199,8,67,1,67,1,67,1,67,1,67,1,67,3,67,1206,8,67,1,67,1,
  	67,3,67,1210,8,67,1,67,1,67,3,67,1214,8,67,1,67,1,67,1,67,1,67,3,67,1220,
  	8,67,1,67,1,67,3,67,1224,8,67,1,67,1,67,3,67,1228,8,67,1,67,1,67,1,67,
  	1,67,3,67,1234,8,67,1,67,1,67,3,67,1238,8,67,1,67,1,67,3,67,1242,8,67,
  	1,67,1,67,1,67,1,67,3,67,1248,8,67,1,67,1,67,3,67,1252,8,67,1,67,1,67,
  	3,67,1256,8,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1264,8,67,1,68,1,68,
  	1,68,1,68,1,68,1,68,3,68,1272,8,68,1,69,1,69,1,70,1,70,3,70,1278,8,70,
  	1,70,1,70,3,70,1282,8,70,1,70,1,70,3,70,1286,8,70,1,70,1,70,3,70,1290,
  	8,70,5,70,1292,8,70,10,70,12,70,1295,9,70,3,70,1297,8,70,1,70,1,70,1,
  	71,1,71,3,71,1303,8,71,1,71,1,71,1,71,3,71,1308,8,71,1,71,1,71,1,71,3,
  	71,1313,8,71,1,71,1,71,1,71,3,71,1318,8,71,1,71,1,71,1,71,3,71,1323,8,
  	71,1,71,1,71,1,71,3,71,1328,8,71,1,71,3,71,1331,8,71,1,72,1,72,3,72,1335,
  	8,72,1,72,1,72,3,72,1339,8,72,1,72,1,72,1,73,1,73,3,73,1345,8,73,1,73,
  	4,73,1348,8,73,11,73,12,73,1349,1,74,1,74,3,74,1354,8,74,1,74,3,74,1357,
  	8,74,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,3,76,1367,8,76,1,76,1,76,
  	3,76,1371,8,76,1,76,1,76,3,76,1375,8,76,3,76,1377,8,76,1,76,1,76,3,76,
  	1381,8,76,1,76,1,76,3,76,1385,8,76,1,76,1,76,3,76,1389,8,76,5,76,1391,
  	8,76,10,76,12,76,1394,9,76,3,76,1396,8,76,1,76,1,76,1,77,1,77,1,77,1,
  	77,3,77,1404,8,77,1,78,1,78,3,78,1408,8,78,1,78,1,78,3,78,1412,8,78,1,
  	78,1,78,3,78,1416,8,78,1,78,1,78,3,78,1420,8,78,1,78,1,78,3,78,1424,8,
  	78,5,78,1426,8,78,10,78,12,78,1429,9,78,3,78,1431,8,78,1,78,1,78,1,79,
  	1,79,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,82,5,82,1445,8,82,10,82,12,
  	82,1448,9,82,1,83,1,83,3,83,1452,8,83,1,83,1,83,3,83,1456,8,83,1,83,1,
  	83,3,83,1460,8,83,1,83,3,83,1463,8,83,1,83,3,83,1466,8,83,1,83,1,83,1,
  	84,1,84,3,84,1472,8,84,1,84,1,84,3,84,1476,8,84,1,84,1,84,3,84,1480,8,
  	84,3,84,1482,8,84,1,84,1,84,3,84,1486,8,84,1,84,1,84,3,84,1490,8,84,1,
  	84,1,84,3,84,1494,8,84,3,84,1496,8,84,1,84,1,84,3,84,1500,8,84,1,84,1,
  	84,3,84,1504,8,84,1,84,1,84,1,85,1,85,3,85,1510,8,85,1,85,1,85,1,86,1,
  	86,3,86,1516,8,86,1,86,4,86,1519,8,86,11,86,12,86,1520,1,86,1,86,3,86,
  	1525,8,86,1,86,1,86,3,86,1529,8,86,1,86,4,86,1532,8,86,11,86,12,86,1533,
  	3,86,1536,8,86,1,86,3,86,1539,8,86,1,86,1,86,3,86,1543,8,86,1,86,3,86,
  	1546,8,86,1,86,3,86,1549,8,86,1,86,1,86,1,87,1,87,3,87,1555,8,87,1,87,
  	1,87,3,87,1559,8,87,1,87,1,87,3,87,1563,8,87,1,87,1,87,1,88,1,88,1,89,
  	1,89,3,89,1571,8,89,1,90,1,90,3,90,1575,8,90,1,90,1,90,3,90,1579,8,90,
  	1,90,1,90,3,90,1583,8,90,1,90,1,90,3,90,1587,8,90,1,90,1,90,3,90,1591,
  	8,90,1,90,1,90,3,90,1595,8,90,1,90,1,90,3,90,1599,8,90,1,90,1,90,3,90,
  	1603,8,90,5,90,1605,8,90,10,90,12,90,1608,9,90,3,90,1610,8,90,1,90,1,
  	90,1,91,1,91,1,91,3,91,1617,8,91,1,92,1,92,3,92,1621,8,92,1,92,4,92,1624,
  	8,92,11,92,12,92,1625,1,93,1,93,1,94,1,94,1,95,1,95,1,96,1,96,3,96,1636,
  	8,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,101,1,101,0,0,
  	102,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
  	48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
  	94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
  	130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
  	166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,
  	202,0,10,1,0,74,77,1,0,13,14,1,0,98,99,1,0,108,110,1,0,118,119,4,0,94,
  	97,111,111,120,122,135,135,7,0,52,64,67,77,81,81,83,90,92,93,98,105,123,
  	132,2,0,19,19,27,30,2,0,20,20,31,34,2,0,14,14,35,45,1886,0,205,1,0,0,
  	0,2,241,1,0,0,0,4,245,1,0,0,0,6,247,1,0,0,0,8,277,1,0,0,0,10,283,1,0,
  	0,0,12,305,1,0,0,0,14,309,1,0,0,0,16,346,1,0,0,0,18,370,1,0,0,0,20,381,
  	1,0,0,0,22,386,1,0,0,0,24,390,1,0,0,0,26,412,1,0,0,0,28,422,1,0,0,0,30,
  	444,1,0,0,0,32,446,1,0,0,0,34,452,1,0,0,0,36,500,1,0,0,0,38,504,1,0,0,
  	0,40,524,1,0,0,0,42,544,1,0,0,0,44,546,1,0,0,0,46,557,1,0,0,0,48,584,
  	1,0,0,0,50,597,1,0,0,0,52,601,1,0,0,0,54,616,1,0,0,0,56,626,1,0,0,0,58,
  	667,1,0,0,0,60,676,1,0,0,0,62,678,1,0,0,0,64,693,1,0,0,0,66,697,1,0,0,
  	0,68,701,1,0,0,0,70,722,1,0,0,0,72,724,1,0,0,0,74,728,1,0,0,0,76,753,
  	1,0,0,0,78,755,1,0,0,0,80,771,1,0,0,0,82,773,1,0,0,0,84,797,1,0,0,0,86,
  	867,1,0,0,0,88,869,1,0,0,0,90,907,1,0,0,0,92,909,1,0,0,0,94,930,1,0,0,
  	0,96,940,1,0,0,0,98,946,1,0,0,0,100,968,1,0,0,0,102,970,1,0,0,0,104,972,
  	1,0,0,0,106,974,1,0,0,0,108,984,1,0,0,0,110,994,1,0,0,0,112,1010,1,0,
  	0,0,114,1015,1,0,0,0,116,1025,1,0,0,0,118,1047,1,0,0,0,120,1077,1,0,0,
  	0,122,1097,1,0,0,0,124,1102,1,0,0,0,126,1136,1,0,0,0,128,1150,1,0,0,0,
  	130,1167,1,0,0,0,132,1169,1,0,0,0,134,1263,1,0,0,0,136,1271,1,0,0,0,138,
  	1273,1,0,0,0,140,1275,1,0,0,0,142,1330,1,0,0,0,144,1332,1,0,0,0,146,1342,
  	1,0,0,0,148,1351,1,0,0,0,150,1358,1,0,0,0,152,1364,1,0,0,0,154,1403,1,
  	0,0,0,156,1405,1,0,0,0,158,1434,1,0,0,0,160,1436,1,0,0,0,162,1438,1,0,
  	0,0,164,1446,1,0,0,0,166,1449,1,0,0,0,168,1469,1,0,0,0,170,1507,1,0,0,
  	0,172,1535,1,0,0,0,174,1552,1,0,0,0,176,1566,1,0,0,0,178,1570,1,0,0,0,
  	180,1572,1,0,0,0,182,1613,1,0,0,0,184,1618,1,0,0,0,186,1627,1,0,0,0,188,
  	1629,1,0,0,0,190,1631,1,0,0,0,192,1635,1,0,0,0,194,1637,1,0,0,0,196,1639,
  	1,0,0,0,198,1641,1,0,0,0,200,1643,1,0,0,0,202,1645,1,0,0,0,204,206,5,
  	136,0,0,205,204,1,0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,212,3,2,1,
  	0,208,210,5,136,0,0,209,208,1,0,0,0,209,210,1,0,0,0,210,211,1,0,0,0,211,
  	213,5,1,0,0,212,209,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,216,5,
  	136,0,0,215,214,1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,218,5,0,0,
  	1,218,1,1,0,0,0,219,242,3,4,2,0,220,222,5,46,0,0,221,223,5,136,0,0,222,
  	221,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,242,3,4,2,0,225,227,5,
  	47,0,0,226,228,5,136,0,0,227,226,1,0,0,0,227,228,1,0,0,0,228,229,1,0,
  	0,0,229,242,3,4,2,0,230,232,5,48,0,0,231,233,5,136,0,0,232,231,1,0,0,
  	0,232,233,1,0,0,0,233,234,1,0,0,0,234,242,3,4,2,0,235,237,5,49,0,0,236,
  	238,5,136,0,0,237,236,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,242,
  	3,4,2,0,240,242,3,6,3,0,241,219,1,0,0,0,241,220,1,0,0,0,241,225,1,0,0,
  	0,241,230,1,0,0,0,241,235,1,0,0,0,241,240,1,0,0,0,242,3,1,0,0,0,243,246,
  	3,10,5,0,244,246,3,46,23,0,245,243,1,0,0,0,245,244,1,0,0,0,246,5,1,0,
  	0,0,247,249,5,60,0,0,248,250,5,136,0,0,249,248,1,0,0,0,249,250,1,0,0,
  	0,250,251,1,0,0,0,251,253,5,50,0,0,252,254,5,136,0,0,253,252,1,0,0,0,
  	253,254,1,0,0,0,254,255,1,0,0,0,255,257,3,100,50,0,256,258,5,136,0,0,
  	257,256,1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,261,5,57,0,0,260,
  	262,5,136,0,0,261,260,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,265,
  	5,2,0,0,264,266,5,136,0,0,265,264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,
  	0,0,267,269,3,8,4,0,268,270,5,136,0,0,269,268,1,0,0,0,269,270,1,0,0,0,
  	270,271,1,0,0,0,271,273,3,24,12,0,272,274,5,136,0,0,273,272,1,0,0,0,273,
  	274,1,0,0,0,274,275,1,0,0,0,275,276,5,3,0,0,276,7,1,0,0,0,277,279,5,51,
  	0,0,278,280,5,136,0,0,279,278,1,0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,
  	281,282,3,80,40,0,282,9,1,0,0,0,283,290,3,14,7,0,284,286,5,136,0,0,285,
  	284,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,289,3,12,6,0,288,285,
  	1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,11,1,0,0,
  	0,292,290,1,0,0,0,293,294,5,52,0,0,294,295,5,136,0,0,295,297,5,53,0,0,
  	296,298,5,136,0,0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,
  	306,3,14,7,0,300,302,5,52,0,0,301,303,5,136,0,0,302,301,1,0,0,0,302,303,
  	1,0,0,0,303,304,1,0,0,0,304,306,3,14,7,0,305,293,1,0,0,0,305,300,1,0,
  	0,0,306,13,1,0,0,0,307,310,3,16,8,0,308,310,3,18,9,0,309,307,1,0,0,0,
  	309,308,1,0,0,0,310,15,1,0,0,0,311,313,3,22,11,0,312,314,5,136,0,0,313,
  	312,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,311,1,0,0,0,316,319,1,
  	0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,317,1,0,0,0,
  	320,347,3,54,27,0,321,323,3,22,11,0,322,324,5,136,0,0,323,322,1,0,0,0,
  	323,324,1,0,0,0,324,326,1,0,0,0,325,321,1,0,0,0,326,329,1,0,0,0,327,325,
  	1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,327,1,0,0,0,330,337,3,20,
  	10,0,331,333,5,136,0,0,332,331,1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,
  	0,334,336,3,20,10,0,335,332,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,
  	338,1,0,0,0,338,344,1,0,0,0,339,337,1,0,0,0,340,342,5,136,0,0,341,340,
  	1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,345,3,54,27,0,344,341,1,0,
  	0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,317,1,0,0,0,346,327,1,0,0,0,347,
  	17,1,0,0,0,348,350,3,22,11,0,349,351,5,136,0,0,350,349,1,0,0,0,350,351,
  	1,0,0,0,351,353,1,0,0,0,352,348,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,
  	0,354,355,1,0,0,0,355,363,1,0,0,0,356,354,1,0,0,0,357,359,3,20,10,0,358,
  	360,5,136,0,0,359,358,1,0,0,0,359,360,1,0,0,0,360,362,1,0,0,0,361,357,
  	1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,366,1,0,0,
  	0,365,363,1,0,0,0,366,368,3,52,26,0,367,369,5,136,0,0,368,367,1,0,0,0,
  	368,369,1,0,0,0,369,371,1,0,0,0,370,354,1,0,0,0,371,372,1,0,0,0,372,370,
  	1,0,0,0,372,373,1,0,0,0,373,374,1,0,0,0,374,375,3,16,8,0,375,19,1,0,0,
  	0,376,382,3,32,16,0,377,382,3,28,14,0,378,382,3,38,19,0,379,382,3,34,
  	17,0,380,382,3,40,20,0,381,376,1,0,0,0,381,377,1,0,0,0,381,378,1,0,0,
  	0,381,379,1,0,0,0,381,380,1,0,0,0,382,21,1,0,0,0,383,387,3,24,12,0,384,
  	387,3,26,13,0,385,387,3,44,22,0,386,383,1,0,0,0,386,384,1,0,0,0,386,385,
  	1,0,0,0,387,23,1,0,0,0,388,389,5,54,0,0,389,391,5,136,0,0,390,388,1,0,
  	0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,394,5,55,0,0,393,395,5,136,0,
  	0,394,393,1,0,0,0,394,395,1,0,0,0,395,396,1,0,0,0,396,403,3,74,37,0,397,
  	399,5,136,0,0,398,397,1,0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,402,
  	3,70,35,0,401,398,1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,404,1,0,
  	0,0,404,410,1,0,0,0,405,403,1,0,0,0,406,408,5,136,0,0,407,406,1,0,0,0,
  	407,408,1,0,0,0,408,409,1,0,0,0,409,411,3,72,36,0,410,407,1,0,0,0,410,
  	411,1,0,0,0,411,25,1,0,0,0,412,414,5,56,0,0,413,415,5,136,0,0,414,413,
  	1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,417,3,104,52,0,417,418,5,
  	136,0,0,418,419,5,57,0,0,419,420,5,136,0,0,420,421,3,176,88,0,421,27,
  	1,0,0,0,422,424,5,58,0,0,423,425,5,136,0,0,424,423,1,0,0,0,424,425,1,
  	0,0,0,425,426,1,0,0,0,426,431,3,76,38,0,427,428,5,136,0,0,428,430,3,30,
  	15,0,429,427,1,0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,
  	432,29,1,0,0,0,433,431,1,0,0,0,434,435,5,59,0,0,435,436,5,136,0,0,436,
  	437,5,55,0,0,437,438,5,136,0,0,438,445,3,34,17,0,439,440,5,59,0,0,440,
  	441,5,136,0,0,441,442,5,60,0,0,442,443,5,136,0,0,443,445,3,34,17,0,444,
  	434,1,0,0,0,444,439,1,0,0,0,445,31,1,0,0,0,446,448,5,60,0,0,447,449,5,
  	136,0,0,448,447,1,0,0,0,448,449,1,0,0,0,449,450,1,0,0,0,450,451,3,74,
  	37,0,451,33,1,0,0,0,452,454,5,61,0,0,453,455,5,136,0,0,454,453,1,0,0,
  	0,454,455,1,0,0,0,455,456,1,0,0,0,456,461,3,36,18,0,457,458,5,4,0,0,458,
  	460,3,36,18,0,459,457,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,
  	1,0,0,0,462,35,1,0,0,0,463,461,1,0,0,0,464,466,3,184,92,0,465,467,5,136,
  	0,0,466,465,1,0,0,0,466,467,1,0,0,0,467,468,1,0,0,0,468,470,5,5,0,0,469,
  	471,5,136,0,0,470,469,1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,0,472,473,
  	3,104,52,0,473,501,1,0,0,0,474,476,3,176,88,0,475,477,5,136,0,0,476,475,
  	1,0,0,0,476,477,1,0,0,0,477,478,1,0,0,0,478,480,5,5,0,0,479,481,5,136,
  	0,0,480,479,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,483,3,104,52,
  	0,483,501,1,0,0,0,484,486,3,176,88,0,485,487,5,136,0,0,486,485,1,0,0,
  	0,486,487,1,0,0,0,487,488,1,0,0,0,488,490,5,6,0,0,489,491,5,136,0,0,490,
  	489,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,493,3,104,52,0,493,501,
  	1,0,0,0,494,496,3,176,88,0,495,497,5,136,0,0,496,495,1,0,0,0,496,497,
  	1,0,0,0,497,498,1,0,0,0,498,499,3,94,47,0,499,501,1,0,0,0,500,464,1,0,
  	0,0,500,474,1,0,0,0,500,484,1,0,0,0,500,494,1,0,0,0,501,37,1,0,0,0,502,
  	503,5,62,0,0,503,505,5,136,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,506,
  	1,0,0,0,506,508,5,63,0,0,507,509,5,136,0,0,508,507,1,0,0,0,508,509,1,
  	0,0,0,509,510,1,0,0,0,510,521,3,104,52,0,511,513,5,136,0,0,512,511,1,
  	0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,516,5,4,0,0,515,517,5,136,0,
  	0,516,515,1,0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,520,3,104,52,0,
  	519,512,1,0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,39,
  	1,0,0,0,523,521,1,0,0,0,524,525,5,64,0,0,525,526,5,136,0,0,526,537,3,
  	42,21,0,527,529,5,136,0,0,528,527,1,0,0,0,528,529,1,0,0,0,529,530,1,0,
  	0,0,530,532,5,4,0,0,531,533,5,136,0,0,532,531,1,0,0,0,532,533,1,0,0,0,
  	533,534,1,0,0,0,534,536,3,42,21,0,535,528,1,0,0,0,536,539,1,0,0,0,537,
  	535,1,0,0,0,537,538,1,0,0,0,538,41,1,0,0,0,539,537,1,0,0,0,540,541,3,
  	176,88,0,541,542,3,94,47,0,542,545,1,0,0,0,543,545,3,184,92,0,544,540,
  	1,0,0,0,544,543,1,0,0,0,545,43,1,0,0,0,546,547,5,65,0,0,547,548,5,136,
  	0,0,548,555,3,156,78,0,549,551,5,136,0,0,550,549,1,0,0,0,550,551,1,0,
  	0,0,551,552,1,0,0,0,552,553,5,66,0,0,553,554,5,136,0,0,554,556,3,48,24,
  	0,555,550,1,0,0,0,555,556,1,0,0,0,556,45,1,0,0,0,557,558,5,65,0,0,558,
  	561,5,136,0,0,559,562,3,156,78,0,560,562,3,158,79,0,561,559,1,0,0,0,561,
  	560,1,0,0,0,562,567,1,0,0,0,563,564,5,136,0,0,564,565,5,66,0,0,565,566,
  	5,136,0,0,566,568,3,48,24,0,567,563,1,0,0,0,567,568,1,0,0,0,568,47,1,
  	0,0,0,569,585,5,7,0,0,570,581,3,50,25,0,571,573,5,136,0,0,572,571,1,0,
  	0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,576,5,4,0,0,575,577,5,136,0,0,
  	576,575,1,0,0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,580,3,50,25,0,579,
  	572,1,0,0,0,580,583,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,585,1,
  	0,0,0,583,581,1,0,0,0,584,569,1,0,0,0,584,570,1,0,0,0,585,590,1,0,0,0,
  	586,588,5,136,0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,0,589,
  	591,3,72,36,0,590,587,1,0,0,0,590,591,1,0,0,0,591,49,1,0,0,0,592,593,
  	3,160,80,0,593,594,5,136,0,0,594,595,5,57,0,0,595,596,5,136,0,0,596,598,
  	1,0,0,0,597,592,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,600,3,176,
  	88,0,600,51,1,0,0,0,601,606,5,67,0,0,602,604,5,136,0,0,603,602,1,0,0,
  	0,603,604,1,0,0,0,604,605,1,0,0,0,605,607,5,68,0,0,606,603,1,0,0,0,606,
  	607,1,0,0,0,607,608,1,0,0,0,608,609,5,136,0,0,609,614,3,56,28,0,610,612,
  	5,136,0,0,611,610,1,0,0,0,611,612,1,0,0,0,612,613,1,0,0,0,613,615,3,72,
  	36,0,614,611,1,0,0,0,614,615,1,0,0,0,615,53,1,0,0,0,616,621,5,69,0,0,
  	617,619,5,136,0,0,618,617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,
  	622,5,68,0,0,621,618,1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,624,
  	5,136,0,0,624,625,3,56,28,0,625,55,1,0,0,0,626,629,3,58,29,0,627,628,
  	5,136,0,0,628,630,3,62,31,0,629,627,1,0,0,0,629,630,1,0,0,0,630,633,1,
  	0,0,0,631,632,5,136,0,0,632,634,3,64,32,0,633,631,1,0,0,0,633,634,1,0,
  	0,0,634,637,1,0,0,0,635,636,5,136,0,0,636,638,3,66,33,0,637,635,1,0,0,
  	0,637,638,1,0,0,0,638,57,1,0,0,0,639,650,5,7,0,0,640,642,5,136,0,0,641,
  	640,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,645,5,4,0,0,644,646,5,
  	136,0,0,645,644,1,0,0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,649,3,60,
  	30,0,648,641,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,
  	651,668,1,0,0,0,652,650,1,0,0,0,653,664,3,60,30,0,654,656,5,136,0,0,655,
  	654,1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,659,5,4,0,0,658,660,5,
  	136,0,0,659,658,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,663,3,60,
  	30,0,662,655,1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,
  	665,668,1,0,0,0,666,664,1,0,0,0,667,639,1,0,0,0,667,653,1,0,0,0,668,59,
  	1,0,0,0,669,670,3,104,52,0,670,671,5,136,0,0,671,672,5,57,0,0,672,673,
  	5,136,0,0,673,674,3,176,88,0,674,677,1,0,0,0,675,677,3,104,52,0,676,669,
  	1,0,0,0,676,675,1,0,0,0,677,61,1,0,0,0,678,679,5,70,0,0,679,680,5,136,
  	0,0,680,681,5,71,0,0,681,682,5,136,0,0,682,690,3,68,34,0,683,685,5,4,
  	0,0,684,686,5,136,0,0,685,684,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,
  	687,689,3,68,34,0,688,683,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,
  	691,1,0,0,0,691,63,1,0,0,0,692,690,1,0,0,0,693,694,5,72,0,0,694,695,5,
  	136,0,0,695,696,3,104,52,0,696,65,1,0,0,0,697,698,5,73,0,0,698,699,5,
  	136,0,0,699,700,3,104,52,0,700,67,1,0,0,0,701,706,3,104,52,0,702,704,
  	5,136,0,0,703,702,1,0,0,0,703,704,1,0,0,0,704,705,1,0,0,0,705,707,7,0,
  	0,0,706,703,1,0,0,0,706,707,1,0,0,0,707,69,1,0,0,0,708,709,5,78,0,0,709,
  	710,5,136,0,0,710,711,5,79,0,0,711,712,5,136,0,0,712,713,5,59,0,0,713,
  	714,5,136,0,0,714,723,3,176,88,0,715,716,5,78,0,0,716,717,5,136,0,0,717,
  	718,5,80,0,0,718,719,5,136,0,0,719,720,5,59,0,0,720,721,5,136,0,0,721,
  	723,3,176,88,0,722,708,1,0,0,0,722,715,1,0,0,0,723,71,1,0,0,0,724,725,
  	5,81,0,0,725,726,5,136,0,0,726,727,3,104,52,0,727,73,1,0,0,0,728,739,
  	3,76,38,0,729,731,5,136,0,0,730,729,1,0,0,0,730,731,1,0,0,0,731,732,1,
  	0,0,0,732,734,5,4,0,0,733,735,5,136,0,0,734,733,1,0,0,0,734,735,1,0,0,
  	0,735,736,1,0,0,0,736,738,3,76,38,0,737,730,1,0,0,0,738,741,1,0,0,0,739,
  	737,1,0,0,0,739,740,1,0,0,0,740,75,1,0,0,0,741,739,1,0,0,0,742,744,3,
  	176,88,0,743,745,5,136,0,0,744,743,1,0,0,0,744,745,1,0,0,0,745,746,1,
  	0,0,0,746,748,5,5,0,0,747,749,5,136,0,0,748,747,1,0,0,0,748,749,1,0,0,
  	0,749,750,1,0,0,0,750,751,3,78,39,0,751,754,1,0,0,0,752,754,3,78,39,0,
  	753,742,1,0,0,0,753,752,1,0,0,0,754,77,1,0,0,0,755,756,3,80,40,0,756,
  	79,1,0,0,0,757,764,3,82,41,0,758,760,5,136,0,0,759,758,1,0,0,0,759,760,
  	1,0,0,0,760,761,1,0,0,0,761,763,3,84,42,0,762,759,1,0,0,0,763,766,1,0,
  	0,0,764,762,1,0,0,0,764,765,1,0,0,0,765,772,1,0,0,0,766,764,1,0,0,0,767,
  	768,5,2,0,0,768,769,3,80,40,0,769,770,5,3,0,0,770,772,1,0,0,0,771,757,
  	1,0,0,0,771,767,1,0,0,0,772,81,1,0,0,0,773,775,5,2,0,0,774,776,5,136,
  	0,0,775,774,1,0,0,0,775,776,1,0,0,0,776,781,1,0,0,0,777,779,3,176,88,
  	0,778,780,5,136,0,0,779,778,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,
  	777,1,0,0,0,781,782,1,0,0,0,782,787,1,0,0,0,783,785,3,94,47,0,784,786,
  	5,136,0,0,785,784,1,0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,783,1,0,
  	0,0,787,788,1,0,0,0,788,793,1,0,0,0,789,791,3,90,45,0,790,792,5,136,0,
  	0,791,790,1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,789,1,0,0,0,793,
  	794,1,0,0,0,794,795,1,0,0,0,795,796,5,3,0,0,796,83,1,0,0,0,797,799,3,
  	86,43,0,798,800,5,136,0,0,799,798,1,0,0,0,799,800,1,0,0,0,800,801,1,0,
  	0,0,801,802,3,82,41,0,802,85,1,0,0,0,803,805,3,198,99,0,804,806,5,136,
  	0,0,805,804,1,0,0,0,805,806,1,0,0,0,806,807,1,0,0,0,807,809,3,202,101,
  	0,808,810,5,136,0,0,809,808,1,0,0,0,809,810,1,0,0,0,810,812,1,0,0,0,811,
  	813,3,88,44,0,812,811,1,0,0,0,812,813,1,0,0,0,813,815,1,0,0,0,814,816,
  	5,136,0,0,815,814,1,0,0,0,815,816,1,0,0,0,816,817,1,0,0,0,817,819,3,202,
  	101,0,818,820,5,136,0,0,819,818,1,0,0,0,819,820,1,0,0,0,820,821,1,0,0,
  	0,821,822,3,200,100,0,822,868,1,0,0,0,823,825,3,198,99,0,824,826,5,136,
  	0,0,825,824,1,0,0,0,825,826,1,0,0,0,826,827,1,0,0,0,827,829,3,202,101,
  	0,828,830,5,136,0,0,829,828,1,0,0,0,829,830,1,0,0,0,830,832,1,0,0,0,831,
  	833,3,88,44,0,832,831,1,0,0,0,832,833,1,0,0,0,833,835,1,0,0,0,834,836,
  	5,136,0,0,835,834,1,0,0,0,835,836,1,0,0,0,836,837,1,0,0,0,837,838,3,202,
  	101,0,838,868,1,0,0,0,839,841,3,202,101,0,840,842,5,136,0,0,841,840,1,
  	0,0,0,841,842,1,0,0,0,842,844,1,0,0,0,843,845,3,88,44,0,844,843,1,0,0,
  	0,844,845,1,0,0,0,845,847,1,0,0,0,846,848,5,136,0,0,847,846,1,0,0,0,847,
  	848,1,0,0,0,848,849,1,0,0,0,849,851,3,202,101,0,850,852,5,136,0,0,851,
  	850,1,0,0,0,851,852,1,0,0,0,852,853,1,0,0,0,853,854,3,200,100,0,854,868,
  	1,0,0,0,855,857,3,202,101,0,856,858,5,136,0,0,857,856,1,0,0,0,857,858,
  	1,0,0,0,858,860,1,0,0,0,859,861,3,88,44,0,860,859,1,0,0,0,860,861,1,0,
  	0,0,861,863,1,0,0,0,862,864,5,136,0,0,863,862,1,0,0,0,863,864,1,0,0,0,
  	864,865,1,0,0,0,865,866,3,202,101,0,866,868,1,0,0,0,867,803,1,0,0,0,867,
  	823,1,0,0,0,867,839,1,0,0,0,867,855,1,0,0,0,868,87,1,0,0,0,869,871,5,
  	8,0,0,870,872,5,136,0,0,871,870,1,0,0,0,871,872,1,0,0,0,872,877,1,0,0,
  	0,873,875,3,176,88,0,874,876,5,136,0,0,875,874,1,0,0,0,875,876,1,0,0,
  	0,876,878,1,0,0,0,877,873,1,0,0,0,877,878,1,0,0,0,878,883,1,0,0,0,879,
  	881,3,92,46,0,880,882,5,136,0,0,881,880,1,0,0,0,881,882,1,0,0,0,882,884,
  	1,0,0,0,883,879,1,0,0,0,883,884,1,0,0,0,884,886,1,0,0,0,885,887,3,98,
  	49,0,886,885,1,0,0,0,886,887,1,0,0,0,887,892,1,0,0,0,888,890,3,90,45,
  	0,889,891,5,136,0,0,890,889,1,0,0,0,890,891,1,0,0,0,891,893,1,0,0,0,892,
  	888,1,0,0,0,892,893,1,0,0,0,893,901,1,0,0,0,894,896,5,136,0,0,895,894,
  	1,0,0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,899,5,82,0,0,898,900,5,136,
  	0,0,899,898,1,0,0,0,899,900,1,0,0,0,900,902,1,0,0,0,901,895,1,0,0,0,901,
  	902,1,0,0,0,902,903,1,0,0,0,903,904,5,9,0,0,904,89,1,0,0,0,905,908,3,
  	180,90,0,906,908,3,182,91,0,907,905,1,0,0,0,907,906,1,0,0,0,908,91,1,
  	0,0,0,909,911,5,10,0,0,910,912,5,136,0,0,911,910,1,0,0,0,911,912,1,0,
  	0,0,912,913,1,0,0,0,913,927,3,102,51,0,914,916,5,136,0,0,915,914,1,0,
  	0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,919,5,11,0,0,918,920,5,10,0,0,
  	919,918,1,0,0,0,919,920,1,0,0,0,920,922,1,0,0,0,921,923,5,136,0,0,922,
  	921,1,0,0,0,922,923,1,0,0,0,923,924,1,0,0,0,924,926,3,102,51,0,925,915,
  	1,0,0,0,926,929,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,93,1,0,0,
  	0,929,927,1,0,0,0,930,937,3,96,48,0,931,933,5,136,0,0,932,931,1,0,0,0,
  	932,933,1,0,0,0,933,934,1,0,0,0,934,936,3,96,48,0,935,932,1,0,0,0,936,
  	939,1,0,0,0,937,935,1,0,0,0,937,938,1,0,0,0,938,95,1,0,0,0,939,937,1,
  	0,0,0,940,942,5,10,0,0,941,943,5,136,0,0,942,941,1,0,0,0,942,943,1,0,
  	0,0,943,944,1,0,0,0,944,945,3,100,50,0,945,97,1,0,0,0,946,948,5,7,0,0,
  	947,949,5,136,0,0,948,947,1,0,0,0,948,949,1,0,0,0,949,954,1,0,0,0,950,
  	952,3,188,94,0,951,953,5,136,0,0,952,951,1,0,0,0,952,953,1,0,0,0,953,
  	955,1,0,0,0,954,950,1,0,0,0,954,955,1,0,0,0,955,966,1,0,0,0,956,958,5,
  	12,0,0,957,959,5,136,0,0,958,957,1,0,0,0,958,959,1,0,0,0,959,964,1,0,
  	0,0,960,962,3,188,94,0,961,963,5,136,0,0,962,961,1,0,0,0,962,963,1,0,
  	0,0,963,965,1,0,0,0,964,960,1,0,0,0,964,965,1,0,0,0,965,967,1,0,0,0,966,
  	956,1,0,0,0,966,967,1,0,0,0,967,99,1,0,0,0,968,969,3,192,96,0,969,101,
  	1,0,0,0,970,971,3,192,96,0,971,103,1,0,0,0,972,973,3,106,53,0,973,105,
  	1,0,0,0,974,981,3,108,54,0,975,976,5,136,0,0,976,977,5,83,0,0,977,978,
  	5,136,0,0,978,980,3,108,54,0,979,975,1,0,0,0,980,983,1,0,0,0,981,979,
  	1,0,0,0,981,982,1,0,0,0,982,107,1,0,0,0,983,981,1,0,0,0,984,991,3,110,
  	55,0,985,986,5,136,0,0,986,987,5,84,0,0,987,988,5,136,0,0,988,990,3,110,
  	55,0,989,985,1,0,0,0,990,993,1,0,0,0,991,989,1,0,0,0,991,992,1,0,0,0,
  	992,109,1,0,0,0,993,991,1,0,0,0,994,1001,3,112,56,0,995,996,5,136,0,0,
  	996,997,5,85,0,0,997,998,5,136,0,0,998,1000,3,112,56,0,999,995,1,0,0,
  	0,1000,1003,1,0,0,0,1001,999,1,0,0,0,1001,1002,1,0,0,0,1002,111,1,0,0,
  	0,1003,1001,1,0,0,0,1004,1006,5,86,0,0,1005,1007,5,136,0,0,1006,1005,
  	1,0,0,0,1006,1007,1,0,0,0,1007,1009,1,0,0,0,1008,1004,1,0,0,0,1009,1012,
  	1,0,0,0,1010,1008,1,0,0,0,1010,1011,1,0,0,0,1011,1013,1,0,0,0,1012,1010,
  	1,0,0,0,1013,1014,3,114,57,0,1014,113,1,0,0,0,1015,1022,3,116,58,0,1016,
  	1018,5,136,0,0,1017,1016,1,0,0,0,1017,1018,1,0,0,0,1018,1019,1,0,0,0,
  	1019,1021,3,142,71,0,1020,1017,1,0,0,0,1021,1024,1,0,0,0,1022,1020,1,
  	0,0,0,1022,1023,1,0,0,0,1023,115,1,0,0,0,1024,1022,1,0,0,0,1025,1044,
  	3,118,59,0,1026,1028,5,136,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,
  	1029,1,0,0,0,1029,1031,5,13,0,0,1030,1032,5,136,0,0,1031,1030,1,0,0,0,
  	1031,1032,1,0,0,0,1032,1033,1,0,0,0,1033,1043,3,118,59,0,1034,1036,5,
  	136,0,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,1039,
  	5,14,0,0,1038,1040,5,136,0,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,
  	1041,1,0,0,0,1041,1043,3,118,59,0,1042,1027,1,0,0,0,1042,1035,1,0,0,0,
  	1043,1046,1,0,0,0,1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,117,1,0,0,
  	0,1046,1044,1,0,0,0,1047,1074,3,120,60,0,1048,1050,5,136,0,0,1049,1048,
  	1,0,0,0,1049,1050,1,0,0,0,1050,1051,1,0,0,0,1051,1053,5,7,0,0,1052,1054,
  	5,136,0,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,1055,1,0,0,0,1055,
  	1073,3,120,60,0,1056,1058,5,136,0,0,1057,1056,1,0,0,0,1057,1058,1,0,0,
  	0,1058,1059,1,0,0,0,1059,1061,5,15,0,0,1060,1062,5,136,0,0,1061,1060,
  	1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,1073,3,120,60,0,1064,
  	1066,5,136,0,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,1067,1,0,0,0,
  	1067,1069,5,16,0,0,1068,1070,5,136,0,0,1069,1068,1,0,0,0,1069,1070,1,
  	0,0,0,1070,1071,1,0,0,0,1071,1073,3,120,60,0,1072,1049,1,0,0,0,1072,1057,
  	1,0,0,0,1072,1065,1,0,0,0,1073,1076,1,0,0,0,1074,1072,1,0,0,0,1074,1075,
  	1,0,0,0,1075,119,1,0,0,0,1076,1074,1,0,0,0,1077,1088,3,122,61,0,1078,
  	1080,5,136,0,0,1079,1078,1,0,0,0,1079,1080,1,0,0,0,1080,1081,1,0,0,0,
  	1081,1083,5,17,0,0,1082,1084,5,136,0,0,1083,1082,1,0,0,0,1083,1084,1,
  	0,0,0,1084,1085,1,0,0,0,1085,1087,3,122,61,0,1086,1079,1,0,0,0,1087,1090,
  	1,0,0,0,1088,1086,1,0,0,0,1088,1089,1,0,0,0,1089,121,1,0,0,0,1090,1088,
  	1,0,0,0,1091,1093,7,1,0,0,1092,1094,5,136,0,0,1093,1092,1,0,0,0,1093,
  	1094,1,0,0,0,1094,1096,1,0,0,0,1095,1091,1,0,0,0,1096,1099,1,0,0,0,1097,
  	1095,1,0,0,0,1097,1098,1,0,0,0,1098,1100,1,0,0,0,1099,1097,1,0,0,0,1100,
  	1101,3,124,62,0,1101,123,1,0,0,0,1102,1108,3,132,66,0,1103,1107,3,128,
  	64,0,1104,1107,3,126,63,0,1105,1107,3,130,65,0,1106,1103,1,0,0,0,1106,
  	1104,1,0,0,0,1106,1105,1,0,0,0,1107,1110,1,0,0,0,1108,1106,1,0,0,0,1108,
  	1109,1,0,0,0,1109,125,1,0,0,0,1110,1108,1,0,0,0,1111,1112,5,136,0,0,1112,
  	1114,5,87,0,0,1113,1115,5,136,0,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,
  	1115,1116,1,0,0,0,1116,1137,3,132,66,0,1117,1119,5,136,0,0,1118,1117,
  	1,0,0,0,1118,1119,1,0,0,0,1119,1120,1,0,0,0,1120,1121,5,8,0,0,1121,1122,
  	3,104,52,0,1122,1123,5,9,0,0,1123,1137,1,0,0,0,1124,1126,5,136,0,0,1125,
  	1124,1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,1129,5,8,0,0,1128,
  	1130,3,104,52,0,1129,1128,1,0,0,0,1129,1130,1,0,0,0,1130,1131,1,0,0,0,
  	1131,1133,5,12,0,0,1132,1134,3,104,52,0,1133,1132,1,0,0,0,1133,1134,1,
  	0,0,0,1134,1135,1,0,0,0,1135,1137,5,9,0,0,1136,1111,1,0,0,0,1136,1118,
  	1,0,0,0,1136,1125,1,0,0,0,1137,127,1,0,0,0,1138,1139,5,136,0,0,1139,1140,
  	5,88,0,0,1140,1141,5,136,0,0,1141,1151,5,67,0,0,1142,1143,5,136,0,0,1143,
  	1144,5,89,0,0,1144,1145,5,136,0,0,1145,1151,5,67,0,0,1146,1147,5,136,
  	0,0,1147,1151,5,90,0,0,1148,1149,5,136,0,0,1149,1151,5,91,0,0,1150,1138,
  	1,0,0,0,1150,1142,1,0,0,0,1150,1146,1,0,0,0,1150,1148,1,0,0,0,1151,1153,
  	1,0,0,0,1152,1154,5,136,0,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,
  	1155,1,0,0,0,1155,1156,3,132,66,0,1156,129,1,0,0,0,1157,1158,5,136,0,
  	0,1158,1159,5,92,0,0,1159,1160,5,136,0,0,1160,1168,5,93,0,0,1161,1162,
  	5,136,0,0,1162,1163,5,92,0,0,1163,1164,5,136,0,0,1164,1165,5,86,0,0,1165,
  	1166,5,136,0,0,1166,1168,5,93,0,0,1167,1157,1,0,0,0,1167,1161,1,0,0,0,
  	1168,131,1,0,0,0,1169,1176,3,134,67,0,1170,1172,5,136,0,0,1171,1170,1,
  	0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,0,0,1173,1175,3,170,85,0,1174,1171,
  	1,0,0,0,1175,1178,1,0,0,0,1176,1174,1,0,0,0,1176,1177,1,0,0,0,1177,1183,
  	1,0,0,0,1178,1176,1,0,0,0,1179,1181,5,136,0,0,1180,1179,1,0,0,0,1180,
  	1181,1,0,0,0,1181,1182,1,0,0,0,1182,1184,3,94,47,0,1183,1180,1,0,0,0,
  	1183,1184,1,0,0,0,1184,133,1,0,0,0,1185,1264,3,136,68,0,1186,1264,3,182,
  	91,0,1187,1264,3,172,86,0,1188,1190,5,94,0,0,1189,1191,5,136,0,0,1190,
  	1189,1,0,0,0,1190,1191,1,0,0,0,1191,1192,1,0,0,0,1192,1194,5,2,0,0,1193,
  	1195,5,136,0,0,1194,1193,1,0,0,0,1194,1195,1,0,0,0,1195,1196,1,0,0,0,
  	1196,1198,5,7,0,0,1197,1199,5,136,0,0,1198,1197,1,0,0,0,1198,1199,1,0,
  	0,0,1199,1200,1,0,0,0,1200,1264,5,3,0,0,1201,1264,3,166,83,0,1202,1264,
  	3,168,84,0,1203,1205,5,53,0,0,1204,1206,5,136,0,0,1205,1204,1,0,0,0,1205,
  	1206,1,0,0,0,1206,1207,1,0,0,0,1207,1209,5,2,0,0,1208,1210,5,136,0,0,
  	1209,1208,1,0,0,0,1209,1210,1,0,0,0,1210,1211,1,0,0,0,1211,1213,3,148,
  	74,0,1212,1214,5,136,0,0,1213,1212,1,0,0,0,1213,1214,1,0,0,0,1214,1215,
  	1,0,0,0,1215,1216,5,3,0,0,1216,1264,1,0,0,0,1217,1219,5,95,0,0,1218,1220,
  	5,136,0,0,1219,1218,1,0,0,0,1219,1220,1,0,0,0,1220,1221,1,0,0,0,1221,
  	1223,5,2,0,0,1222,1224,5,136,0,0,1223,1222,1,0,0,0,1223,1224,1,0,0,0,
  	1224,1225,1,0,0,0,1225,1227,3,148,74,0,1226,1228,5,136,0,0,1227,1226,
  	1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,0,0,0,1229,1230,5,3,0,0,1230,1264,
  	1,0,0,0,1231,1233,5,96,0,0,1232,1234,5,136,0,0,1233,1232,1,0,0,0,1233,
  	1234,1,0,0,0,1234,1235,1,0,0,0,1235,1237,5,2,0,0,1236,1238,5,136,0,0,
  	1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,1239,1,0,0,0,1239,1241,3,148,
  	74,0,1240,1242,5,136,0,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,1243,
  	1,0,0,0,1243,1244,5,3,0,0,1244,1264,1,0,0,0,1245,1247,5,97,0,0,1246,1248,
  	5,136,0,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,
  	1251,5,2,0,0,1250,1252,5,136,0,0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,
  	1252,1253,1,0,0,0,1253,1255,3,148,74,0,1254,1256,5,136,0,0,1255,1254,
  	1,0,0,0,1255,1256,1,0,0,0,1256,1257,1,0,0,0,1257,1258,5,3,0,0,1258,1264,
  	1,0,0,0,1259,1264,3,146,73,0,1260,1264,3,144,72,0,1261,1264,3,152,76,
  	0,1262,1264,3,176,88,0,1263,1185,1,0,0,0,1263,1186,1,0,0,0,1263,1187,
  	1,0,0,0,1263,1188,1,0,0,0,1263,1201,1,0,0,0,1263,1202,1,0,0,0,1263,1203,
  	1,0,0,0,1263,1217,1,0,0,0,1263,1231,1,0,0,0,1263,1245,1,0,0,0,1263,1259,
  	1,0,0,0,1263,1260,1,0,0,0,1263,1261,1,0,0,0,1263,1262,1,0,0,0,1264,135,
  	1,0,0,0,1265,1272,3,178,89,0,1266,1272,5,106,0,0,1267,1272,3,138,69,0,
  	1268,1272,5,93,0,0,1269,1272,3,180,90,0,1270,1272,3,140,70,0,1271,1265,
  	1,0,0,0,1271,1266,1,0,0,0,1271,1267,1,0,0,0,1271,1268,1,0,0,0,1271,1269,
  	1,0,0,0,1271,1270,1,0,0,0,1272,137,1,0,0,0,1273,1274,7,2,0,0,1274,139,
  	1,0,0,0,1275,1277,5,8,0,0,1276,1278,5,136,0,0,1277,1276,1,0,0,0,1277,
  	1278,1,0,0,0,1278,1296,1,0,0,0,1279,1281,3,104,52,0,1280,1282,5,136,0,
  	0,1281,1280,1,0,0,0,1281,1282,1,0,0,0,1282,1293,1,0,0,0,1283,1285,5,4,
  	0,0,1284,1286,5,136,0,0,1285,1284,1,0,0,0,1285,1286,1,0,0,0,1286,1287,
  	1,0,0,0,1287,1289,3,104,52,0,1288,1290,5,136,0,0,1289,1288,1,0,0,0,1289,
  	1290,1,0,0,0,1290,1292,1,0,0,0,1291,1283,1,0,0,0,1292,1295,1,0,0,0,1293,
  	1291,1,0,0,0,1293,1294,1,0,0,0,1294,1297,1,0,0,0,1295,1293,1,0,0,0,1296,
  	1279,1,0,0,0,1296,1297,1,0,0,0,1297,1298,1,0,0,0,1298,1299,5,9,0,0,1299,
  	141,1,0,0,0,1300,1302,5,5,0,0,1301,1303,5,136,0,0,1302,1301,1,0,0,0,1302,
  	1303,1,0,0,0,1303,1304,1,0,0,0,1304,1331,3,116,58,0,1305,1307,5,18,0,
  	0,1306,1308,5,136,0,0,1307,1306,1,0,0,0,1307,1308,1,0,0,0,1308,1309,1,
  	0,0,0,1309,1331,3,116,58,0,1310,1312,5,19,0,0,1311,1313,5,136,0,0,1312,
  	1311,1,0,0,0,1312,1313,1,0,0,0,1313,1314,1,0,0,0,1314,1331,3,116,58,0,
  	1315,1317,5,20,0,0,1316,1318,5,136,0,0,1317,1316,1,0,0,0,1317,1318,1,
  	0,0,0,1318,1319,1,0,0,0,1319,1331,3,116,58,0,1320,1322,5,21,0,0,1321,
  	1323,5,136,0,0,1322,1321,1,0,0,0,1322,1323,1,0,0,0,1323,1324,1,0,0,0,
  	1324,1331,3,116,58,0,1325,1327,5,22,0,0,1326,1328,5,136,0,0,1327,1326,
  	1,0,0,0,1327,1328,1,0,0,0,1328,1329,1,0,0,0,1329,1331,3,116,58,0,1330,
  	1300,1,0,0,0,1330,1305,1,0,0,0,1330,1310,1,0,0,0,1330,1315,1,0,0,0,1330,
  	1320,1,0,0,0,1330,1325,1,0,0,0,1331,143,1,0,0,0,1332,1334,5,2,0,0,1333,
  	1335,5,136,0,0,1334,1333,1,0,0,0,1334,1335,1,0,0,0,1335,1336,1,0,0,0,
  	1336,1338,3,104,52,0,1337,1339,5,136,0,0,1338,1337,1,0,0,0,1338,1339,
  	1,0,0,0,1339,1340,1,0,0,0,1340,1341,5,3,0,0,1341,145,1,0,0,0,1342,1347,
  	3,82,41,0,1343,1345,5,136,0,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,
  	1346,1,0,0,0,1346,1348,3,84,42,0,1347,1344,1,0,0,0,1348,1349,1,0,0,0,
  	1349,1347,1,0,0,0,1349,1350,1,0,0,0,1350,147,1,0,0,0,1351,1356,3,150,
  	75,0,1352,1354,5,136,0,0,1353,1352,1,0,0,0,1353,1354,1,0,0,0,1354,1355,
  	1,0,0,0,1355,1357,3,72,36,0,1356,1353,1,0,0,0,1356,1357,1,0,0,0,1357,
  	149,1,0,0,0,1358,1359,3,176,88,0,1359,1360,5,136,0,0,1360,1361,5,87,0,
  	0,1361,1362,5,136,0,0,1362,1363,3,104,52,0,1363,151,1,0,0,0,1364,1366,
  	3,154,77,0,1365,1367,5,136,0,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,
  	1368,1,0,0,0,1368,1370,5,2,0,0,1369,1371,5,136,0,0,1370,1369,1,0,0,0,
  	1370,1371,1,0,0,0,1371,1376,1,0,0,0,1372,1374,5,68,0,0,1373,1375,5,136,
  	0,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1377,1,0,0,0,1376,1372,1,
  	0,0,0,1376,1377,1,0,0,0,1377,1395,1,0,0,0,1378,1380,3,104,52,0,1379,1381,
  	5,136,0,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,1392,1,0,0,0,1382,
  	1384,5,4,0,0,1383,1385,5,136,0,0,1384,1383,1,0,0,0,1384,1385,1,0,0,0,
  	1385,1386,1,0,0,0,1386,1388,3,104,52,0,1387,1389,5,136,0,0,1388,1387,
  	1,0,0,0,1388,1389,1,0,0,0,1389,1391,1,0,0,0,1390,1382,1,0,0,0,1391,1394,
  	1,0,0,0,1392,1390,1,0,0,0,1392,1393,1,0,0,0,1393,1396,1,0,0,0,1394,1392,
  	1,0,0,0,1395,1378,1,0,0,0,1395,1396,1,0,0,0,1396,1397,1,0,0,0,1397,1398,
  	5,3,0,0,1398,153,1,0,0,0,1399,1400,3,164,82,0,1400,1401,3,194,97,0,1401,
  	1404,1,0,0,0,1402,1404,5,100,0,0,1403,1399,1,0,0,0,1403,1402,1,0,0,0,
  	1404,155,1,0,0,0,1405,1407,3,162,81,0,1406,1408,5,136,0,0,1407,1406,1,
  	0,0,0,1407,1408,1,0,0,0,1408,1409,1,0,0,0,1409,1411,5,2,0,0,1410,1412,
  	5,136,0,0,1411,1410,1,0,0,0,1411,1412,1,0,0,0,1412,1430,1,0,0,0,1413,
  	1415,3,104,52,0,1414,1416,5,136,0,0,1415,1414,1,0,0,0,1415,1416,1,0,0,
  	0,1416,1427,1,0,0,0,1417,1419,5,4,0,0,1418,1420,5,136,0,0,1419,1418,1,
  	0,0,0,1419,1420,1,0,0,0,1420,1421,1,0,0,0,1421,1423,3,104,52,0,1422,1424,
  	5,136,0,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,1424,1426,1,0,0,0,1425,
  	1417,1,0,0,0,1426,1429,1,0,0,0,1427,1425,1,0,0,0,1427,1428,1,0,0,0,1428,
  	1431,1,0,0,0,1429,1427,1,0,0,0,1430,1413,1,0,0,0,1430,1431,1,0,0,0,1431,
  	1432,1,0,0,0,1432,1433,5,3,0,0,1433,157,1,0,0,0,1434,1435,3,162,81,0,
  	1435,159,1,0,0,0,1436,1437,3,194,97,0,1437,161,1,0,0,0,1438,1439,3,164,
  	82,0,1439,1440,3,194,97,0,1440,163,1,0,0,0,1441,1442,3,194,97,0,1442,
  	1443,5,23,0,0,1443,1445,1,0,0,0,1444,1441,1,0,0,0,1445,1448,1,0,0,0,1446,
  	1444,1,0,0,0,1446,1447,1,0,0,0,1447,165,1,0,0,0,1448,1446,1,0,0,0,1449,
  	1451,5,8,0,0,1450,1452,5,136,0,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,
  	1452,1453,1,0,0,0,1453,1462,3,148,74,0,1454,1456,5,136,0,0,1455,1454,
  	1,0,0,0,1455,1456,1,0,0,0,1456,1457,1,0,0,0,1457,1459,5,11,0,0,1458,1460,
  	5,136,0,0,1459,1458,1,0,0,0,1459,1460,1,0,0,0,1460,1461,1,0,0,0,1461,
  	1463,3,104,52,0,1462,1455,1,0,0,0,1462,1463,1,0,0,0,1463,1465,1,0,0,0,
  	1464,1466,5,136,0,0,1465,1464,1,0,0,0,1465,1466,1,0,0,0,1466,1467,1,0,
  	0,0,1467,1468,5,9,0,0,1468,167,1,0,0,0,1469,1471,5,8,0,0,1470,1472,5,
  	136,0,0,1471,1470,1,0,0,0,1471,1472,1,0,0,0,1472,1481,1,0,0,0,1473,1475,
  	3,176,88,0,1474,1476,5,136,0,0,1475,1474,1,0,0,0,1475,1476,1,0,0,0,1476,
  	1477,1,0,0,0,1477,1479,5,5,0,0,1478,1480,5,136,0,0,1479,1478,1,0,0,0,
  	1479,1480,1,0,0,0,1480,1482,1,0,0,0,1481,1473,1,0,0,0,1481,1482,1,0,0,
  	0,1482,1483,1,0,0,0,1483,1485,3,146,73,0,1484,1486,5,136,0,0,1485,1484,
  	1,0,0,0,1485,1486,1,0,0,0,1486,1495,1,0,0,0,1487,1489,5,81,0,0,1488,1490,
  	5,136,0,0,1489,1488,1,0,0,0,1489,1490,1,0,0,0,1490,1491,1,0,0,0,1491,
  	1493,3,104,52,0,1492,1494,5,136,0,0,1493,1492,1,0,0,0,1493,1494,1,0,0,
  	0,1494,1496,1,0,0,0,1495,1487,1,0,0,0,1495,1496,1,0,0,0,1496,1497,1,0,
  	0,0,1497,1499,5,11,0,0,1498,1500,5,136,0,0,1499,1498,1,0,0,0,1499,1500,
  	1,0,0,0,1500,1501,1,0,0,0,1501,1503,3,104,52,0,1502,1504,5,136,0,0,1503,
  	1502,1,0,0,0,1503,1504,1,0,0,0,1504,1505,1,0,0,0,1505,1506,5,9,0,0,1506,
  	169,1,0,0,0,1507,1509,5,23,0,0,1508,1510,5,136,0,0,1509,1508,1,0,0,0,
  	1509,1510,1,0,0,0,1510,1511,1,0,0,0,1511,1512,3,186,93,0,1512,171,1,0,
  	0,0,1513,1518,5,101,0,0,1514,1516,5,136,0,0,1515,1514,1,0,0,0,1515,1516,
  	1,0,0,0,1516,1517,1,0,0,0,1517,1519,3,174,87,0,1518,1515,1,0,0,0,1519,
  	1520,1,0,0,0,1520,1518,1,0,0,0,1520,1521,1,0,0,0,1521,1536,1,0,0,0,1522,
  	1524,5,101,0,0,1523,1525,5,136,0,0,1524,1523,1,0,0,0,1524,1525,1,0,0,
  	0,1525,1526,1,0,0,0,1526,1531,3,104,52,0,1527,1529,5,136,0,0,1528,1527,
  	1,0,0,0,1528,1529,1,0,0,0,1529,1530,1,0,0,0,1530,1532,3,174,87,0,1531,
  	1528,1,0,0,0,1532,1533,1,0,0,0,1533,1531,1,0,0,0,1533,1534,1,0,0,0,1534,
  	1536,1,0,0,0,1535,1513,1,0,0,0,1535,1522,1,0,0,0,1536,1545,1,0,0,0,1537,
  	1539,5,136,0,0,1538,1537,1,0,0,0,1538,1539,1,0,0,0,1539,1540,1,0,0,0,
  	1540,1542,5,102,0,0,1541,1543,5,136,0,0,1542,1541,1,0,0,0,1542,1543,1,
  	0,0,0,1543,1544,1,0,0,0,1544,1546,3,104,52,0,1545,1538,1,0,0,0,1545,1546,
  	1,0,0,0,1546,1548,1,0,0,0,1547,1549,5,136,0,0,1548,1547,1,0,0,0,1548,
  	1549,1,0,0,0,1549,1550,1,0,0,0,1550,1551,5,103,0,0,1551,173,1,0,0,0,1552,
  	1554,5,104,0,0,1553,1555,5,136,0,0,1554,1553,1,0,0,0,1554,1555,1,0,0,
  	0,1555,1556,1,0,0,0,1556,1558,3,104,52,0,1557,1559,5,136,0,0,1558,1557,
  	1,0,0,0,1558,1559,1,0,0,0,1559,1560,1,0,0,0,1560,1562,5,105,0,0,1561,
  	1563,5,136,0,0,1562,1561,1,0,0,0,1562,1563,1,0,0,0,1563,1564,1,0,0,0,
  	1564,1565,3,104,52,0,1565,175,1,0,0,0,1566,1567,3,194,97,0,1567,177,1,
  	0,0,0,1568,1571,3,190,95,0,1569,1571,3,188,94,0,1570,1568,1,0,0,0,1570,
  	1569,1,0,0,0,1571,179,1,0,0,0,1572,1574,5,24,0,0,1573,1575,5,136,0,0,
  	1574,1573,1,0,0,0,1574,1575,1,0,0,0,1575,1609,1,0,0,0,1576,1578,3,186,
  	93,0,1577,1579,5,136,0,0,1578,1577,1,0,0,0,1578,1579,1,0,0,0,1579,1580,
  	1,0,0,0,1580,1582,5,10,0,0,1581,1583,5,136,0,0,1582,1581,1,0,0,0,1582,
  	1583,1,0,0,0,1583,1584,1,0,0,0,1584,1586,3,104,52,0,1585,1587,5,136,0,
  	0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,1606,1,0,0,0,1588,1590,5,4,
  	0,0,1589,1591,5,136,0,0,1590,1589,1,0,0,0,1590,1591,1,0,0,0,1591,1592,
  	1,0,0,0,1592,1594,3,186,93,0,1593,1595,5,136,0,0,1594,1593,1,0,0,0,1594,
  	1595,1,0,0,0,1595,1596,1,0,0,0,1596,1598,5,10,0,0,1597,1599,5,136,0,0,
  	1598,1597,1,0,0,0,1598,1599,1,0,0,0,1599,1600,1,0,0,0,1600,1602,3,104,
  	52,0,1601,1603,5,136,0,0,1602,1601,1,0,0,0,1602,1603,1,0,0,0,1603,1605,
  	1,0,0,0,1604,1588,1,0,0,0,1605,1608,1,0,0,0,1606,1604,1,0,0,0,1606,1607,
  	1,0,0,0,1607,1610,1,0,0,0,1608,1606,1,0,0,0,1609,1576,1,0,0,0,1609,1610,
  	1,0,0,0,1610,1611,1,0,0,0,1611,1612,5,25,0,0,1612,181,1,0,0,0,1613,1616,
  	5,26,0,0,1614,1617,3,194,97,0,1615,1617,5,109,0,0,1616,1614,1,0,0,0,1616,
  	1615,1,0,0,0,1617,183,1,0,0,0,1618,1623,3,134,67,0,1619,1621,5,136,0,
  	0,1620,1619,1,0,0,0,1620,1621,1,0,0,0,1621,1622,1,0,0,0,1622,1624,3,170,
  	85,0,1623,1620,1,0,0,0,1624,1625,1,0,0,0,1625,1623,1,0,0,0,1625,1626,
  	1,0,0,0,1626,185,1,0,0,0,1627,1628,3,192,96,0,1628,187,1,0,0,0,1629,1630,
  	7,3,0,0,1630,189,1,0,0,0,1631,1632,7,4,0,0,1632,191,1,0,0,0,1633,1636,
  	3,194,97,0,1634,1636,3,196,98,0,1635,1633,1,0,0,0,1635,1634,1,0,0,0,1636,
  	193,1,0,0,0,1637,1638,7,5,0,0,1638,195,1,0,0,0,1639,1640,7,6,0,0,1640,
  	197,1,0,0,0,1641,1642,7,7,0,0,1642,199,1,0,0,0,1643,1644,7,8,0,0,1644,
  	201,1,0,0,0,1645,1646,7,9,0,0,1646,203,1,0,0,0,304,205,209,212,215,222,
  	227,232,237,241,245,249,253,257,261,265,269,273,279,285,290,297,302,305,
  	309,313,317,323,327,332,337,341,344,346,350,354,359,363,368,372,381,386,
  	390,394,398,403,407,410,414,424,431,444,448,454,461,466,470,476,480,486,
  	490,496,500,504,508,512,516,521,528,532,537,544,550,555,561,567,572,576,
  	581,584,587,590,597,603,606,611,614,618,621,629,633,637,641,645,650,655,
  	659,664,667,676,685,690,703,706,722,730,734,739,744,748,753,759,764,771,
  	775,779,781,785,787,791,793,799,805,809,812,815,819,825,829,832,835,841,
  	844,847,851,857,860,863,867,871,875,877,881,883,886,890,892,895,899,901,
  	907,911,915,919,922,927,932,937,942,948,952,954,958,962,964,966,981,991,
  	1001,1006,1010,1017,1022,1027,1031,1035,1039,1042,1044,1049,1053,1057,
  	1061,1065,1069,1072,1074,1079,1083,1088,1093,1097,1106,1108,1114,1118,
  	1125,1129,1133,1136,1150,1153,1167,1171,1176,1180,1183,1190,1194,1198,
  	1205,1209,1213,1219,1223,1227,1233,1237,1241,1247,1251,1255,1263,1271,
  	1277,1281,1285,1289,1293,1296,1302,1307,1312,1317,1322,1327,1330,1334,
  	1338,1344,1349,1353,1356,1366,1370,1374,1376,1380,1384,1388,1392,1395,
  	1403,1407,1411,1415,1419,1423,1427,1430,1446,1451,1455,1459,1462,1465,
  	1471,1475,1479,1481,1485,1489,1493,1495,1499,1503,1509,1515,1520,1524,
  	1528,1533,1535,1538,1542,1545,1548,1554,1558,1562,1570,1574,1578,1582,
  	1586,1590,1594,1598,1602,1606,1609,1616,1620,1625,1635
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  lcypherParserStaticData = staticData.release();
}

}

LcypherParser::LcypherParser(TokenStream *input) : LcypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

LcypherParser::LcypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  LcypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *lcypherParserStaticData->atn, lcypherParserStaticData->decisionToDFA, lcypherParserStaticData->sharedContextCache, options);
}

LcypherParser::~LcypherParser() {
  delete _interpreter;
}

const atn::ATN& LcypherParser::getATN() const {
  return *lcypherParserStaticData->atn;
}

std::string LcypherParser::getGrammarFileName() const {
  return "Lcypher.g4";
}

const std::vector<std::string>& LcypherParser::getRuleNames() const {
  return lcypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& LcypherParser::getVocabulary() const {
  return lcypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView LcypherParser::getSerializedATN() const {
  return lcypherParserStaticData->serializedATN;
}


//----------------- OC_CypherContext ------------------------------------------------------------------

LcypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_StatementContext* LcypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<LcypherParser::OC_StatementContext>(0);
}

tree::TerminalNode* LcypherParser::OC_CypherContext::EOF() {
  return getToken(LcypherParser::EOF, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_CypherContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_CypherContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Cypher;
}


std::any LcypherParser::OC_CypherContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Cypher(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_CypherContext* LcypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 0, LcypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(205);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(204);
      match(LcypherParser::SP);
    }
    setState(207);
    oC_Statement();
    setState(212);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      setState(209);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(208);
        match(LcypherParser::SP);
      }
      setState(211);
      match(LcypherParser::T__0);
      break;
    }

    default:
      break;
    }
    setState(215);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(214);
      match(LcypherParser::SP);
    }
    setState(217);
    match(LcypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

LcypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_QueryContext* LcypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<LcypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* LcypherParser::OC_StatementContext::EXPLAIN() {
  return getToken(LcypherParser::EXPLAIN, 0);
}

tree::TerminalNode* LcypherParser::OC_StatementContext::SP() {
  return getToken(LcypherParser::SP, 0);
}

tree::TerminalNode* LcypherParser::OC_StatementContext::PROFILE() {
  return getToken(LcypherParser::PROFILE, 0);
}

tree::TerminalNode* LcypherParser::OC_StatementContext::OPTIMIZE() {
  return getToken(LcypherParser::OPTIMIZE, 0);
}

tree::TerminalNode* LcypherParser::OC_StatementContext::MAINTENANCE() {
  return getToken(LcypherParser::MAINTENANCE, 0);
}

LcypherParser::OC_ViewContext* LcypherParser::OC_StatementContext::oC_View() {
  return getRuleContext<LcypherParser::OC_ViewContext>(0);
}


size_t LcypherParser::OC_StatementContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Statement;
}


std::any LcypherParser::OC_StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Statement(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_StatementContext* LcypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 2, LcypherParser::RuleOC_Statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(241);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(219);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(220);
      match(LcypherParser::EXPLAIN);
      setState(222);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(221);
        match(LcypherParser::SP);
      }
      setState(224);
      oC_Query();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(225);
      match(LcypherParser::PROFILE);
      setState(227);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(226);
        match(LcypherParser::SP);
      }
      setState(229);
      oC_Query();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(230);
      match(LcypherParser::OPTIMIZE);
      setState(232);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(231);
        match(LcypherParser::SP);
      }
      setState(234);
      oC_Query();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(235);
      match(LcypherParser::MAINTENANCE);
      setState(237);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(236);
        match(LcypherParser::SP);
      }
      setState(239);
      oC_Query();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(240);
      oC_View();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

LcypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_RegularQueryContext* LcypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<LcypherParser::OC_RegularQueryContext>(0);
}

LcypherParser::OC_StandaloneCallContext* LcypherParser::OC_QueryContext::oC_StandaloneCall() {
  return getRuleContext<LcypherParser::OC_StandaloneCallContext>(0);
}


size_t LcypherParser::OC_QueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Query;
}


std::any LcypherParser::OC_QueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Query(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_QueryContext* LcypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 4, LcypherParser::RuleOC_Query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(245);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(243);
      oC_RegularQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(244);
      oC_StandaloneCall();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ViewContext ------------------------------------------------------------------

LcypherParser::OC_ViewContext::OC_ViewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_ViewContext::CREATE() {
  return getToken(LcypherParser::CREATE, 0);
}

tree::TerminalNode* LcypherParser::OC_ViewContext::VIEW() {
  return getToken(LcypherParser::VIEW, 0);
}

LcypherParser::OC_LabelNameContext* LcypherParser::OC_ViewContext::oC_LabelName() {
  return getRuleContext<LcypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_ViewContext::AS() {
  return getToken(LcypherParser::AS, 0);
}

LcypherParser::OC_ConstructContext* LcypherParser::OC_ViewContext::oC_Construct() {
  return getRuleContext<LcypherParser::OC_ConstructContext>(0);
}

LcypherParser::OC_MatchContext* LcypherParser::OC_ViewContext::oC_Match() {
  return getRuleContext<LcypherParser::OC_MatchContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ViewContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ViewContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_ViewContext::getRuleIndex() const {
  return LcypherParser::RuleOC_View;
}


std::any LcypherParser::OC_ViewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_View(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ViewContext* LcypherParser::oC_View() {
  OC_ViewContext *_localctx = _tracker.createInstance<OC_ViewContext>(_ctx, getState());
  enterRule(_localctx, 6, LcypherParser::RuleOC_View);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(247);
    match(LcypherParser::CREATE);
    setState(249);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(248);
      match(LcypherParser::SP);
    }
    setState(251);
    match(LcypherParser::VIEW);
    setState(253);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(252);
      match(LcypherParser::SP);
    }
    setState(255);
    oC_LabelName();
    setState(257);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(256);
      match(LcypherParser::SP);
    }
    setState(259);
    match(LcypherParser::AS);
    setState(261);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(260);
      match(LcypherParser::SP);
    }
    setState(263);
    match(LcypherParser::T__1);
    setState(265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(264);
      match(LcypherParser::SP);
    }
    setState(267);
    oC_Construct();
    setState(269);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(268);
      match(LcypherParser::SP);
    }
    setState(271);
    oC_Match();
    setState(273);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(272);
      match(LcypherParser::SP);
    }
    setState(275);
    match(LcypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ConstructContext ------------------------------------------------------------------

LcypherParser::OC_ConstructContext::OC_ConstructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_ConstructContext::CONSTRUCT() {
  return getToken(LcypherParser::CONSTRUCT, 0);
}

LcypherParser::OC_PatternElementContext* LcypherParser::OC_ConstructContext::oC_PatternElement() {
  return getRuleContext<LcypherParser::OC_PatternElementContext>(0);
}

tree::TerminalNode* LcypherParser::OC_ConstructContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_ConstructContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Construct;
}


std::any LcypherParser::OC_ConstructContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Construct(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ConstructContext* LcypherParser::oC_Construct() {
  OC_ConstructContext *_localctx = _tracker.createInstance<OC_ConstructContext>(_ctx, getState());
  enterRule(_localctx, 8, LcypherParser::RuleOC_Construct);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(277);
    match(LcypherParser::CONSTRUCT);
    setState(279);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(278);
      match(LcypherParser::SP);
    }
    setState(281);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

LcypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SingleQueryContext* LcypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<LcypherParser::OC_SingleQueryContext>(0);
}

std::vector<LcypherParser::OC_UnionContext *> LcypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<LcypherParser::OC_UnionContext>();
}

LcypherParser::OC_UnionContext* LcypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<LcypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RegularQueryContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RegularQuery;
}


std::any LcypherParser::OC_RegularQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RegularQuery(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RegularQueryContext* LcypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 10, LcypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(283);
    oC_SingleQuery();
    setState(290);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(285);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(284);
          match(LcypherParser::SP);
        }
        setState(287);
        oC_Union(); 
      }
      setState(292);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

LcypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_UnionContext::UNION() {
  return getToken(LcypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_UnionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_UnionContext::ALL() {
  return getToken(LcypherParser::ALL, 0);
}

LcypherParser::OC_SingleQueryContext* LcypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<LcypherParser::OC_SingleQueryContext>(0);
}


size_t LcypherParser::OC_UnionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Union;
}


std::any LcypherParser::OC_UnionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Union(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_UnionContext* LcypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 12, LcypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(305);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(293);
      match(LcypherParser::UNION);
      setState(294);
      match(LcypherParser::SP);
      setState(295);
      match(LcypherParser::ALL);
      setState(297);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(296);
        match(LcypherParser::SP);
      }
      setState(299);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(300);
      match(LcypherParser::UNION);
      setState(302);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(301);
        match(LcypherParser::SP);
      }
      setState(304);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

LcypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SinglePartQueryContext* LcypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<LcypherParser::OC_SinglePartQueryContext>(0);
}

LcypherParser::OC_MultiPartQueryContext* LcypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<LcypherParser::OC_MultiPartQueryContext>(0);
}


size_t LcypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SingleQuery;
}


std::any LcypherParser::OC_SingleQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SingleQuery(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SingleQueryContext* LcypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 14, LcypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(309);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(307);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(308);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

LcypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ReturnContext* LcypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<LcypherParser::OC_ReturnContext>(0);
}

std::vector<LcypherParser::OC_ReadingClauseContext *> LcypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<LcypherParser::OC_ReadingClauseContext>();
}

LcypherParser::OC_ReadingClauseContext* LcypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<LcypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_UpdatingClauseContext *> LcypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<LcypherParser::OC_UpdatingClauseContext>();
}

LcypherParser::OC_UpdatingClauseContext* LcypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<LcypherParser::OC_UpdatingClauseContext>(i);
}


size_t LcypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SinglePartQuery;
}


std::any LcypherParser::OC_SinglePartQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SinglePartQuery(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SinglePartQueryContext* LcypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 16, LcypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(346);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(317);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 54) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 54)) & 2055) != 0)) {
        setState(311);
        oC_ReadingClause();
        setState(313);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(312);
          match(LcypherParser::SP);
        }
        setState(319);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(320);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(327);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 54) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 54)) & 2055) != 0)) {
        setState(321);
        oC_ReadingClause();
        setState(323);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(322);
          match(LcypherParser::SP);
        }
        setState(329);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(330);
      oC_UpdatingClause();
      setState(337);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(332);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(331);
            match(LcypherParser::SP);
          }
          setState(334);
          oC_UpdatingClause(); 
        }
        setState(339);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx);
      }
      setState(344);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
      case 1: {
        setState(341);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(340);
          match(LcypherParser::SP);
        }
        setState(343);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

LcypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SinglePartQueryContext* LcypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<LcypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<LcypherParser::OC_WithContext *> LcypherParser::OC_MultiPartQueryContext::oC_With() {
  return getRuleContexts<LcypherParser::OC_WithContext>();
}

LcypherParser::OC_WithContext* LcypherParser::OC_MultiPartQueryContext::oC_With(size_t i) {
  return getRuleContext<LcypherParser::OC_WithContext>(i);
}

std::vector<LcypherParser::OC_ReadingClauseContext *> LcypherParser::OC_MultiPartQueryContext::oC_ReadingClause() {
  return getRuleContexts<LcypherParser::OC_ReadingClauseContext>();
}

LcypherParser::OC_ReadingClauseContext* LcypherParser::OC_MultiPartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<LcypherParser::OC_ReadingClauseContext>(i);
}

std::vector<LcypherParser::OC_UpdatingClauseContext *> LcypherParser::OC_MultiPartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<LcypherParser::OC_UpdatingClauseContext>();
}

LcypherParser::OC_UpdatingClauseContext* LcypherParser::OC_MultiPartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<LcypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return LcypherParser::RuleOC_MultiPartQuery;
}


std::any LcypherParser::OC_MultiPartQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_MultiPartQuery(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MultiPartQueryContext* LcypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 18, LcypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(370); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(354);
              _errHandler->sync(this);
              _la = _input->LA(1);
              while (((((_la - 54) & ~ 0x3fULL) == 0) &&
                ((1ULL << (_la - 54)) & 2055) != 0)) {
                setState(348);
                oC_ReadingClause();
                setState(350);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == LcypherParser::SP) {
                  setState(349);
                  match(LcypherParser::SP);
                }
                setState(356);
                _errHandler->sync(this);
                _la = _input->LA(1);
              }
              setState(363);
              _errHandler->sync(this);
              _la = _input->LA(1);
              while (((((_la - 58) & ~ 0x3fULL) == 0) &&
                ((1ULL << (_la - 58)) & 125) != 0)) {
                setState(357);
                oC_UpdatingClause();
                setState(359);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == LcypherParser::SP) {
                  setState(358);
                  match(LcypherParser::SP);
                }
                setState(365);
                _errHandler->sync(this);
                _la = _input->LA(1);
              }
              setState(366);
              oC_With();
              setState(368);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == LcypherParser::SP) {
                setState(367);
                match(LcypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(372); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(374);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

LcypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_CreateContext* LcypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<LcypherParser::OC_CreateContext>(0);
}

LcypherParser::OC_MergeContext* LcypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<LcypherParser::OC_MergeContext>(0);
}

LcypherParser::OC_DeleteContext* LcypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<LcypherParser::OC_DeleteContext>(0);
}

LcypherParser::OC_SetContext* LcypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<LcypherParser::OC_SetContext>(0);
}

LcypherParser::OC_RemoveContext* LcypherParser::OC_UpdatingClauseContext::oC_Remove() {
  return getRuleContext<LcypherParser::OC_RemoveContext>(0);
}


size_t LcypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return LcypherParser::RuleOC_UpdatingClause;
}


std::any LcypherParser::OC_UpdatingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_UpdatingClause(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_UpdatingClauseContext* LcypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 20, LcypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(381);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(376);
        oC_Create();
        break;
      }

      case LcypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(377);
        oC_Merge();
        break;
      }

      case LcypherParser::DETACH:
      case LcypherParser::DELETE_: {
        enterOuterAlt(_localctx, 3);
        setState(378);
        oC_Delete();
        break;
      }

      case LcypherParser::SET: {
        enterOuterAlt(_localctx, 4);
        setState(379);
        oC_Set();
        break;
      }

      case LcypherParser::REMOVE: {
        enterOuterAlt(_localctx, 5);
        setState(380);
        oC_Remove();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

LcypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_MatchContext* LcypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<LcypherParser::OC_MatchContext>(0);
}

LcypherParser::OC_UnwindContext* LcypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<LcypherParser::OC_UnwindContext>(0);
}

LcypherParser::OC_InQueryCallContext* LcypherParser::OC_ReadingClauseContext::oC_InQueryCall() {
  return getRuleContext<LcypherParser::OC_InQueryCallContext>(0);
}


size_t LcypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReadingClause;
}


std::any LcypherParser::OC_ReadingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReadingClause(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReadingClauseContext* LcypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 22, LcypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(386);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::OPTIONAL_:
      case LcypherParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(383);
        oC_Match();
        break;
      }

      case LcypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(384);
        oC_Unwind();
        break;
      }

      case LcypherParser::CALL: {
        enterOuterAlt(_localctx, 3);
        setState(385);
        oC_InQueryCall();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

LcypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_MatchContext::MATCH() {
  return getToken(LcypherParser::MATCH, 0);
}

LcypherParser::OC_PatternContext* LcypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<LcypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* LcypherParser::OC_MatchContext::OPTIONAL_() {
  return getToken(LcypherParser::OPTIONAL_, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MatchContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_HintContext *> LcypherParser::OC_MatchContext::oC_Hint() {
  return getRuleContexts<LcypherParser::OC_HintContext>();
}

LcypherParser::OC_HintContext* LcypherParser::OC_MatchContext::oC_Hint(size_t i) {
  return getRuleContext<LcypherParser::OC_HintContext>(i);
}

LcypherParser::OC_WhereContext* LcypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<LcypherParser::OC_WhereContext>(0);
}


size_t LcypherParser::OC_MatchContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Match;
}


std::any LcypherParser::OC_MatchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Match(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MatchContext* LcypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 24, LcypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(390);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::OPTIONAL_) {
      setState(388);
      match(LcypherParser::OPTIONAL_);
      setState(389);
      match(LcypherParser::SP);
    }
    setState(392);
    match(LcypherParser::MATCH);
    setState(394);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(393);
      match(LcypherParser::SP);
    }
    setState(396);
    oC_Pattern();
    setState(403);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(398);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(397);
          match(LcypherParser::SP);
        }
        setState(400);
        oC_Hint(); 
      }
      setState(405);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    }
    setState(410);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      setState(407);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(406);
        match(LcypherParser::SP);
      }
      setState(409);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

LcypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_UnwindContext::UNWIND() {
  return getToken(LcypherParser::UNWIND, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_UnwindContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_UnwindContext::AS() {
  return getToken(LcypherParser::AS, 0);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}


size_t LcypherParser::OC_UnwindContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Unwind;
}


std::any LcypherParser::OC_UnwindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Unwind(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_UnwindContext* LcypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 26, LcypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(412);
    match(LcypherParser::UNWIND);
    setState(414);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(413);
      match(LcypherParser::SP);
    }
    setState(416);
    oC_Expression();
    setState(417);
    match(LcypherParser::SP);
    setState(418);
    match(LcypherParser::AS);
    setState(419);
    match(LcypherParser::SP);
    setState(420);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

LcypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_MergeContext::MERGE() {
  return getToken(LcypherParser::MERGE, 0);
}

LcypherParser::OC_PatternPartContext* LcypherParser::OC_MergeContext::oC_PatternPart() {
  return getRuleContext<LcypherParser::OC_PatternPartContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MergeContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_MergeActionContext *> LcypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<LcypherParser::OC_MergeActionContext>();
}

LcypherParser::OC_MergeActionContext* LcypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<LcypherParser::OC_MergeActionContext>(i);
}


size_t LcypherParser::OC_MergeContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Merge;
}


std::any LcypherParser::OC_MergeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Merge(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MergeContext* LcypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 28, LcypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(422);
    match(LcypherParser::MERGE);
    setState(424);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(423);
      match(LcypherParser::SP);
    }
    setState(426);
    oC_PatternPart();
    setState(431);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(427);
        match(LcypherParser::SP);
        setState(428);
        oC_MergeAction(); 
      }
      setState(433);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

LcypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_MergeActionContext::ON() {
  return getToken(LcypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MergeActionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_MergeActionContext::MATCH() {
  return getToken(LcypherParser::MATCH, 0);
}

LcypherParser::OC_SetContext* LcypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<LcypherParser::OC_SetContext>(0);
}

tree::TerminalNode* LcypherParser::OC_MergeActionContext::CREATE() {
  return getToken(LcypherParser::CREATE, 0);
}


size_t LcypherParser::OC_MergeActionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_MergeAction;
}


std::any LcypherParser::OC_MergeActionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_MergeAction(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MergeActionContext* LcypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 30, LcypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(444);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(434);
      match(LcypherParser::ON);
      setState(435);
      match(LcypherParser::SP);
      setState(436);
      match(LcypherParser::MATCH);
      setState(437);
      match(LcypherParser::SP);
      setState(438);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(439);
      match(LcypherParser::ON);
      setState(440);
      match(LcypherParser::SP);
      setState(441);
      match(LcypherParser::CREATE);
      setState(442);
      match(LcypherParser::SP);
      setState(443);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

LcypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_CreateContext::CREATE() {
  return getToken(LcypherParser::CREATE, 0);
}

LcypherParser::OC_PatternContext* LcypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<LcypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* LcypherParser::OC_CreateContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_CreateContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Create;
}


std::any LcypherParser::OC_CreateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Create(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_CreateContext* LcypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 32, LcypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(446);
    match(LcypherParser::CREATE);
    setState(448);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(447);
      match(LcypherParser::SP);
    }
    setState(450);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

LcypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_SetContext::SET() {
  return getToken(LcypherParser::SET, 0);
}

std::vector<LcypherParser::OC_SetItemContext *> LcypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<LcypherParser::OC_SetItemContext>();
}

LcypherParser::OC_SetItemContext* LcypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<LcypherParser::OC_SetItemContext>(i);
}

tree::TerminalNode* LcypherParser::OC_SetContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_SetContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Set;
}


std::any LcypherParser::OC_SetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Set(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SetContext* LcypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 34, LcypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(452);
    match(LcypherParser::SET);
    setState(454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(453);
      match(LcypherParser::SP);
    }
    setState(456);
    oC_SetItem();
    setState(461);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LcypherParser::T__3) {
      setState(457);
      match(LcypherParser::T__3);
      setState(458);
      oC_SetItem();
      setState(463);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

LcypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PropertyExpressionContext* LcypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<LcypherParser::OC_PropertyExpressionContext>(0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_SetItemContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_SetItemContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::OC_SetItemContext::oC_NodeLabels() {
  return getRuleContext<LcypherParser::OC_NodeLabelsContext>(0);
}


size_t LcypherParser::OC_SetItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SetItem;
}


std::any LcypherParser::OC_SetItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SetItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SetItemContext* LcypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 36, LcypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(500);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(464);
      oC_PropertyExpression();
      setState(466);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(465);
        match(LcypherParser::SP);
      }
      setState(468);
      match(LcypherParser::T__4);
      setState(470);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(469);
        match(LcypherParser::SP);
      }
      setState(472);
      oC_Expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(474);
      oC_Variable();
      setState(476);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(475);
        match(LcypherParser::SP);
      }
      setState(478);
      match(LcypherParser::T__4);
      setState(480);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(479);
        match(LcypherParser::SP);
      }
      setState(482);
      oC_Expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(484);
      oC_Variable();
      setState(486);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(485);
        match(LcypherParser::SP);
      }
      setState(488);
      match(LcypherParser::T__5);
      setState(490);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(489);
        match(LcypherParser::SP);
      }
      setState(492);
      oC_Expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(494);
      oC_Variable();
      setState(496);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(495);
        match(LcypherParser::SP);
      }
      setState(498);
      oC_NodeLabels();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

LcypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_DeleteContext::DELETE_() {
  return getToken(LcypherParser::DELETE_, 0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* LcypherParser::OC_DeleteContext::DETACH() {
  return getToken(LcypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_DeleteContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_DeleteContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Delete;
}


std::any LcypherParser::OC_DeleteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Delete(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_DeleteContext* LcypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 38, LcypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(504);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::DETACH) {
      setState(502);
      match(LcypherParser::DETACH);
      setState(503);
      match(LcypherParser::SP);
    }
    setState(506);
    match(LcypherParser::DELETE_);
    setState(508);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(507);
      match(LcypherParser::SP);
    }
    setState(510);
    oC_Expression();
    setState(521);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(512);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(511);
          match(LcypherParser::SP);
        }
        setState(514);
        match(LcypherParser::T__3);
        setState(516);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(515);
          match(LcypherParser::SP);
        }
        setState(518);
        oC_Expression(); 
      }
      setState(523);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RemoveContext ------------------------------------------------------------------

LcypherParser::OC_RemoveContext::OC_RemoveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_RemoveContext::REMOVE() {
  return getToken(LcypherParser::REMOVE, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RemoveContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RemoveContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_RemoveItemContext *> LcypherParser::OC_RemoveContext::oC_RemoveItem() {
  return getRuleContexts<LcypherParser::OC_RemoveItemContext>();
}

LcypherParser::OC_RemoveItemContext* LcypherParser::OC_RemoveContext::oC_RemoveItem(size_t i) {
  return getRuleContext<LcypherParser::OC_RemoveItemContext>(i);
}


size_t LcypherParser::OC_RemoveContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Remove;
}


std::any LcypherParser::OC_RemoveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Remove(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RemoveContext* LcypherParser::oC_Remove() {
  OC_RemoveContext *_localctx = _tracker.createInstance<OC_RemoveContext>(_ctx, getState());
  enterRule(_localctx, 40, LcypherParser::RuleOC_Remove);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(524);
    match(LcypherParser::REMOVE);
    setState(525);
    match(LcypherParser::SP);
    setState(526);
    oC_RemoveItem();
    setState(537);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(528);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(527);
          match(LcypherParser::SP);
        }
        setState(530);
        match(LcypherParser::T__3);
        setState(532);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(531);
          match(LcypherParser::SP);
        }
        setState(534);
        oC_RemoveItem(); 
      }
      setState(539);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RemoveItemContext ------------------------------------------------------------------

LcypherParser::OC_RemoveItemContext::OC_RemoveItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_VariableContext* LcypherParser::OC_RemoveItemContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::OC_RemoveItemContext::oC_NodeLabels() {
  return getRuleContext<LcypherParser::OC_NodeLabelsContext>(0);
}

LcypherParser::OC_PropertyExpressionContext* LcypherParser::OC_RemoveItemContext::oC_PropertyExpression() {
  return getRuleContext<LcypherParser::OC_PropertyExpressionContext>(0);
}


size_t LcypherParser::OC_RemoveItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RemoveItem;
}


std::any LcypherParser::OC_RemoveItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RemoveItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RemoveItemContext* LcypherParser::oC_RemoveItem() {
  OC_RemoveItemContext *_localctx = _tracker.createInstance<OC_RemoveItemContext>(_ctx, getState());
  enterRule(_localctx, 42, LcypherParser::RuleOC_RemoveItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(544);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(540);
      oC_Variable();
      setState(541);
      oC_NodeLabels();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(543);
      oC_PropertyExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_InQueryCallContext ------------------------------------------------------------------

LcypherParser::OC_InQueryCallContext::OC_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_InQueryCallContext::CALL() {
  return getToken(LcypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_InQueryCallContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_InQueryCallContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ExplicitProcedureInvocationContext* LcypherParser::OC_InQueryCallContext::oC_ExplicitProcedureInvocation() {
  return getRuleContext<LcypherParser::OC_ExplicitProcedureInvocationContext>(0);
}

tree::TerminalNode* LcypherParser::OC_InQueryCallContext::YIELD() {
  return getToken(LcypherParser::YIELD, 0);
}

LcypherParser::OC_YieldItemsContext* LcypherParser::OC_InQueryCallContext::oC_YieldItems() {
  return getRuleContext<LcypherParser::OC_YieldItemsContext>(0);
}


size_t LcypherParser::OC_InQueryCallContext::getRuleIndex() const {
  return LcypherParser::RuleOC_InQueryCall;
}


std::any LcypherParser::OC_InQueryCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_InQueryCall(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_InQueryCallContext* LcypherParser::oC_InQueryCall() {
  OC_InQueryCallContext *_localctx = _tracker.createInstance<OC_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 44, LcypherParser::RuleOC_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(546);
    match(LcypherParser::CALL);
    setState(547);
    match(LcypherParser::SP);
    setState(548);
    oC_ExplicitProcedureInvocation();
    setState(555);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      setState(550);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(549);
        match(LcypherParser::SP);
      }
      setState(552);
      match(LcypherParser::YIELD);
      setState(553);
      match(LcypherParser::SP);
      setState(554);
      oC_YieldItems();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StandaloneCallContext ------------------------------------------------------------------

LcypherParser::OC_StandaloneCallContext::OC_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_StandaloneCallContext::CALL() {
  return getToken(LcypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_StandaloneCallContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_StandaloneCallContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ExplicitProcedureInvocationContext* LcypherParser::OC_StandaloneCallContext::oC_ExplicitProcedureInvocation() {
  return getRuleContext<LcypherParser::OC_ExplicitProcedureInvocationContext>(0);
}

LcypherParser::OC_ImplicitProcedureInvocationContext* LcypherParser::OC_StandaloneCallContext::oC_ImplicitProcedureInvocation() {
  return getRuleContext<LcypherParser::OC_ImplicitProcedureInvocationContext>(0);
}

tree::TerminalNode* LcypherParser::OC_StandaloneCallContext::YIELD() {
  return getToken(LcypherParser::YIELD, 0);
}

LcypherParser::OC_YieldItemsContext* LcypherParser::OC_StandaloneCallContext::oC_YieldItems() {
  return getRuleContext<LcypherParser::OC_YieldItemsContext>(0);
}


size_t LcypherParser::OC_StandaloneCallContext::getRuleIndex() const {
  return LcypherParser::RuleOC_StandaloneCall;
}


std::any LcypherParser::OC_StandaloneCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_StandaloneCall(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_StandaloneCallContext* LcypherParser::oC_StandaloneCall() {
  OC_StandaloneCallContext *_localctx = _tracker.createInstance<OC_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 46, LcypherParser::RuleOC_StandaloneCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(557);
    match(LcypherParser::CALL);
    setState(558);
    match(LcypherParser::SP);
    setState(561);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      setState(559);
      oC_ExplicitProcedureInvocation();
      break;
    }

    case 2: {
      setState(560);
      oC_ImplicitProcedureInvocation();
      break;
    }

    default:
      break;
    }
    setState(567);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      setState(563);
      match(LcypherParser::SP);
      setState(564);
      match(LcypherParser::YIELD);
      setState(565);
      match(LcypherParser::SP);
      setState(566);
      oC_YieldItems();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_YieldItemsContext ------------------------------------------------------------------

LcypherParser::OC_YieldItemsContext::OC_YieldItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_WhereContext* LcypherParser::OC_YieldItemsContext::oC_Where() {
  return getRuleContext<LcypherParser::OC_WhereContext>(0);
}

std::vector<LcypherParser::OC_YieldItemContext *> LcypherParser::OC_YieldItemsContext::oC_YieldItem() {
  return getRuleContexts<LcypherParser::OC_YieldItemContext>();
}

LcypherParser::OC_YieldItemContext* LcypherParser::OC_YieldItemsContext::oC_YieldItem(size_t i) {
  return getRuleContext<LcypherParser::OC_YieldItemContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_YieldItemsContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_YieldItemsContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_YieldItemsContext::getRuleIndex() const {
  return LcypherParser::RuleOC_YieldItems;
}


std::any LcypherParser::OC_YieldItemsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_YieldItems(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_YieldItemsContext* LcypherParser::oC_YieldItems() {
  OC_YieldItemsContext *_localctx = _tracker.createInstance<OC_YieldItemsContext>(_ctx, getState());
  enterRule(_localctx, 48, LcypherParser::RuleOC_YieldItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(584);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::T__6: {
        setState(569);
        match(LcypherParser::T__6);
        break;
      }

      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        setState(570);
        oC_YieldItem();
        setState(581);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(572);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(571);
              match(LcypherParser::SP);
            }
            setState(574);
            match(LcypherParser::T__3);
            setState(576);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(575);
              match(LcypherParser::SP);
            }
            setState(578);
            oC_YieldItem(); 
          }
          setState(583);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(590);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      setState(587);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(586);
        match(LcypherParser::SP);
      }
      setState(589);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_YieldItemContext ------------------------------------------------------------------

LcypherParser::OC_YieldItemContext::OC_YieldItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_VariableContext* LcypherParser::OC_YieldItemContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_ProcedureResultFieldContext* LcypherParser::OC_YieldItemContext::oC_ProcedureResultField() {
  return getRuleContext<LcypherParser::OC_ProcedureResultFieldContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_YieldItemContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_YieldItemContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_YieldItemContext::AS() {
  return getToken(LcypherParser::AS, 0);
}


size_t LcypherParser::OC_YieldItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_YieldItem;
}


std::any LcypherParser::OC_YieldItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_YieldItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_YieldItemContext* LcypherParser::oC_YieldItem() {
  OC_YieldItemContext *_localctx = _tracker.createInstance<OC_YieldItemContext>(_ctx, getState());
  enterRule(_localctx, 50, LcypherParser::RuleOC_YieldItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(597);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      setState(592);
      oC_ProcedureResultField();
      setState(593);
      match(LcypherParser::SP);
      setState(594);
      match(LcypherParser::AS);
      setState(595);
      match(LcypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(599);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

LcypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_WithContext::WITH() {
  return getToken(LcypherParser::WITH, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_WithContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_WithContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ReturnBodyContext* LcypherParser::OC_WithContext::oC_ReturnBody() {
  return getRuleContext<LcypherParser::OC_ReturnBodyContext>(0);
}

tree::TerminalNode* LcypherParser::OC_WithContext::DISTINCT() {
  return getToken(LcypherParser::DISTINCT, 0);
}

LcypherParser::OC_WhereContext* LcypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<LcypherParser::OC_WhereContext>(0);
}


size_t LcypherParser::OC_WithContext::getRuleIndex() const {
  return LcypherParser::RuleOC_With;
}


std::any LcypherParser::OC_WithContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_With(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_WithContext* LcypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 52, LcypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(601);
    match(LcypherParser::WITH);
    setState(606);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
    case 1: {
      setState(603);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(602);
        match(LcypherParser::SP);
      }
      setState(605);
      match(LcypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(608);
    match(LcypherParser::SP);
    setState(609);
    oC_ReturnBody();
    setState(614);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      setState(611);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(610);
        match(LcypherParser::SP);
      }
      setState(613);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

LcypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_ReturnContext::RETURN() {
  return getToken(LcypherParser::RETURN, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ReturnContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ReturnContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ReturnBodyContext* LcypherParser::OC_ReturnContext::oC_ReturnBody() {
  return getRuleContext<LcypherParser::OC_ReturnBodyContext>(0);
}

tree::TerminalNode* LcypherParser::OC_ReturnContext::DISTINCT() {
  return getToken(LcypherParser::DISTINCT, 0);
}


size_t LcypherParser::OC_ReturnContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Return;
}


std::any LcypherParser::OC_ReturnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Return(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReturnContext* LcypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 54, LcypherParser::RuleOC_Return);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(616);
    match(LcypherParser::RETURN);
    setState(621);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      setState(618);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(617);
        match(LcypherParser::SP);
      }
      setState(620);
      match(LcypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(623);
    match(LcypherParser::SP);
    setState(624);
    oC_ReturnBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnBodyContext ------------------------------------------------------------------

LcypherParser::OC_ReturnBodyContext::OC_ReturnBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ReturnItemsContext* LcypherParser::OC_ReturnBodyContext::oC_ReturnItems() {
  return getRuleContext<LcypherParser::OC_ReturnItemsContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ReturnBodyContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ReturnBodyContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_OrderContext* LcypherParser::OC_ReturnBodyContext::oC_Order() {
  return getRuleContext<LcypherParser::OC_OrderContext>(0);
}

LcypherParser::OC_SkipContext* LcypherParser::OC_ReturnBodyContext::oC_Skip() {
  return getRuleContext<LcypherParser::OC_SkipContext>(0);
}

LcypherParser::OC_LimitContext* LcypherParser::OC_ReturnBodyContext::oC_Limit() {
  return getRuleContext<LcypherParser::OC_LimitContext>(0);
}


size_t LcypherParser::OC_ReturnBodyContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReturnBody;
}


std::any LcypherParser::OC_ReturnBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReturnBody(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReturnBodyContext* LcypherParser::oC_ReturnBody() {
  OC_ReturnBodyContext *_localctx = _tracker.createInstance<OC_ReturnBodyContext>(_ctx, getState());
  enterRule(_localctx, 56, LcypherParser::RuleOC_ReturnBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(626);
    oC_ReturnItems();
    setState(629);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      setState(627);
      match(LcypherParser::SP);
      setState(628);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(633);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      setState(631);
      match(LcypherParser::SP);
      setState(632);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(637);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      setState(635);
      match(LcypherParser::SP);
      setState(636);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnItemsContext ------------------------------------------------------------------

LcypherParser::OC_ReturnItemsContext::OC_ReturnItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_ReturnItemContext *> LcypherParser::OC_ReturnItemsContext::oC_ReturnItem() {
  return getRuleContexts<LcypherParser::OC_ReturnItemContext>();
}

LcypherParser::OC_ReturnItemContext* LcypherParser::OC_ReturnItemsContext::oC_ReturnItem(size_t i) {
  return getRuleContext<LcypherParser::OC_ReturnItemContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ReturnItemsContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ReturnItemsContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_ReturnItemsContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReturnItems;
}


std::any LcypherParser::OC_ReturnItemsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReturnItems(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReturnItemsContext* LcypherParser::oC_ReturnItems() {
  OC_ReturnItemsContext *_localctx = _tracker.createInstance<OC_ReturnItemsContext>(_ctx, getState());
  enterRule(_localctx, 58, LcypherParser::RuleOC_ReturnItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(667);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(639);
        match(LcypherParser::T__6);
        setState(650);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(641);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(640);
              match(LcypherParser::SP);
            }
            setState(643);
            match(LcypherParser::T__3);
            setState(645);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(644);
              match(LcypherParser::SP);
            }
            setState(647);
            oC_ReturnItem(); 
          }
          setState(652);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx);
        }
        break;
      }

      case LcypherParser::T__1:
      case LcypherParser::T__7:
      case LcypherParser::T__12:
      case LcypherParser::T__13:
      case LcypherParser::T__23:
      case LcypherParser::T__25:
      case LcypherParser::ALL:
      case LcypherParser::NOT:
      case LcypherParser::NULL_:
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::TRUE_:
      case LcypherParser::FALSE_:
      case LcypherParser::EXISTS:
      case LcypherParser::CASE:
      case LcypherParser::StringLiteral:
      case LcypherParser::HexInteger:
      case LcypherParser::DecimalInteger:
      case LcypherParser::OctalInteger:
      case LcypherParser::HexLetter:
      case LcypherParser::ExponentDecimalReal:
      case LcypherParser::RegularDecimalReal:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(653);
        oC_ReturnItem();
        setState(664);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(655);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(654);
              match(LcypherParser::SP);
            }
            setState(657);
            match(LcypherParser::T__3);
            setState(659);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == LcypherParser::SP) {
              setState(658);
              match(LcypherParser::SP);
            }
            setState(661);
            oC_ReturnItem(); 
          }
          setState(666);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnItemContext ------------------------------------------------------------------

LcypherParser::OC_ReturnItemContext::OC_ReturnItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ReturnItemContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ReturnItemContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ReturnItemContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_ReturnItemContext::AS() {
  return getToken(LcypherParser::AS, 0);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_ReturnItemContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}


size_t LcypherParser::OC_ReturnItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReturnItem;
}


std::any LcypherParser::OC_ReturnItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReturnItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReturnItemContext* LcypherParser::oC_ReturnItem() {
  OC_ReturnItemContext *_localctx = _tracker.createInstance<OC_ReturnItemContext>(_ctx, getState());
  enterRule(_localctx, 60, LcypherParser::RuleOC_ReturnItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(676);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(669);
      oC_Expression();
      setState(670);
      match(LcypherParser::SP);
      setState(671);
      match(LcypherParser::AS);
      setState(672);
      match(LcypherParser::SP);
      setState(673);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(675);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

LcypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_OrderContext::ORDER() {
  return getToken(LcypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_OrderContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_OrderContext::BY() {
  return getToken(LcypherParser::BY, 0);
}

std::vector<LcypherParser::OC_SortItemContext *> LcypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<LcypherParser::OC_SortItemContext>();
}

LcypherParser::OC_SortItemContext* LcypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<LcypherParser::OC_SortItemContext>(i);
}


size_t LcypherParser::OC_OrderContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Order;
}


std::any LcypherParser::OC_OrderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Order(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_OrderContext* LcypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 62, LcypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(678);
    match(LcypherParser::ORDER);
    setState(679);
    match(LcypherParser::SP);
    setState(680);
    match(LcypherParser::BY);
    setState(681);
    match(LcypherParser::SP);
    setState(682);
    oC_SortItem();
    setState(690);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LcypherParser::T__3) {
      setState(683);
      match(LcypherParser::T__3);
      setState(685);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(684);
        match(LcypherParser::SP);
      }
      setState(687);
      oC_SortItem();
      setState(692);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

LcypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_SkipContext::L_SKIP() {
  return getToken(LcypherParser::L_SKIP, 0);
}

tree::TerminalNode* LcypherParser::OC_SkipContext::SP() {
  return getToken(LcypherParser::SP, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_SkipContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Skip;
}


std::any LcypherParser::OC_SkipContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Skip(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SkipContext* LcypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 64, LcypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(693);
    match(LcypherParser::L_SKIP);
    setState(694);
    match(LcypherParser::SP);
    setState(695);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

LcypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_LimitContext::LIMIT() {
  return getToken(LcypherParser::LIMIT, 0);
}

tree::TerminalNode* LcypherParser::OC_LimitContext::SP() {
  return getToken(LcypherParser::SP, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_LimitContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Limit;
}


std::any LcypherParser::OC_LimitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Limit(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_LimitContext* LcypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 66, LcypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(697);
    match(LcypherParser::LIMIT);
    setState(698);
    match(LcypherParser::SP);
    setState(699);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

LcypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(LcypherParser::ASCENDING, 0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::ASC() {
  return getToken(LcypherParser::ASC, 0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(LcypherParser::DESCENDING, 0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::DESC() {
  return getToken(LcypherParser::DESC, 0);
}

tree::TerminalNode* LcypherParser::OC_SortItemContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_SortItemContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SortItem;
}


std::any LcypherParser::OC_SortItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SortItem(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SortItemContext* LcypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 68, LcypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(701);
    oC_Expression();
    setState(706);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      setState(703);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(702);
        match(LcypherParser::SP);
      }
      setState(705);
      _la = _input->LA(1);
      if (!(((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_HintContext ------------------------------------------------------------------

LcypherParser::OC_HintContext::OC_HintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_HintContext::USING() {
  return getToken(LcypherParser::USING, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_HintContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_HintContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_HintContext::JOIN() {
  return getToken(LcypherParser::JOIN, 0);
}

tree::TerminalNode* LcypherParser::OC_HintContext::ON() {
  return getToken(LcypherParser::ON, 0);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_HintContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

tree::TerminalNode* LcypherParser::OC_HintContext::START() {
  return getToken(LcypherParser::START, 0);
}


size_t LcypherParser::OC_HintContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Hint;
}


std::any LcypherParser::OC_HintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Hint(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_HintContext* LcypherParser::oC_Hint() {
  OC_HintContext *_localctx = _tracker.createInstance<OC_HintContext>(_ctx, getState());
  enterRule(_localctx, 70, LcypherParser::RuleOC_Hint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(722);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(708);
      match(LcypherParser::USING);
      setState(709);
      match(LcypherParser::SP);
      setState(710);
      match(LcypherParser::JOIN);
      setState(711);
      match(LcypherParser::SP);
      setState(712);
      match(LcypherParser::ON);
      setState(713);
      match(LcypherParser::SP);
      setState(714);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(715);
      match(LcypherParser::USING);
      setState(716);
      match(LcypherParser::SP);
      setState(717);
      match(LcypherParser::START);
      setState(718);
      match(LcypherParser::SP);
      setState(719);
      match(LcypherParser::ON);
      setState(720);
      match(LcypherParser::SP);
      setState(721);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

LcypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_WhereContext::WHERE() {
  return getToken(LcypherParser::WHERE, 0);
}

tree::TerminalNode* LcypherParser::OC_WhereContext::SP() {
  return getToken(LcypherParser::SP, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_WhereContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Where;
}


std::any LcypherParser::OC_WhereContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Where(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_WhereContext* LcypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 72, LcypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(724);
    match(LcypherParser::WHERE);
    setState(725);
    match(LcypherParser::SP);
    setState(726);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

LcypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_PatternPartContext *> LcypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<LcypherParser::OC_PatternPartContext>();
}

LcypherParser::OC_PatternPartContext* LcypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<LcypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PatternContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PatternContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Pattern;
}


std::any LcypherParser::OC_PatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Pattern(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternContext* LcypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 74, LcypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(728);
    oC_PatternPart();
    setState(739);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(730);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(729);
          match(LcypherParser::SP);
        }
        setState(732);
        match(LcypherParser::T__3);
        setState(734);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(733);
          match(LcypherParser::SP);
        }
        setState(736);
        oC_PatternPart(); 
      }
      setState(741);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

LcypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_VariableContext* LcypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_AnonymousPatternPartContext* LcypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<LcypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PatternPartContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PatternPartContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PatternPart;
}


std::any LcypherParser::OC_PatternPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternPart(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternPartContext* LcypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 76, LcypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(753);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(742);
        oC_Variable();
        setState(744);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(743);
          match(LcypherParser::SP);
        }
        setState(746);
        match(LcypherParser::T__4);
        setState(748);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(747);
          match(LcypherParser::SP);
        }
        setState(750);
        oC_AnonymousPatternPart();
        break;
      }

      case LcypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(752);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

LcypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PatternElementContext* LcypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<LcypherParser::OC_PatternElementContext>(0);
}


size_t LcypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return LcypherParser::RuleOC_AnonymousPatternPart;
}


std::any LcypherParser::OC_AnonymousPatternPartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_AnonymousPatternPart(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_AnonymousPatternPartContext* LcypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 78, LcypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(755);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

LcypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NodePatternContext* LcypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<LcypherParser::OC_NodePatternContext>(0);
}

std::vector<LcypherParser::OC_PatternElementChainContext *> LcypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<LcypherParser::OC_PatternElementChainContext>();
}

LcypherParser::OC_PatternElementChainContext* LcypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<LcypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PatternElementContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_PatternElementContext* LcypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<LcypherParser::OC_PatternElementContext>(0);
}


size_t LcypherParser::OC_PatternElementContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PatternElement;
}


std::any LcypherParser::OC_PatternElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternElement(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternElementContext* LcypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 80, LcypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(771);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(757);
      oC_NodePattern();
      setState(764);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(759);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(758);
            match(LcypherParser::SP);
          }
          setState(761);
          oC_PatternElementChain(); 
        }
        setState(766);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(767);
      match(LcypherParser::T__1);
      setState(768);
      oC_PatternElement();
      setState(769);
      match(LcypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

LcypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NodePatternContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<LcypherParser::OC_NodeLabelsContext>(0);
}

LcypherParser::OC_PropertiesContext* LcypherParser::OC_NodePatternContext::oC_Properties() {
  return getRuleContext<LcypherParser::OC_PropertiesContext>(0);
}


size_t LcypherParser::OC_NodePatternContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NodePattern;
}


std::any LcypherParser::OC_NodePatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NodePattern(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NodePatternContext* LcypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 82, LcypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(773);
    match(LcypherParser::T__1);
    setState(775);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(774);
      match(LcypherParser::SP);
    }
    setState(781);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 94) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 94)) & 2199493148687) != 0)) {
      setState(777);
      oC_Variable();
      setState(779);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(778);
        match(LcypherParser::SP);
      }
    }
    setState(787);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__9) {
      setState(783);
      oC_NodeLabels();
      setState(785);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(784);
        match(LcypherParser::SP);
      }
    }
    setState(793);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__23

    || _la == LcypherParser::T__25) {
      setState(789);
      oC_Properties();
      setState(791);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(790);
        match(LcypherParser::SP);
      }
    }
    setState(795);
    match(LcypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

LcypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_RelationshipPatternContext* LcypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<LcypherParser::OC_RelationshipPatternContext>(0);
}

LcypherParser::OC_NodePatternContext* LcypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<LcypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* LcypherParser::OC_PatternElementChainContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PatternElementChain;
}


std::any LcypherParser::OC_PatternElementChainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternElementChain(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternElementChainContext* LcypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 84, LcypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(797);
    oC_RelationshipPattern();
    setState(799);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(798);
      match(LcypherParser::SP);
    }
    setState(801);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

LcypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_LeftArrowHeadContext* LcypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<LcypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<LcypherParser::OC_DashContext *> LcypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<LcypherParser::OC_DashContext>();
}

LcypherParser::OC_DashContext* LcypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<LcypherParser::OC_DashContext>(i);
}

LcypherParser::OC_RightArrowHeadContext* LcypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<LcypherParser::OC_RightArrowHeadContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_RelationshipDetailContext* LcypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<LcypherParser::OC_RelationshipDetailContext>(0);
}


size_t LcypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelationshipPattern;
}


std::any LcypherParser::OC_RelationshipPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipPattern(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelationshipPatternContext* LcypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 86, LcypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(867);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(803);
      oC_LeftArrowHead();
      setState(805);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(804);
        match(LcypherParser::SP);
      }
      setState(807);
      oC_Dash();
      setState(809);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
      case 1: {
        setState(808);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(812);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::T__7) {
        setState(811);
        oC_RelationshipDetail();
      }
      setState(815);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(814);
        match(LcypherParser::SP);
      }
      setState(817);
      oC_Dash();
      setState(819);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(818);
        match(LcypherParser::SP);
      }
      setState(821);
      oC_RightArrowHead();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(823);
      oC_LeftArrowHead();
      setState(825);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(824);
        match(LcypherParser::SP);
      }
      setState(827);
      oC_Dash();
      setState(829);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
      case 1: {
        setState(828);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(832);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::T__7) {
        setState(831);
        oC_RelationshipDetail();
      }
      setState(835);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(834);
        match(LcypherParser::SP);
      }
      setState(837);
      oC_Dash();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(839);
      oC_Dash();
      setState(841);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
      case 1: {
        setState(840);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(844);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::T__7) {
        setState(843);
        oC_RelationshipDetail();
      }
      setState(847);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(846);
        match(LcypherParser::SP);
      }
      setState(849);
      oC_Dash();
      setState(851);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(850);
        match(LcypherParser::SP);
      }
      setState(853);
      oC_RightArrowHead();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(855);
      oC_Dash();
      setState(857);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
      case 1: {
        setState(856);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(860);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::T__7) {
        setState(859);
        oC_RelationshipDetail();
      }
      setState(863);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(862);
        match(LcypherParser::SP);
      }
      setState(865);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

LcypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

LcypherParser::OC_RelationshipTypesContext* LcypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<LcypherParser::OC_RelationshipTypesContext>(0);
}

LcypherParser::OC_RangeLiteralContext* LcypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<LcypherParser::OC_RangeLiteralContext>(0);
}

LcypherParser::OC_PropertiesContext* LcypherParser::OC_RelationshipDetailContext::oC_Properties() {
  return getRuleContext<LcypherParser::OC_PropertiesContext>(0);
}

tree::TerminalNode* LcypherParser::OC_RelationshipDetailContext::NO_DUPLICATE_EDGE() {
  return getToken(LcypherParser::NO_DUPLICATE_EDGE, 0);
}


size_t LcypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelationshipDetail;
}


std::any LcypherParser::OC_RelationshipDetailContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipDetail(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelationshipDetailContext* LcypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 88, LcypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(869);
    match(LcypherParser::T__7);
    setState(871);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx)) {
    case 1: {
      setState(870);
      match(LcypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(877);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 94) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 94)) & 2199493148687) != 0)) {
      setState(873);
      oC_Variable();
      setState(875);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
      case 1: {
        setState(874);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
    }
    setState(883);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__9) {
      setState(879);
      oC_RelationshipTypes();
      setState(881);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
      case 1: {
        setState(880);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
    }
    setState(886);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__6) {
      setState(885);
      oC_RangeLiteral();
    }
    setState(892);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__23

    || _la == LcypherParser::T__25) {
      setState(888);
      oC_Properties();
      setState(890);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx)) {
      case 1: {
        setState(889);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
    }
    setState(901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::NO_DUPLICATE_EDGE

    || _la == LcypherParser::SP) {
      setState(895);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(894);
        match(LcypherParser::SP);
      }
      setState(897);
      match(LcypherParser::NO_DUPLICATE_EDGE);
      setState(899);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(898);
        match(LcypherParser::SP);
      }
    }
    setState(903);
    match(LcypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertiesContext ------------------------------------------------------------------

LcypherParser::OC_PropertiesContext::OC_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_MapLiteralContext* LcypherParser::OC_PropertiesContext::oC_MapLiteral() {
  return getRuleContext<LcypherParser::OC_MapLiteralContext>(0);
}

LcypherParser::OC_ParameterContext* LcypherParser::OC_PropertiesContext::oC_Parameter() {
  return getRuleContext<LcypherParser::OC_ParameterContext>(0);
}


size_t LcypherParser::OC_PropertiesContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Properties;
}


std::any LcypherParser::OC_PropertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Properties(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertiesContext* LcypherParser::oC_Properties() {
  OC_PropertiesContext *_localctx = _tracker.createInstance<OC_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 90, LcypherParser::RuleOC_Properties);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(907);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::T__23: {
        enterOuterAlt(_localctx, 1);
        setState(905);
        oC_MapLiteral();
        break;
      }

      case LcypherParser::T__25: {
        enterOuterAlt(_localctx, 2);
        setState(906);
        oC_Parameter();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

LcypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_RelTypeNameContext *> LcypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<LcypherParser::OC_RelTypeNameContext>();
}

LcypherParser::OC_RelTypeNameContext* LcypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<LcypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelationshipTypes;
}


std::any LcypherParser::OC_RelationshipTypesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipTypes(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelationshipTypesContext* LcypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 92, LcypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(909);
    match(LcypherParser::T__9);
    setState(911);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(910);
      match(LcypherParser::SP);
    }
    setState(913);
    oC_RelTypeName();
    setState(927);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(915);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(914);
          match(LcypherParser::SP);
        }
        setState(917);
        match(LcypherParser::T__10);
        setState(919);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::T__9) {
          setState(918);
          match(LcypherParser::T__9);
        }
        setState(922);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(921);
          match(LcypherParser::SP);
        }
        setState(924);
        oC_RelTypeName(); 
      }
      setState(929);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

LcypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_NodeLabelContext *> LcypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<LcypherParser::OC_NodeLabelContext>();
}

LcypherParser::OC_NodeLabelContext* LcypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<LcypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NodeLabels;
}


std::any LcypherParser::OC_NodeLabelsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NodeLabels(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 94, LcypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(930);
    oC_NodeLabel();
    setState(937);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(932);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(931);
          match(LcypherParser::SP);
        }
        setState(934);
        oC_NodeLabel(); 
      }
      setState(939);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

LcypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_LabelNameContext* LcypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<LcypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_NodeLabelContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NodeLabel;
}


std::any LcypherParser::OC_NodeLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NodeLabel(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NodeLabelContext* LcypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
  enterRule(_localctx, 96, LcypherParser::RuleOC_NodeLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(940);
    match(LcypherParser::T__9);
    setState(942);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(941);
      match(LcypherParser::SP);
    }
    setState(944);
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

LcypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_IntegerLiteralContext *> LcypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContexts<LcypherParser::OC_IntegerLiteralContext>();
}

LcypherParser::OC_IntegerLiteralContext* LcypherParser::OC_RangeLiteralContext::oC_IntegerLiteral(size_t i) {
  return getRuleContext<LcypherParser::OC_IntegerLiteralContext>(i);
}


size_t LcypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RangeLiteral;
}


std::any LcypherParser::OC_RangeLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RangeLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RangeLiteralContext* LcypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 98, LcypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(946);
    match(LcypherParser::T__6);
    setState(948);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      setState(947);
      match(LcypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(954);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 108) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 108)) & 7) != 0)) {
      setState(950);
      oC_IntegerLiteral();
      setState(952);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx)) {
      case 1: {
        setState(951);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
    }
    setState(966);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::T__11) {
      setState(956);
      match(LcypherParser::T__11);
      setState(958);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
      case 1: {
        setState(957);
        match(LcypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(964);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 108) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 108)) & 7) != 0)) {
        setState(960);
        oC_IntegerLiteral();
        setState(962);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx)) {
        case 1: {
          setState(961);
          match(LcypherParser::SP);
          break;
        }

        default:
          break;
        }
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

LcypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SchemaNameContext* LcypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<LcypherParser::OC_SchemaNameContext>(0);
}


size_t LcypherParser::OC_LabelNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_LabelName;
}


std::any LcypherParser::OC_LabelNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_LabelName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_LabelNameContext* LcypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 100, LcypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(968);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

LcypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SchemaNameContext* LcypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<LcypherParser::OC_SchemaNameContext>(0);
}


size_t LcypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelTypeName;
}


std::any LcypherParser::OC_RelTypeNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelTypeName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelTypeNameContext* LcypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 102, LcypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(970);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

LcypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_OrExpressionContext* LcypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<LcypherParser::OC_OrExpressionContext>(0);
}


size_t LcypherParser::OC_ExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Expression;
}


std::any LcypherParser::OC_ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Expression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ExpressionContext* LcypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 104, LcypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(972);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

LcypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_XorExpressionContext *> LcypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<LcypherParser::OC_XorExpressionContext>();
}

LcypherParser::OC_XorExpressionContext* LcypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_OrExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_OrExpressionContext::OR() {
  return getTokens(LcypherParser::OR);
}

tree::TerminalNode* LcypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(LcypherParser::OR, i);
}


size_t LcypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_OrExpression;
}


std::any LcypherParser::OC_OrExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_OrExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_OrExpressionContext* LcypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 106, LcypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(974);
    oC_XorExpression();
    setState(981);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(975);
        match(LcypherParser::SP);
        setState(976);
        match(LcypherParser::OR);
        setState(977);
        match(LcypherParser::SP);
        setState(978);
        oC_XorExpression(); 
      }
      setState(983);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_AndExpressionContext *> LcypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<LcypherParser::OC_AndExpressionContext>();
}

LcypherParser::OC_AndExpressionContext* LcypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_XorExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(LcypherParser::XOR);
}

tree::TerminalNode* LcypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(LcypherParser::XOR, i);
}


size_t LcypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_XorExpression;
}


std::any LcypherParser::OC_XorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_XorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_XorExpressionContext* LcypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 108, LcypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(984);
    oC_AndExpression();
    setState(991);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(985);
        match(LcypherParser::SP);
        setState(986);
        match(LcypherParser::XOR);
        setState(987);
        match(LcypherParser::SP);
        setState(988);
        oC_AndExpression(); 
      }
      setState(993);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

LcypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_NotExpressionContext *> LcypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<LcypherParser::OC_NotExpressionContext>();
}

LcypherParser::OC_NotExpressionContext* LcypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_AndExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_AndExpressionContext::AND() {
  return getTokens(LcypherParser::AND);
}

tree::TerminalNode* LcypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(LcypherParser::AND, i);
}


size_t LcypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_AndExpression;
}


std::any LcypherParser::OC_AndExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_AndExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_AndExpressionContext* LcypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 110, LcypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(994);
    oC_NotExpression();
    setState(1001);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(995);
        match(LcypherParser::SP);
        setState(996);
        match(LcypherParser::AND);
        setState(997);
        match(LcypherParser::SP);
        setState(998);
        oC_NotExpression(); 
      }
      setState(1003);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

LcypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ComparisonExpressionContext* LcypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<LcypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(LcypherParser::NOT);
}

tree::TerminalNode* LcypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(LcypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NotExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NotExpression;
}


std::any LcypherParser::OC_NotExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NotExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NotExpressionContext* LcypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 112, LcypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1010);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LcypherParser::NOT) {
      setState(1004);
      match(LcypherParser::NOT);
      setState(1006);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1005);
        match(LcypherParser::SP);
      }
      setState(1012);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1013);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

LcypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_AddOrSubtractExpressionContext* LcypherParser::OC_ComparisonExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContext<LcypherParser::OC_AddOrSubtractExpressionContext>(0);
}

std::vector<LcypherParser::OC_PartialComparisonExpressionContext *> LcypherParser::OC_ComparisonExpressionContext::oC_PartialComparisonExpression() {
  return getRuleContexts<LcypherParser::OC_PartialComparisonExpressionContext>();
}

LcypherParser::OC_PartialComparisonExpressionContext* LcypherParser::OC_ComparisonExpressionContext::oC_PartialComparisonExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_PartialComparisonExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ComparisonExpression;
}


std::any LcypherParser::OC_ComparisonExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ComparisonExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ComparisonExpressionContext* LcypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 114, LcypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1015);
    oC_AddOrSubtractExpression();
    setState(1022);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1017);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1016);
          match(LcypherParser::SP);
        }
        setState(1019);
        oC_PartialComparisonExpression(); 
      }
      setState(1024);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

LcypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_MultiplyDivideModuloExpressionContext *> LcypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<LcypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

LcypherParser::OC_MultiplyDivideModuloExpressionContext* LcypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_AddOrSubtractExpression;
}


std::any LcypherParser::OC_AddOrSubtractExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_AddOrSubtractExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_AddOrSubtractExpressionContext* LcypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 116, LcypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1025);
    oC_MultiplyDivideModuloExpression();
    setState(1044);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1042);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
        case 1: {
          setState(1027);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1026);
            match(LcypherParser::SP);
          }
          setState(1029);
          match(LcypherParser::T__12);
          setState(1031);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1030);
            match(LcypherParser::SP);
          }
          setState(1033);
          oC_MultiplyDivideModuloExpression();
          break;
        }

        case 2: {
          setState(1035);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1034);
            match(LcypherParser::SP);
          }
          setState(1037);
          match(LcypherParser::T__13);
          setState(1039);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1038);
            match(LcypherParser::SP);
          }
          setState(1041);
          oC_MultiplyDivideModuloExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(1046);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

LcypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_PowerOfExpressionContext *> LcypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<LcypherParser::OC_PowerOfExpressionContext>();
}

LcypherParser::OC_PowerOfExpressionContext* LcypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_MultiplyDivideModuloExpression;
}


std::any LcypherParser::OC_MultiplyDivideModuloExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_MultiplyDivideModuloExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MultiplyDivideModuloExpressionContext* LcypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 118, LcypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1047);
    oC_PowerOfExpression();
    setState(1074);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1072);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx)) {
        case 1: {
          setState(1049);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1048);
            match(LcypherParser::SP);
          }
          setState(1051);
          match(LcypherParser::T__6);
          setState(1053);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1052);
            match(LcypherParser::SP);
          }
          setState(1055);
          oC_PowerOfExpression();
          break;
        }

        case 2: {
          setState(1057);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1056);
            match(LcypherParser::SP);
          }
          setState(1059);
          match(LcypherParser::T__14);
          setState(1061);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1060);
            match(LcypherParser::SP);
          }
          setState(1063);
          oC_PowerOfExpression();
          break;
        }

        case 3: {
          setState(1065);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1064);
            match(LcypherParser::SP);
          }
          setState(1067);
          match(LcypherParser::T__15);
          setState(1069);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == LcypherParser::SP) {
            setState(1068);
            match(LcypherParser::SP);
          }
          setState(1071);
          oC_PowerOfExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(1076);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

LcypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_UnaryAddOrSubtractExpressionContext *> LcypherParser::OC_PowerOfExpressionContext::oC_UnaryAddOrSubtractExpression() {
  return getRuleContexts<LcypherParser::OC_UnaryAddOrSubtractExpressionContext>();
}

LcypherParser::OC_UnaryAddOrSubtractExpressionContext* LcypherParser::OC_PowerOfExpressionContext::oC_UnaryAddOrSubtractExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_UnaryAddOrSubtractExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PowerOfExpression;
}


std::any LcypherParser::OC_PowerOfExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PowerOfExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PowerOfExpressionContext* LcypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 120, LcypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1077);
    oC_UnaryAddOrSubtractExpression();
    setState(1088);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1079);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1078);
          match(LcypherParser::SP);
        }
        setState(1081);
        match(LcypherParser::T__16);
        setState(1083);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1082);
          match(LcypherParser::SP);
        }
        setState(1085);
        oC_UnaryAddOrSubtractExpression(); 
      }
      setState(1090);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddOrSubtractExpressionContext ------------------------------------------------------------------

LcypherParser::OC_UnaryAddOrSubtractExpressionContext::OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_StringListNullOperatorExpressionContext* LcypherParser::OC_UnaryAddOrSubtractExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<LcypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_UnaryAddOrSubtractExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_UnaryAddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_UnaryAddOrSubtractExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_UnaryAddOrSubtractExpression;
}


std::any LcypherParser::OC_UnaryAddOrSubtractExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_UnaryAddOrSubtractExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_UnaryAddOrSubtractExpressionContext* LcypherParser::oC_UnaryAddOrSubtractExpression() {
  OC_UnaryAddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 122, LcypherParser::RuleOC_UnaryAddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1097);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == LcypherParser::T__12

    || _la == LcypherParser::T__13) {
      setState(1091);
      _la = _input->LA(1);
      if (!(_la == LcypherParser::T__12

      || _la == LcypherParser::T__13)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1093);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1092);
        match(LcypherParser::SP);
      }
      setState(1099);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1100);
    oC_StringListNullOperatorExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PropertyOrLabelsExpressionContext* LcypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<LcypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<LcypherParser::OC_StringOperatorExpressionContext *> LcypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContexts<LcypherParser::OC_StringOperatorExpressionContext>();
}

LcypherParser::OC_StringOperatorExpressionContext* LcypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_StringOperatorExpressionContext>(i);
}

std::vector<LcypherParser::OC_ListOperatorExpressionContext *> LcypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<LcypherParser::OC_ListOperatorExpressionContext>();
}

LcypherParser::OC_ListOperatorExpressionContext* LcypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_ListOperatorExpressionContext>(i);
}

std::vector<LcypherParser::OC_NullOperatorExpressionContext *> LcypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContexts<LcypherParser::OC_NullOperatorExpressionContext>();
}

LcypherParser::OC_NullOperatorExpressionContext* LcypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression(size_t i) {
  return getRuleContext<LcypherParser::OC_NullOperatorExpressionContext>(i);
}


size_t LcypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_StringListNullOperatorExpression;
}


std::any LcypherParser::OC_StringListNullOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_StringListNullOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_StringListNullOperatorExpressionContext* LcypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 124, LcypherParser::RuleOC_StringListNullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1102);
    oC_PropertyOrLabelsExpression();
    setState(1108);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1106);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx)) {
        case 1: {
          setState(1103);
          oC_StringOperatorExpression();
          break;
        }

        case 2: {
          setState(1104);
          oC_ListOperatorExpression();
          break;
        }

        case 3: {
          setState(1105);
          oC_NullOperatorExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(1110);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ListOperatorExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ListOperatorExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_ListOperatorExpressionContext::IN() {
  return getToken(LcypherParser::IN, 0);
}

LcypherParser::OC_PropertyOrLabelsExpressionContext* LcypherParser::OC_ListOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<LcypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_ListOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ListOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ListOperatorExpression;
}


std::any LcypherParser::OC_ListOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ListOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ListOperatorExpressionContext* LcypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 126, LcypherParser::RuleOC_ListOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1136);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 198, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1111);
      match(LcypherParser::SP);
      setState(1112);
      match(LcypherParser::IN);
      setState(1114);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1113);
        match(LcypherParser::SP);
      }
      setState(1116);
      oC_PropertyOrLabelsExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1118);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1117);
        match(LcypherParser::SP);
      }
      setState(1120);
      match(LcypherParser::T__7);
      setState(1121);
      oC_Expression();
      setState(1122);
      match(LcypherParser::T__8);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1125);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1124);
        match(LcypherParser::SP);
      }
      setState(1127);
      match(LcypherParser::T__7);
      setState(1129);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 9007199338651908) != 0) || ((((_la - 86) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 86)) & 563083161436033) != 0)) {
        setState(1128);
        oC_Expression();
      }
      setState(1131);
      match(LcypherParser::T__11);
      setState(1133);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 9007199338651908) != 0) || ((((_la - 86) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 86)) & 563083161436033) != 0)) {
        setState(1132);
        oC_Expression();
      }
      setState(1135);
      match(LcypherParser::T__8);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PropertyOrLabelsExpressionContext* LcypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<LcypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(LcypherParser::STARTS, 0);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(LcypherParser::WITH, 0);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(LcypherParser::ENDS, 0);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(LcypherParser::CONTAINS, 0);
}

tree::TerminalNode* LcypherParser::OC_StringOperatorExpressionContext::REGEXP() {
  return getToken(LcypherParser::REGEXP, 0);
}


size_t LcypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_StringOperatorExpression;
}


std::any LcypherParser::OC_StringOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_StringOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_StringOperatorExpressionContext* LcypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 128, LcypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1150);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      setState(1138);
      match(LcypherParser::SP);
      setState(1139);
      match(LcypherParser::STARTS);
      setState(1140);
      match(LcypherParser::SP);
      setState(1141);
      match(LcypherParser::WITH);
      break;
    }

    case 2: {
      setState(1142);
      match(LcypherParser::SP);
      setState(1143);
      match(LcypherParser::ENDS);
      setState(1144);
      match(LcypherParser::SP);
      setState(1145);
      match(LcypherParser::WITH);
      break;
    }

    case 3: {
      setState(1146);
      match(LcypherParser::SP);
      setState(1147);
      match(LcypherParser::CONTAINS);
      break;
    }

    case 4: {
      setState(1148);
      match(LcypherParser::SP);
      setState(1149);
      match(LcypherParser::REGEXP);
      break;
    }

    default:
      break;
    }
    setState(1153);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1152);
      match(LcypherParser::SP);
    }
    setState(1155);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

LcypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(LcypherParser::IS, 0);
}

tree::TerminalNode* LcypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(LcypherParser::NULL_, 0);
}

tree::TerminalNode* LcypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(LcypherParser::NOT, 0);
}


size_t LcypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NullOperatorExpression;
}


std::any LcypherParser::OC_NullOperatorExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NullOperatorExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NullOperatorExpressionContext* LcypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 130, LcypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1167);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1157);
      match(LcypherParser::SP);
      setState(1158);
      match(LcypherParser::IS);
      setState(1159);
      match(LcypherParser::SP);
      setState(1160);
      match(LcypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1161);
      match(LcypherParser::SP);
      setState(1162);
      match(LcypherParser::IS);
      setState(1163);
      match(LcypherParser::SP);
      setState(1164);
      match(LcypherParser::NOT);
      setState(1165);
      match(LcypherParser::SP);
      setState(1166);
      match(LcypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

LcypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_AtomContext* LcypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<LcypherParser::OC_AtomContext>(0);
}

std::vector<LcypherParser::OC_PropertyLookupContext *> LcypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<LcypherParser::OC_PropertyLookupContext>();
}

LcypherParser::OC_PropertyLookupContext* LcypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<LcypherParser::OC_PropertyLookupContext>(i);
}

LcypherParser::OC_NodeLabelsContext* LcypherParser::OC_PropertyOrLabelsExpressionContext::oC_NodeLabels() {
  return getRuleContext<LcypherParser::OC_NodeLabelsContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PropertyOrLabelsExpression;
}


std::any LcypherParser::OC_PropertyOrLabelsExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyOrLabelsExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertyOrLabelsExpressionContext* LcypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 132, LcypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1169);
    oC_Atom();
    setState(1176);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1171);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1170);
          match(LcypherParser::SP);
        }
        setState(1173);
        oC_PropertyLookup(); 
      }
      setState(1178);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx);
    }
    setState(1183);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      setState(1180);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1179);
        match(LcypherParser::SP);
      }
      setState(1182);
      oC_NodeLabels();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

LcypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_LiteralContext* LcypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<LcypherParser::OC_LiteralContext>(0);
}

LcypherParser::OC_ParameterContext* LcypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<LcypherParser::OC_ParameterContext>(0);
}

LcypherParser::OC_CaseExpressionContext* LcypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<LcypherParser::OC_CaseExpressionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::COUNT() {
  return getToken(LcypherParser::COUNT, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_AtomContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ListComprehensionContext* LcypherParser::OC_AtomContext::oC_ListComprehension() {
  return getRuleContext<LcypherParser::OC_ListComprehensionContext>(0);
}

LcypherParser::OC_PatternComprehensionContext* LcypherParser::OC_AtomContext::oC_PatternComprehension() {
  return getRuleContext<LcypherParser::OC_PatternComprehensionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::ALL() {
  return getToken(LcypherParser::ALL, 0);
}

LcypherParser::OC_FilterExpressionContext* LcypherParser::OC_AtomContext::oC_FilterExpression() {
  return getRuleContext<LcypherParser::OC_FilterExpressionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::ANY() {
  return getToken(LcypherParser::ANY, 0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::NONE() {
  return getToken(LcypherParser::NONE, 0);
}

tree::TerminalNode* LcypherParser::OC_AtomContext::SINGLE() {
  return getToken(LcypherParser::SINGLE, 0);
}

LcypherParser::OC_RelationshipsPatternContext* LcypherParser::OC_AtomContext::oC_RelationshipsPattern() {
  return getRuleContext<LcypherParser::OC_RelationshipsPatternContext>(0);
}

LcypherParser::OC_ParenthesizedExpressionContext* LcypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<LcypherParser::OC_ParenthesizedExpressionContext>(0);
}

LcypherParser::OC_FunctionInvocationContext* LcypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<LcypherParser::OC_FunctionInvocationContext>(0);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}


size_t LcypherParser::OC_AtomContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Atom;
}


std::any LcypherParser::OC_AtomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Atom(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_AtomContext* LcypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 134, LcypherParser::RuleOC_Atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1263);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1185);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1186);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1187);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1188);
      match(LcypherParser::COUNT);
      setState(1190);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1189);
        match(LcypherParser::SP);
      }
      setState(1192);
      match(LcypherParser::T__1);
      setState(1194);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1193);
        match(LcypherParser::SP);
      }
      setState(1196);
      match(LcypherParser::T__6);
      setState(1198);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1197);
        match(LcypherParser::SP);
      }
      setState(1200);
      match(LcypherParser::T__2);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1201);
      oC_ListComprehension();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1202);
      oC_PatternComprehension();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1203);
      match(LcypherParser::ALL);
      setState(1205);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1204);
        match(LcypherParser::SP);
      }
      setState(1207);
      match(LcypherParser::T__1);
      setState(1209);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1208);
        match(LcypherParser::SP);
      }
      setState(1211);
      oC_FilterExpression();
      setState(1213);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1212);
        match(LcypherParser::SP);
      }
      setState(1215);
      match(LcypherParser::T__2);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1217);
      match(LcypherParser::ANY);
      setState(1219);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1218);
        match(LcypherParser::SP);
      }
      setState(1221);
      match(LcypherParser::T__1);
      setState(1223);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1222);
        match(LcypherParser::SP);
      }
      setState(1225);
      oC_FilterExpression();
      setState(1227);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1226);
        match(LcypherParser::SP);
      }
      setState(1229);
      match(LcypherParser::T__2);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1231);
      match(LcypherParser::NONE);
      setState(1233);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1232);
        match(LcypherParser::SP);
      }
      setState(1235);
      match(LcypherParser::T__1);
      setState(1237);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1236);
        match(LcypherParser::SP);
      }
      setState(1239);
      oC_FilterExpression();
      setState(1241);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1240);
        match(LcypherParser::SP);
      }
      setState(1243);
      match(LcypherParser::T__2);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1245);
      match(LcypherParser::SINGLE);
      setState(1247);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1246);
        match(LcypherParser::SP);
      }
      setState(1249);
      match(LcypherParser::T__1);
      setState(1251);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1250);
        match(LcypherParser::SP);
      }
      setState(1253);
      oC_FilterExpression();
      setState(1255);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1254);
        match(LcypherParser::SP);
      }
      setState(1257);
      match(LcypherParser::T__2);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1259);
      oC_RelationshipsPattern();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1260);
      oC_ParenthesizedExpression();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1261);
      oC_FunctionInvocation();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1262);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

LcypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NumberLiteralContext* LcypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<LcypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* LcypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(LcypherParser::StringLiteral, 0);
}

LcypherParser::OC_BooleanLiteralContext* LcypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<LcypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* LcypherParser::OC_LiteralContext::NULL_() {
  return getToken(LcypherParser::NULL_, 0);
}

LcypherParser::OC_MapLiteralContext* LcypherParser::OC_LiteralContext::oC_MapLiteral() {
  return getRuleContext<LcypherParser::OC_MapLiteralContext>(0);
}

LcypherParser::OC_ListLiteralContext* LcypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<LcypherParser::OC_ListLiteralContext>(0);
}


size_t LcypherParser::OC_LiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Literal;
}


std::any LcypherParser::OC_LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Literal(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_LiteralContext* LcypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 136, LcypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1271);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::HexInteger:
      case LcypherParser::DecimalInteger:
      case LcypherParser::OctalInteger:
      case LcypherParser::ExponentDecimalReal:
      case LcypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(1265);
        oC_NumberLiteral();
        break;
      }

      case LcypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(1266);
        match(LcypherParser::StringLiteral);
        break;
      }

      case LcypherParser::TRUE_:
      case LcypherParser::FALSE_: {
        enterOuterAlt(_localctx, 3);
        setState(1267);
        oC_BooleanLiteral();
        break;
      }

      case LcypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(1268);
        match(LcypherParser::NULL_);
        break;
      }

      case LcypherParser::T__23: {
        enterOuterAlt(_localctx, 5);
        setState(1269);
        oC_MapLiteral();
        break;
      }

      case LcypherParser::T__7: {
        enterOuterAlt(_localctx, 6);
        setState(1270);
        oC_ListLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

LcypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_BooleanLiteralContext::TRUE_() {
  return getToken(LcypherParser::TRUE_, 0);
}

tree::TerminalNode* LcypherParser::OC_BooleanLiteralContext::FALSE_() {
  return getToken(LcypherParser::FALSE_, 0);
}


size_t LcypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_BooleanLiteral;
}


std::any LcypherParser::OC_BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_BooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_BooleanLiteralContext* LcypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 138, LcypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1273);
    _la = _input->LA(1);
    if (!(_la == LcypherParser::TRUE_

    || _la == LcypherParser::FALSE_)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

LcypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ListLiteralContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ListLiteralContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ListLiteral;
}


std::any LcypherParser::OC_ListLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ListLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ListLiteralContext* LcypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 140, LcypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1275);
    match(LcypherParser::T__7);
    setState(1277);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1276);
      match(LcypherParser::SP);
    }
    setState(1296);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9007199338651908) != 0) || ((((_la - 86) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 86)) & 563083161436033) != 0)) {
      setState(1279);
      oC_Expression();
      setState(1281);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1280);
        match(LcypherParser::SP);
      }
      setState(1293);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LcypherParser::T__3) {
        setState(1283);
        match(LcypherParser::T__3);
        setState(1285);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1284);
          match(LcypherParser::SP);
        }
        setState(1287);
        oC_Expression();
        setState(1289);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1288);
          match(LcypherParser::SP);
        }
        setState(1295);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1298);
    match(LcypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PartialComparisonExpressionContext ------------------------------------------------------------------

LcypherParser::OC_PartialComparisonExpressionContext::OC_PartialComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_AddOrSubtractExpressionContext* LcypherParser::OC_PartialComparisonExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContext<LcypherParser::OC_AddOrSubtractExpressionContext>(0);
}

tree::TerminalNode* LcypherParser::OC_PartialComparisonExpressionContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_PartialComparisonExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PartialComparisonExpression;
}


std::any LcypherParser::OC_PartialComparisonExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PartialComparisonExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PartialComparisonExpressionContext* LcypherParser::oC_PartialComparisonExpression() {
  OC_PartialComparisonExpressionContext *_localctx = _tracker.createInstance<OC_PartialComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 142, LcypherParser::RuleOC_PartialComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1330);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::T__4: {
        enterOuterAlt(_localctx, 1);
        setState(1300);
        match(LcypherParser::T__4);
        setState(1302);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1301);
          match(LcypherParser::SP);
        }
        setState(1304);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__17: {
        enterOuterAlt(_localctx, 2);
        setState(1305);
        match(LcypherParser::T__17);
        setState(1307);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1306);
          match(LcypherParser::SP);
        }
        setState(1309);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__18: {
        enterOuterAlt(_localctx, 3);
        setState(1310);
        match(LcypherParser::T__18);
        setState(1312);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1311);
          match(LcypherParser::SP);
        }
        setState(1314);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__19: {
        enterOuterAlt(_localctx, 4);
        setState(1315);
        match(LcypherParser::T__19);
        setState(1317);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1316);
          match(LcypherParser::SP);
        }
        setState(1319);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__20: {
        enterOuterAlt(_localctx, 5);
        setState(1320);
        match(LcypherParser::T__20);
        setState(1322);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1321);
          match(LcypherParser::SP);
        }
        setState(1324);
        oC_AddOrSubtractExpression();
        break;
      }

      case LcypherParser::T__21: {
        enterOuterAlt(_localctx, 6);
        setState(1325);
        match(LcypherParser::T__21);
        setState(1327);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1326);
          match(LcypherParser::SP);
        }
        setState(1329);
        oC_AddOrSubtractExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

LcypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ParenthesizedExpression;
}


std::any LcypherParser::OC_ParenthesizedExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ParenthesizedExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ParenthesizedExpressionContext* LcypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 144, LcypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1332);
    match(LcypherParser::T__1);
    setState(1334);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1333);
      match(LcypherParser::SP);
    }
    setState(1336);
    oC_Expression();
    setState(1338);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1337);
      match(LcypherParser::SP);
    }
    setState(1340);
    match(LcypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipsPatternContext ------------------------------------------------------------------

LcypherParser::OC_RelationshipsPatternContext::OC_RelationshipsPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NodePatternContext* LcypherParser::OC_RelationshipsPatternContext::oC_NodePattern() {
  return getRuleContext<LcypherParser::OC_NodePatternContext>(0);
}

std::vector<LcypherParser::OC_PatternElementChainContext *> LcypherParser::OC_RelationshipsPatternContext::oC_PatternElementChain() {
  return getRuleContexts<LcypherParser::OC_PatternElementChainContext>();
}

LcypherParser::OC_PatternElementChainContext* LcypherParser::OC_RelationshipsPatternContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<LcypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_RelationshipsPatternContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_RelationshipsPatternContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_RelationshipsPatternContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RelationshipsPattern;
}


std::any LcypherParser::OC_RelationshipsPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RelationshipsPattern(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RelationshipsPatternContext* LcypherParser::oC_RelationshipsPattern() {
  OC_RelationshipsPatternContext *_localctx = _tracker.createInstance<OC_RelationshipsPatternContext>(_ctx, getState());
  enterRule(_localctx, 146, LcypherParser::RuleOC_RelationshipsPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1342);
    oC_NodePattern();
    setState(1347); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1344);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == LcypherParser::SP) {
                setState(1343);
                match(LcypherParser::SP);
              }
              setState(1346);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1349); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FilterExpressionContext ------------------------------------------------------------------

LcypherParser::OC_FilterExpressionContext::OC_FilterExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_IdInCollContext* LcypherParser::OC_FilterExpressionContext::oC_IdInColl() {
  return getRuleContext<LcypherParser::OC_IdInCollContext>(0);
}

LcypherParser::OC_WhereContext* LcypherParser::OC_FilterExpressionContext::oC_Where() {
  return getRuleContext<LcypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* LcypherParser::OC_FilterExpressionContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_FilterExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_FilterExpression;
}


std::any LcypherParser::OC_FilterExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_FilterExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_FilterExpressionContext* LcypherParser::oC_FilterExpression() {
  OC_FilterExpressionContext *_localctx = _tracker.createInstance<OC_FilterExpressionContext>(_ctx, getState());
  enterRule(_localctx, 148, LcypherParser::RuleOC_FilterExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1351);
    oC_IdInColl();
    setState(1356);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx)) {
    case 1: {
      setState(1353);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1352);
        match(LcypherParser::SP);
      }
      setState(1355);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IdInCollContext ------------------------------------------------------------------

LcypherParser::OC_IdInCollContext::OC_IdInCollContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_VariableContext* LcypherParser::OC_IdInCollContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_IdInCollContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_IdInCollContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_IdInCollContext::IN() {
  return getToken(LcypherParser::IN, 0);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_IdInCollContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_IdInCollContext::getRuleIndex() const {
  return LcypherParser::RuleOC_IdInColl;
}


std::any LcypherParser::OC_IdInCollContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_IdInColl(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_IdInCollContext* LcypherParser::oC_IdInColl() {
  OC_IdInCollContext *_localctx = _tracker.createInstance<OC_IdInCollContext>(_ctx, getState());
  enterRule(_localctx, 150, LcypherParser::RuleOC_IdInColl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1358);
    oC_Variable();
    setState(1359);
    match(LcypherParser::SP);
    setState(1360);
    match(LcypherParser::IN);
    setState(1361);
    match(LcypherParser::SP);
    setState(1362);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

LcypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_FunctionNameContext* LcypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<LcypherParser::OC_FunctionNameContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(LcypherParser::DISTINCT, 0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_FunctionInvocationContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_FunctionInvocationContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return LcypherParser::RuleOC_FunctionInvocation;
}


std::any LcypherParser::OC_FunctionInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_FunctionInvocation(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_FunctionInvocationContext* LcypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 152, LcypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1364);
    oC_FunctionName();
    setState(1366);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1365);
      match(LcypherParser::SP);
    }
    setState(1368);
    match(LcypherParser::T__1);
    setState(1370);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1369);
      match(LcypherParser::SP);
    }
    setState(1376);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::DISTINCT) {
      setState(1372);
      match(LcypherParser::DISTINCT);
      setState(1374);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1373);
        match(LcypherParser::SP);
      }
    }
    setState(1395);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9007199338651908) != 0) || ((((_la - 86) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 86)) & 563083161436033) != 0)) {
      setState(1378);
      oC_Expression();
      setState(1380);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1379);
        match(LcypherParser::SP);
      }
      setState(1392);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LcypherParser::T__3) {
        setState(1382);
        match(LcypherParser::T__3);
        setState(1384);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1383);
          match(LcypherParser::SP);
        }
        setState(1386);
        oC_Expression();
        setState(1388);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1387);
          match(LcypherParser::SP);
        }
        setState(1394);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1397);
    match(LcypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

LcypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NamespaceContext* LcypherParser::OC_FunctionNameContext::oC_Namespace() {
  return getRuleContext<LcypherParser::OC_NamespaceContext>(0);
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_FunctionNameContext::EXISTS() {
  return getToken(LcypherParser::EXISTS, 0);
}


size_t LcypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_FunctionName;
}


std::any LcypherParser::OC_FunctionNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_FunctionName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_FunctionNameContext* LcypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 154, LcypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1403);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1399);
        oC_Namespace();
        setState(1400);
        oC_SymbolicName();
        break;
      }

      case LcypherParser::EXISTS: {
        enterOuterAlt(_localctx, 2);
        setState(1402);
        match(LcypherParser::EXISTS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplicitProcedureInvocationContext ------------------------------------------------------------------

LcypherParser::OC_ExplicitProcedureInvocationContext::OC_ExplicitProcedureInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ProcedureNameContext* LcypherParser::OC_ExplicitProcedureInvocationContext::oC_ProcedureName() {
  return getRuleContext<LcypherParser::OC_ProcedureNameContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ExplicitProcedureInvocationContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ExplicitProcedureInvocationContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_ExplicitProcedureInvocationContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ExplicitProcedureInvocationContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_ExplicitProcedureInvocationContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ExplicitProcedureInvocation;
}


std::any LcypherParser::OC_ExplicitProcedureInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ExplicitProcedureInvocation(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ExplicitProcedureInvocationContext* LcypherParser::oC_ExplicitProcedureInvocation() {
  OC_ExplicitProcedureInvocationContext *_localctx = _tracker.createInstance<OC_ExplicitProcedureInvocationContext>(_ctx, getState());
  enterRule(_localctx, 156, LcypherParser::RuleOC_ExplicitProcedureInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1405);
    oC_ProcedureName();
    setState(1407);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1406);
      match(LcypherParser::SP);
    }
    setState(1409);
    match(LcypherParser::T__1);
    setState(1411);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1410);
      match(LcypherParser::SP);
    }
    setState(1430);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9007199338651908) != 0) || ((((_la - 86) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 86)) & 563083161436033) != 0)) {
      setState(1413);
      oC_Expression();
      setState(1415);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1414);
        match(LcypherParser::SP);
      }
      setState(1427);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LcypherParser::T__3) {
        setState(1417);
        match(LcypherParser::T__3);
        setState(1419);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1418);
          match(LcypherParser::SP);
        }
        setState(1421);
        oC_Expression();
        setState(1423);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1422);
          match(LcypherParser::SP);
        }
        setState(1429);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1432);
    match(LcypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ImplicitProcedureInvocationContext ------------------------------------------------------------------

LcypherParser::OC_ImplicitProcedureInvocationContext::OC_ImplicitProcedureInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_ProcedureNameContext* LcypherParser::OC_ImplicitProcedureInvocationContext::oC_ProcedureName() {
  return getRuleContext<LcypherParser::OC_ProcedureNameContext>(0);
}


size_t LcypherParser::OC_ImplicitProcedureInvocationContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ImplicitProcedureInvocation;
}


std::any LcypherParser::OC_ImplicitProcedureInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ImplicitProcedureInvocation(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ImplicitProcedureInvocationContext* LcypherParser::oC_ImplicitProcedureInvocation() {
  OC_ImplicitProcedureInvocationContext *_localctx = _tracker.createInstance<OC_ImplicitProcedureInvocationContext>(_ctx, getState());
  enterRule(_localctx, 158, LcypherParser::RuleOC_ImplicitProcedureInvocation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1434);
    oC_ProcedureName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProcedureResultFieldContext ------------------------------------------------------------------

LcypherParser::OC_ProcedureResultFieldContext::OC_ProcedureResultFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_ProcedureResultFieldContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}


size_t LcypherParser::OC_ProcedureResultFieldContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ProcedureResultField;
}


std::any LcypherParser::OC_ProcedureResultFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ProcedureResultField(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ProcedureResultFieldContext* LcypherParser::oC_ProcedureResultField() {
  OC_ProcedureResultFieldContext *_localctx = _tracker.createInstance<OC_ProcedureResultFieldContext>(_ctx, getState());
  enterRule(_localctx, 160, LcypherParser::RuleOC_ProcedureResultField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1436);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProcedureNameContext ------------------------------------------------------------------

LcypherParser::OC_ProcedureNameContext::OC_ProcedureNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_NamespaceContext* LcypherParser::OC_ProcedureNameContext::oC_Namespace() {
  return getRuleContext<LcypherParser::OC_NamespaceContext>(0);
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_ProcedureNameContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}


size_t LcypherParser::OC_ProcedureNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ProcedureName;
}


std::any LcypherParser::OC_ProcedureNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ProcedureName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ProcedureNameContext* LcypherParser::oC_ProcedureName() {
  OC_ProcedureNameContext *_localctx = _tracker.createInstance<OC_ProcedureNameContext>(_ctx, getState());
  enterRule(_localctx, 162, LcypherParser::RuleOC_ProcedureName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1438);
    oC_Namespace();
    setState(1439);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NamespaceContext ------------------------------------------------------------------

LcypherParser::OC_NamespaceContext::OC_NamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<LcypherParser::OC_SymbolicNameContext *> LcypherParser::OC_NamespaceContext::oC_SymbolicName() {
  return getRuleContexts<LcypherParser::OC_SymbolicNameContext>();
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_NamespaceContext::oC_SymbolicName(size_t i) {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(i);
}


size_t LcypherParser::OC_NamespaceContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Namespace;
}


std::any LcypherParser::OC_NamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Namespace(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NamespaceContext* LcypherParser::oC_Namespace() {
  OC_NamespaceContext *_localctx = _tracker.createInstance<OC_NamespaceContext>(_ctx, getState());
  enterRule(_localctx, 164, LcypherParser::RuleOC_Namespace);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1446);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1441);
        oC_SymbolicName();
        setState(1442);
        match(LcypherParser::T__22); 
      }
      setState(1448);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListComprehensionContext ------------------------------------------------------------------

LcypherParser::OC_ListComprehensionContext::OC_ListComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_FilterExpressionContext* LcypherParser::OC_ListComprehensionContext::oC_FilterExpression() {
  return getRuleContext<LcypherParser::OC_FilterExpressionContext>(0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_ListComprehensionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_ListComprehensionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_ListComprehensionContext::oC_Expression() {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(0);
}


size_t LcypherParser::OC_ListComprehensionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ListComprehension;
}


std::any LcypherParser::OC_ListComprehensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ListComprehension(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ListComprehensionContext* LcypherParser::oC_ListComprehension() {
  OC_ListComprehensionContext *_localctx = _tracker.createInstance<OC_ListComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 166, LcypherParser::RuleOC_ListComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1449);
    match(LcypherParser::T__7);
    setState(1451);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1450);
      match(LcypherParser::SP);
    }
    setState(1453);
    oC_FilterExpression();
    setState(1462);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx)) {
    case 1: {
      setState(1455);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1454);
        match(LcypherParser::SP);
      }
      setState(1457);
      match(LcypherParser::T__10);
      setState(1459);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1458);
        match(LcypherParser::SP);
      }
      setState(1461);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(1465);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1464);
      match(LcypherParser::SP);
    }
    setState(1467);
    match(LcypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternComprehensionContext ------------------------------------------------------------------

LcypherParser::OC_PatternComprehensionContext::OC_PatternComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_RelationshipsPatternContext* LcypherParser::OC_PatternComprehensionContext::oC_RelationshipsPattern() {
  return getRuleContext<LcypherParser::OC_RelationshipsPatternContext>(0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_PatternComprehensionContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_PatternComprehensionContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PatternComprehensionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PatternComprehensionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

LcypherParser::OC_VariableContext* LcypherParser::OC_PatternComprehensionContext::oC_Variable() {
  return getRuleContext<LcypherParser::OC_VariableContext>(0);
}

tree::TerminalNode* LcypherParser::OC_PatternComprehensionContext::WHERE() {
  return getToken(LcypherParser::WHERE, 0);
}


size_t LcypherParser::OC_PatternComprehensionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PatternComprehension;
}


std::any LcypherParser::OC_PatternComprehensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PatternComprehension(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PatternComprehensionContext* LcypherParser::oC_PatternComprehension() {
  OC_PatternComprehensionContext *_localctx = _tracker.createInstance<OC_PatternComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 168, LcypherParser::RuleOC_PatternComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1469);
    match(LcypherParser::T__7);
    setState(1471);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1470);
      match(LcypherParser::SP);
    }
    setState(1481);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 94) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 94)) & 2199493148687) != 0)) {
      setState(1473);
      oC_Variable();
      setState(1475);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1474);
        match(LcypherParser::SP);
      }
      setState(1477);
      match(LcypherParser::T__4);
      setState(1479);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1478);
        match(LcypherParser::SP);
      }
    }
    setState(1483);
    oC_RelationshipsPattern();
    setState(1485);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1484);
      match(LcypherParser::SP);
    }
    setState(1495);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::WHERE) {
      setState(1487);
      match(LcypherParser::WHERE);
      setState(1489);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1488);
        match(LcypherParser::SP);
      }
      setState(1491);
      oC_Expression();
      setState(1493);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1492);
        match(LcypherParser::SP);
      }
    }
    setState(1497);
    match(LcypherParser::T__10);
    setState(1499);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1498);
      match(LcypherParser::SP);
    }
    setState(1501);
    oC_Expression();
    setState(1503);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1502);
      match(LcypherParser::SP);
    }
    setState(1505);
    match(LcypherParser::T__8);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

LcypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_PropertyKeyNameContext* LcypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<LcypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_PropertyLookupContext::SP() {
  return getToken(LcypherParser::SP, 0);
}


size_t LcypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PropertyLookup;
}


std::any LcypherParser::OC_PropertyLookupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyLookup(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertyLookupContext* LcypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 170, LcypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1507);
    match(LcypherParser::T__22);
    setState(1509);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1508);
      match(LcypherParser::SP);
    }

    setState(1511);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

LcypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_CaseExpressionContext::END() {
  return getToken(LcypherParser::END, 0);
}

tree::TerminalNode* LcypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(LcypherParser::ELSE, 0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

tree::TerminalNode* LcypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(LcypherParser::CASE, 0);
}

std::vector<LcypherParser::OC_CaseAlternativesContext *> LcypherParser::OC_CaseExpressionContext::oC_CaseAlternatives() {
  return getRuleContexts<LcypherParser::OC_CaseAlternativesContext>();
}

LcypherParser::OC_CaseAlternativesContext* LcypherParser::OC_CaseExpressionContext::oC_CaseAlternatives(size_t i) {
  return getRuleContext<LcypherParser::OC_CaseAlternativesContext>(i);
}


size_t LcypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_CaseExpression;
}


std::any LcypherParser::OC_CaseExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_CaseExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_CaseExpressionContext* LcypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 172, LcypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1535);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      setState(1513);
      match(LcypherParser::CASE);
      setState(1518); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1515);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == LcypherParser::SP) {
                  setState(1514);
                  match(LcypherParser::SP);
                }
                setState(1517);
                oC_CaseAlternatives();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1520); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(1522);
      match(LcypherParser::CASE);
      setState(1524);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1523);
        match(LcypherParser::SP);
      }
      setState(1526);
      oC_Expression();
      setState(1531); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1528);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == LcypherParser::SP) {
                  setState(1527);
                  match(LcypherParser::SP);
                }
                setState(1530);
                oC_CaseAlternatives();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1533); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(1545);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 284, _ctx)) {
    case 1: {
      setState(1538);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1537);
        match(LcypherParser::SP);
      }
      setState(1540);
      match(LcypherParser::ELSE);
      setState(1542);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1541);
        match(LcypherParser::SP);
      }
      setState(1544);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(1548);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1547);
      match(LcypherParser::SP);
    }
    setState(1550);
    match(LcypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativesContext ------------------------------------------------------------------

LcypherParser::OC_CaseAlternativesContext::OC_CaseAlternativesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_CaseAlternativesContext::WHEN() {
  return getToken(LcypherParser::WHEN, 0);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_CaseAlternativesContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_CaseAlternativesContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* LcypherParser::OC_CaseAlternativesContext::THEN() {
  return getToken(LcypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_CaseAlternativesContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_CaseAlternativesContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_CaseAlternativesContext::getRuleIndex() const {
  return LcypherParser::RuleOC_CaseAlternatives;
}


std::any LcypherParser::OC_CaseAlternativesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_CaseAlternatives(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_CaseAlternativesContext* LcypherParser::oC_CaseAlternatives() {
  OC_CaseAlternativesContext *_localctx = _tracker.createInstance<OC_CaseAlternativesContext>(_ctx, getState());
  enterRule(_localctx, 174, LcypherParser::RuleOC_CaseAlternatives);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1552);
    match(LcypherParser::WHEN);
    setState(1554);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1553);
      match(LcypherParser::SP);
    }
    setState(1556);
    oC_Expression();
    setState(1558);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1557);
      match(LcypherParser::SP);
    }
    setState(1560);
    match(LcypherParser::THEN);
    setState(1562);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1561);
      match(LcypherParser::SP);
    }
    setState(1564);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

LcypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}


size_t LcypherParser::OC_VariableContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Variable;
}


std::any LcypherParser::OC_VariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Variable(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_VariableContext* LcypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 176, LcypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1566);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

LcypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_DoubleLiteralContext* LcypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<LcypherParser::OC_DoubleLiteralContext>(0);
}

LcypherParser::OC_IntegerLiteralContext* LcypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<LcypherParser::OC_IntegerLiteralContext>(0);
}


size_t LcypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_NumberLiteral;
}


std::any LcypherParser::OC_NumberLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_NumberLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_NumberLiteralContext* LcypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 178, LcypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1570);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::ExponentDecimalReal:
      case LcypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(1568);
        oC_DoubleLiteral();
        break;
      }

      case LcypherParser::HexInteger:
      case LcypherParser::DecimalInteger:
      case LcypherParser::OctalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(1569);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MapLiteralContext ------------------------------------------------------------------

LcypherParser::OC_MapLiteralContext::OC_MapLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> LcypherParser::OC_MapLiteralContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_MapLiteralContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}

std::vector<LcypherParser::OC_PropertyKeyNameContext *> LcypherParser::OC_MapLiteralContext::oC_PropertyKeyName() {
  return getRuleContexts<LcypherParser::OC_PropertyKeyNameContext>();
}

LcypherParser::OC_PropertyKeyNameContext* LcypherParser::OC_MapLiteralContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<LcypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<LcypherParser::OC_ExpressionContext *> LcypherParser::OC_MapLiteralContext::oC_Expression() {
  return getRuleContexts<LcypherParser::OC_ExpressionContext>();
}

LcypherParser::OC_ExpressionContext* LcypherParser::OC_MapLiteralContext::oC_Expression(size_t i) {
  return getRuleContext<LcypherParser::OC_ExpressionContext>(i);
}


size_t LcypherParser::OC_MapLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_MapLiteral;
}


std::any LcypherParser::OC_MapLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_MapLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_MapLiteralContext* LcypherParser::oC_MapLiteral() {
  OC_MapLiteralContext *_localctx = _tracker.createInstance<OC_MapLiteralContext>(_ctx, getState());
  enterRule(_localctx, 180, LcypherParser::RuleOC_MapLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1572);
    match(LcypherParser::T__23);
    setState(1574);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == LcypherParser::SP) {
      setState(1573);
      match(LcypherParser::SP);
    }
    setState(1609);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 52) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 52)) & 594474599513563135) != 0) || ((((_la - 120) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 120)) & 40959) != 0)) {
      setState(1576);
      oC_PropertyKeyName();
      setState(1578);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1577);
        match(LcypherParser::SP);
      }
      setState(1580);
      match(LcypherParser::T__9);
      setState(1582);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1581);
        match(LcypherParser::SP);
      }
      setState(1584);
      oC_Expression();
      setState(1586);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == LcypherParser::SP) {
        setState(1585);
        match(LcypherParser::SP);
      }
      setState(1606);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == LcypherParser::T__3) {
        setState(1588);
        match(LcypherParser::T__3);
        setState(1590);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1589);
          match(LcypherParser::SP);
        }
        setState(1592);
        oC_PropertyKeyName();
        setState(1594);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1593);
          match(LcypherParser::SP);
        }
        setState(1596);
        match(LcypherParser::T__9);
        setState(1598);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1597);
          match(LcypherParser::SP);
        }
        setState(1600);
        oC_Expression();
        setState(1602);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == LcypherParser::SP) {
          setState(1601);
          match(LcypherParser::SP);
        }
        setState(1608);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1611);
    match(LcypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

LcypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* LcypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(LcypherParser::DecimalInteger, 0);
}


size_t LcypherParser::OC_ParameterContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Parameter;
}


std::any LcypherParser::OC_ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Parameter(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ParameterContext* LcypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 182, LcypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1613);
    match(LcypherParser::T__25);
    setState(1616);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        setState(1614);
        oC_SymbolicName();
        break;
      }

      case LcypherParser::DecimalInteger: {
        setState(1615);
        match(LcypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

LcypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_AtomContext* LcypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<LcypherParser::OC_AtomContext>(0);
}

std::vector<LcypherParser::OC_PropertyLookupContext *> LcypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<LcypherParser::OC_PropertyLookupContext>();
}

LcypherParser::OC_PropertyLookupContext* LcypherParser::OC_PropertyExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<LcypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> LcypherParser::OC_PropertyExpressionContext::SP() {
  return getTokens(LcypherParser::SP);
}

tree::TerminalNode* LcypherParser::OC_PropertyExpressionContext::SP(size_t i) {
  return getToken(LcypherParser::SP, i);
}


size_t LcypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PropertyExpression;
}


std::any LcypherParser::OC_PropertyExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyExpression(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertyExpressionContext* LcypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 184, LcypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1618);
    oC_Atom();
    setState(1623); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1620);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == LcypherParser::SP) {
                setState(1619);
                match(LcypherParser::SP);
              }
              setState(1622);
              oC_PropertyLookup();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1625); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

LcypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SchemaNameContext* LcypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<LcypherParser::OC_SchemaNameContext>(0);
}


size_t LcypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_PropertyKeyName;
}


std::any LcypherParser::OC_PropertyKeyNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_PropertyKeyName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_PropertyKeyNameContext* LcypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 186, LcypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1627);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

LcypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_IntegerLiteralContext::HexInteger() {
  return getToken(LcypherParser::HexInteger, 0);
}

tree::TerminalNode* LcypherParser::OC_IntegerLiteralContext::OctalInteger() {
  return getToken(LcypherParser::OctalInteger, 0);
}

tree::TerminalNode* LcypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(LcypherParser::DecimalInteger, 0);
}


size_t LcypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_IntegerLiteral;
}


std::any LcypherParser::OC_IntegerLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_IntegerLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_IntegerLiteralContext* LcypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 188, LcypherParser::RuleOC_IntegerLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1629);
    _la = _input->LA(1);
    if (!(((((_la - 108) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 108)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

LcypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_DoubleLiteralContext::ExponentDecimalReal() {
  return getToken(LcypherParser::ExponentDecimalReal, 0);
}

tree::TerminalNode* LcypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(LcypherParser::RegularDecimalReal, 0);
}


size_t LcypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return LcypherParser::RuleOC_DoubleLiteral;
}


std::any LcypherParser::OC_DoubleLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_DoubleLiteral(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_DoubleLiteralContext* LcypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 190, LcypherParser::RuleOC_DoubleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1631);
    _la = _input->LA(1);
    if (!(_la == LcypherParser::ExponentDecimalReal

    || _la == LcypherParser::RegularDecimalReal)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

LcypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<LcypherParser::OC_SymbolicNameContext>(0);
}

LcypherParser::OC_ReservedWordContext* LcypherParser::OC_SchemaNameContext::oC_ReservedWord() {
  return getRuleContext<LcypherParser::OC_ReservedWordContext>(0);
}


size_t LcypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SchemaName;
}


std::any LcypherParser::OC_SchemaNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SchemaName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SchemaNameContext* LcypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 192, LcypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1635);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case LcypherParser::COUNT:
      case LcypherParser::ANY:
      case LcypherParser::NONE:
      case LcypherParser::SINGLE:
      case LcypherParser::HexLetter:
      case LcypherParser::FILTER:
      case LcypherParser::EXTRACT:
      case LcypherParser::UnescapedSymbolicName:
      case LcypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1633);
        oC_SymbolicName();
        break;
      }

      case LcypherParser::UNION:
      case LcypherParser::ALL:
      case LcypherParser::OPTIONAL_:
      case LcypherParser::MATCH:
      case LcypherParser::UNWIND:
      case LcypherParser::AS:
      case LcypherParser::MERGE:
      case LcypherParser::ON:
      case LcypherParser::CREATE:
      case LcypherParser::SET:
      case LcypherParser::DETACH:
      case LcypherParser::DELETE_:
      case LcypherParser::REMOVE:
      case LcypherParser::WITH:
      case LcypherParser::DISTINCT:
      case LcypherParser::RETURN:
      case LcypherParser::ORDER:
      case LcypherParser::BY:
      case LcypherParser::L_SKIP:
      case LcypherParser::LIMIT:
      case LcypherParser::ASCENDING:
      case LcypherParser::ASC:
      case LcypherParser::DESCENDING:
      case LcypherParser::DESC:
      case LcypherParser::WHERE:
      case LcypherParser::OR:
      case LcypherParser::XOR:
      case LcypherParser::AND:
      case LcypherParser::NOT:
      case LcypherParser::IN:
      case LcypherParser::STARTS:
      case LcypherParser::ENDS:
      case LcypherParser::CONTAINS:
      case LcypherParser::IS:
      case LcypherParser::NULL_:
      case LcypherParser::TRUE_:
      case LcypherParser::FALSE_:
      case LcypherParser::EXISTS:
      case LcypherParser::CASE:
      case LcypherParser::ELSE:
      case LcypherParser::END:
      case LcypherParser::WHEN:
      case LcypherParser::THEN:
      case LcypherParser::CONSTRAINT:
      case LcypherParser::DO:
      case LcypherParser::FOR:
      case LcypherParser::REQUIRE:
      case LcypherParser::UNIQUE:
      case LcypherParser::MANDATORY:
      case LcypherParser::SCALAR:
      case LcypherParser::OF:
      case LcypherParser::ADD:
      case LcypherParser::DROP: {
        enterOuterAlt(_localctx, 2);
        setState(1634);
        oC_ReservedWord();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

LcypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(LcypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(LcypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(LcypherParser::HexLetter, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::COUNT() {
  return getToken(LcypherParser::COUNT, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::FILTER() {
  return getToken(LcypherParser::FILTER, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::EXTRACT() {
  return getToken(LcypherParser::EXTRACT, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::ANY() {
  return getToken(LcypherParser::ANY, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::NONE() {
  return getToken(LcypherParser::NONE, 0);
}

tree::TerminalNode* LcypherParser::OC_SymbolicNameContext::SINGLE() {
  return getToken(LcypherParser::SINGLE, 0);
}


size_t LcypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return LcypherParser::RuleOC_SymbolicName;
}


std::any LcypherParser::OC_SymbolicNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_SymbolicName(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_SymbolicNameContext* LcypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 194, LcypherParser::RuleOC_SymbolicName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1637);
    _la = _input->LA(1);
    if (!(((((_la - 94) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 94)) & 2199493148687) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReservedWordContext ------------------------------------------------------------------

LcypherParser::OC_ReservedWordContext::OC_ReservedWordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ALL() {
  return getToken(LcypherParser::ALL, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ASC() {
  return getToken(LcypherParser::ASC, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ASCENDING() {
  return getToken(LcypherParser::ASCENDING, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::BY() {
  return getToken(LcypherParser::BY, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::CREATE() {
  return getToken(LcypherParser::CREATE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DELETE_() {
  return getToken(LcypherParser::DELETE_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DESC() {
  return getToken(LcypherParser::DESC, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DESCENDING() {
  return getToken(LcypherParser::DESCENDING, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DETACH() {
  return getToken(LcypherParser::DETACH, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::EXISTS() {
  return getToken(LcypherParser::EXISTS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::LIMIT() {
  return getToken(LcypherParser::LIMIT, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::MATCH() {
  return getToken(LcypherParser::MATCH, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::MERGE() {
  return getToken(LcypherParser::MERGE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ON() {
  return getToken(LcypherParser::ON, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::OPTIONAL_() {
  return getToken(LcypherParser::OPTIONAL_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ORDER() {
  return getToken(LcypherParser::ORDER, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::REMOVE() {
  return getToken(LcypherParser::REMOVE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::RETURN() {
  return getToken(LcypherParser::RETURN, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::SET() {
  return getToken(LcypherParser::SET, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::L_SKIP() {
  return getToken(LcypherParser::L_SKIP, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::WHERE() {
  return getToken(LcypherParser::WHERE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::WITH() {
  return getToken(LcypherParser::WITH, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::UNION() {
  return getToken(LcypherParser::UNION, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::UNWIND() {
  return getToken(LcypherParser::UNWIND, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::AND() {
  return getToken(LcypherParser::AND, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::AS() {
  return getToken(LcypherParser::AS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::CONTAINS() {
  return getToken(LcypherParser::CONTAINS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DISTINCT() {
  return getToken(LcypherParser::DISTINCT, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ENDS() {
  return getToken(LcypherParser::ENDS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::IN() {
  return getToken(LcypherParser::IN, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::IS() {
  return getToken(LcypherParser::IS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::NOT() {
  return getToken(LcypherParser::NOT, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::OR() {
  return getToken(LcypherParser::OR, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::STARTS() {
  return getToken(LcypherParser::STARTS, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::XOR() {
  return getToken(LcypherParser::XOR, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::FALSE_() {
  return getToken(LcypherParser::FALSE_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::TRUE_() {
  return getToken(LcypherParser::TRUE_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::NULL_() {
  return getToken(LcypherParser::NULL_, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::CONSTRAINT() {
  return getToken(LcypherParser::CONSTRAINT, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DO() {
  return getToken(LcypherParser::DO, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::FOR() {
  return getToken(LcypherParser::FOR, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::REQUIRE() {
  return getToken(LcypherParser::REQUIRE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::UNIQUE() {
  return getToken(LcypherParser::UNIQUE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::CASE() {
  return getToken(LcypherParser::CASE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::WHEN() {
  return getToken(LcypherParser::WHEN, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::THEN() {
  return getToken(LcypherParser::THEN, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ELSE() {
  return getToken(LcypherParser::ELSE, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::END() {
  return getToken(LcypherParser::END, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::MANDATORY() {
  return getToken(LcypherParser::MANDATORY, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::SCALAR() {
  return getToken(LcypherParser::SCALAR, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::OF() {
  return getToken(LcypherParser::OF, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::ADD() {
  return getToken(LcypherParser::ADD, 0);
}

tree::TerminalNode* LcypherParser::OC_ReservedWordContext::DROP() {
  return getToken(LcypherParser::DROP, 0);
}


size_t LcypherParser::OC_ReservedWordContext::getRuleIndex() const {
  return LcypherParser::RuleOC_ReservedWord;
}


std::any LcypherParser::OC_ReservedWordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_ReservedWord(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_ReservedWordContext* LcypherParser::oC_ReservedWord() {
  OC_ReservedWordContext *_localctx = _tracker.createInstance<OC_ReservedWordContext>(_ctx, getState());
  enterRule(_localctx, 196, LcypherParser::RuleOC_ReservedWord);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1639);
    _la = _input->LA(1);
    if (!(((((_la - 52) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 52)) & 17947876512473087) != 0) || ((((_la - 123) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 123)) & 1023) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

LcypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LcypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return LcypherParser::RuleOC_LeftArrowHead;
}


std::any LcypherParser::OC_LeftArrowHeadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_LeftArrowHead(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_LeftArrowHeadContext* LcypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 198, LcypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1641);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2013790208) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

LcypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LcypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return LcypherParser::RuleOC_RightArrowHead;
}


std::any LcypherParser::OC_RightArrowHeadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_RightArrowHead(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_RightArrowHeadContext* LcypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 200, LcypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1643);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 32213303296) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

LcypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t LcypherParser::OC_DashContext::getRuleIndex() const {
  return LcypherParser::RuleOC_Dash;
}


std::any LcypherParser::OC_DashContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<LcypherVisitor*>(visitor))
    return parserVisitor->visitOC_Dash(this);
  else
    return visitor->visitChildren(this);
}

LcypherParser::OC_DashContext* LcypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 202, LcypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1645);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 70334384455680) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void LcypherParser::initialize() {
  ::antlr4::internal::call_once(lcypherParserOnceFlag, lcypherParserInitialize);
}
